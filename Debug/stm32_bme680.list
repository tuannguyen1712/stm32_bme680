
stm32_bme680.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eac  0800d678  0800d678  0001d678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e524  0800e524  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e524  0800e524  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e52c  0800e52c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e52c  0800e52c  0001e52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e530  0800e530  0001e530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dc8  200001f0  0800e724  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fb8  0800e724  00024fb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c032  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d17  00000000  00000000  0003c252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  0003ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001808  00000000  00000000  000418f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000058c8  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2c7  00000000  00000000  000489c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009effd  00000000  00000000  00065c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104c84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083d0  00000000  00000000  00104cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d660 	.word	0x0800d660

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800d660 	.word	0x0800d660

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t byte) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af04      	add	r7, sp, #16
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	1cfb      	adds	r3, r7, #3
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2200      	movs	r2, #0
 8001034:	2178      	movs	r1, #120	; 0x78
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f002 f92c 	bl	8003294 <HAL_I2C_Mem_Write>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(I2C_HandleTypeDef *hi2c, uint8_t* buffer, size_t buff_size) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af04      	add	r7, sp, #16
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	b29b      	uxth	r3, r3
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	9202      	str	r2, [sp, #8]
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	2240      	movs	r2, #64	; 0x40
 8001064:	2178      	movs	r1, #120	; 0x78
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f002 f914 	bl	8003294 <HAL_I2C_Mem_Write>
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(I2C_HandleTypeDef *hi2c) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    // Reset OLED
    ssd1306_Reset();
 800107c:	f7ff ffc4 	bl	8001008 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	; 0x64
 8001082:	f001 fc5d 	bl	8002940 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(hi2c, 0); //display off
 8001086:	2100      	movs	r1, #0
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 fa59 	bl	8001540 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(hi2c, 0x20); //Set Memory Addressing Mode
 800108e:	2120      	movs	r1, #32
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffc0 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001096:	2100      	movs	r1, #0
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffbc 	bl	8001016 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(hi2c, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800109e:	21b0      	movs	r1, #176	; 0xb0
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffb8 	bl	8001016 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(hi2c, 0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(hi2c, 0xC8); //Set COM Output Scan Direction
 80010a6:	21c8      	movs	r1, #200	; 0xc8
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffb4 	bl	8001016 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(hi2c, 0x00); //---set low column address
 80010ae:	2100      	movs	r1, #0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffb0 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x10); //---set high column address
 80010b6:	2110      	movs	r1, #16
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ffac 	bl	8001016 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0x40); //--set start line address - CHECK
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffa8 	bl	8001016 <ssd1306_WriteCommand>

    ssd1306_SetContrast(hi2c, 0xFF);
 80010c6:	21ff      	movs	r1, #255	; 0xff
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fa22 	bl	8001512 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(hi2c, 0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(hi2c, 0xA1); //--set segment re-map 0 to 127 - CHECK
 80010ce:	21a1      	movs	r1, #161	; 0xa1
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ffa0 	bl	8001016 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(hi2c, 0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(hi2c, 0xA6); //--set normal color
 80010d6:	21a6      	movs	r1, #166	; 0xa6
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff9c 	bl	8001016 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(hi2c, 0xFF);
#else
    ssd1306_WriteCommand(hi2c, 0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80010de:	21a8      	movs	r1, #168	; 0xa8
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff98 	bl	8001016 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(hi2c, 0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(hi2c, 0x3F); //
 80010e6:	213f      	movs	r1, #63	; 0x3f
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff94 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(hi2c, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010ee:	21a4      	movs	r1, #164	; 0xa4
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff90 	bl	8001016 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0xD3); //-set display offset - CHECK
 80010f6:	21d3      	movs	r1, #211	; 0xd3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff8c 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x00); //-not offset
 80010fe:	2100      	movs	r1, #0
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff88 	bl	8001016 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0xD5); //--set display clock divide ratio/oscillator frequency
 8001106:	21d5      	movs	r1, #213	; 0xd5
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff84 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0xF0); //--set divide ratio
 800110e:	21f0      	movs	r1, #240	; 0xf0
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff80 	bl	8001016 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0xD9); //--set pre-charge period
 8001116:	21d9      	movs	r1, #217	; 0xd9
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff7c 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x22); //
 800111e:	2122      	movs	r1, #34	; 0x22
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff78 	bl	8001016 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0xDA); //--set com pins hardware configuration - CHECK
 8001126:	21da      	movs	r1, #218	; 0xda
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff74 	bl	8001016 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(hi2c, 0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(hi2c, 0x12);
 800112e:	2112      	movs	r1, #18
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff70 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(hi2c, 0xDB); //--set vcomh
 8001136:	21db      	movs	r1, #219	; 0xdb
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff6c 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x20); //0x20,0.77xVcc
 800113e:	2120      	movs	r1, #32
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff68 	bl	8001016 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(hi2c, 0x8D); //--set DC-DC enable
 8001146:	218d      	movs	r1, #141	; 0x8d
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff64 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, 0x14); //
 800114e:	2114      	movs	r1, #20
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff60 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(hi2c, 1); //--turn on SSD1306 panel
 8001156:	2101      	movs	r1, #1
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f9f1 	bl	8001540 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f812 	bl	8001188 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f833 	bl	80011d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <ssd1306_Init+0x110>)
 800116c:	2200      	movs	r2, #0
 800116e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <ssd1306_Init+0x110>)
 8001172:	2200      	movs	r2, #0
 8001174:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001176:	4b03      	ldr	r3, [pc, #12]	; (8001184 <ssd1306_Init+0x110>)
 8001178:	2201      	movs	r2, #1
 800117a:	711a      	strb	r2, [r3, #4]
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000060c 	.word	0x2000060c

08001188 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	e00d      	b.n	80011b4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <ssd1306_Fill+0x1a>
 800119e:	2100      	movs	r1, #0
 80011a0:	e000      	b.n	80011a4 <ssd1306_Fill+0x1c>
 80011a2:	21ff      	movs	r1, #255	; 0xff
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <ssd1306_Fill+0x44>)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	460a      	mov	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3301      	adds	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ba:	d3ed      	bcc.n	8001198 <ssd1306_Fill+0x10>
    }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000020c 	.word	0x2000020c

080011d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e01a      	b.n	8001214 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(hi2c, 0xB0 + i); // Set the current RAM page address.
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3b50      	subs	r3, #80	; 0x50
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4619      	mov	r1, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff15 	bl	8001016 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00 + SSD1306_X_OFFSET_LOWER);
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff11 	bl	8001016 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10 + SSD1306_X_OFFSET_UPPER);
 80011f4:	2110      	movs	r1, #16
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff0d 	bl	8001016 <ssd1306_WriteCommand>
        ssd1306_WriteData(hi2c, &SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	01db      	lsls	r3, r3, #7
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <ssd1306_UpdateScreen+0x54>)
 8001202:	4413      	add	r3, r2
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	4619      	mov	r1, r3
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff1b 	bl	8001044 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	3301      	adds	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b07      	cmp	r3, #7
 8001218:	d9e1      	bls.n	80011de <ssd1306_UpdateScreen+0xe>
    }
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000020c 	.word	0x2000020c

08001228 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	460b      	mov	r3, r1
 8001234:	71bb      	strb	r3, [r7, #6]
 8001236:	4613      	mov	r3, r2
 8001238:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db3d      	blt.n	80012be <ssd1306_DrawPixel+0x96>
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	2b3f      	cmp	r3, #63	; 0x3f
 8001246:	d83a      	bhi.n	80012be <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001248:	797b      	ldrb	r3, [r7, #5]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d11a      	bne.n	8001284 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	08db      	lsrs	r3, r3, #3
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	4603      	mov	r3, r0
 8001258:	01db      	lsls	r3, r3, #7
 800125a:	4413      	add	r3, r2
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <ssd1306_DrawPixel+0xa4>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	b25a      	sxtb	r2, r3
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b259      	sxtb	r1, r3
 8001274:	79fa      	ldrb	r2, [r7, #7]
 8001276:	4603      	mov	r3, r0
 8001278:	01db      	lsls	r3, r3, #7
 800127a:	4413      	add	r3, r2
 800127c:	b2c9      	uxtb	r1, r1
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <ssd1306_DrawPixel+0xa4>)
 8001280:	54d1      	strb	r1, [r2, r3]
 8001282:	e01d      	b.n	80012c0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	b2d8      	uxtb	r0, r3
 800128c:	4603      	mov	r3, r0
 800128e:	01db      	lsls	r3, r3, #7
 8001290:	4413      	add	r3, r2
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <ssd1306_DrawPixel+0xa4>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	b25a      	sxtb	r2, r3
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	4013      	ands	r3, r2
 80012ac:	b259      	sxtb	r1, r3
 80012ae:	79fa      	ldrb	r2, [r7, #7]
 80012b0:	4603      	mov	r3, r0
 80012b2:	01db      	lsls	r3, r3, #7
 80012b4:	4413      	add	r3, r2
 80012b6:	b2c9      	uxtb	r1, r1
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <ssd1306_DrawPixel+0xa4>)
 80012ba:	54d1      	strb	r1, [r2, r3]
 80012bc:	e000      	b.n	80012c0 <ssd1306_DrawPixel+0x98>
        return;
 80012be:	bf00      	nop
    }
}
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000020c 	.word	0x2000020c

080012d0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4604      	mov	r4, r0
 80012d8:	1d38      	adds	r0, r7, #4
 80012da:	e880 0006 	stmia.w	r0, {r1, r2}
 80012de:	461a      	mov	r2, r3
 80012e0:	4623      	mov	r3, r4
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	4613      	mov	r3, r2
 80012e6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	2b1f      	cmp	r3, #31
 80012ec:	d902      	bls.n	80012f4 <ssd1306_WriteChar+0x24>
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2b7e      	cmp	r3, #126	; 0x7e
 80012f2:	d901      	bls.n	80012f8 <ssd1306_WriteChar+0x28>
        return 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e06d      	b.n	80013d4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80012f8:	4b38      	ldr	r3, [pc, #224]	; (80013dc <ssd1306_WriteChar+0x10c>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	793b      	ldrb	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	2b80      	cmp	r3, #128	; 0x80
 8001304:	dc06      	bgt.n	8001314 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <ssd1306_WriteChar+0x10c>)
 8001308:	885b      	ldrh	r3, [r3, #2]
 800130a:	461a      	mov	r2, r3
 800130c:	797b      	ldrb	r3, [r7, #5]
 800130e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001310:	2b40      	cmp	r3, #64	; 0x40
 8001312:	dd01      	ble.n	8001318 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001314:	2300      	movs	r3, #0
 8001316:	e05d      	b.n	80013d4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	e04c      	b.n	80013b8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	3b20      	subs	r3, #32
 8001324:	7979      	ldrb	r1, [r7, #5]
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	4619      	mov	r1, r3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	440b      	add	r3, r1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	e034      	b.n	80013a8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d012      	beq.n	8001374 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <ssd1306_WriteChar+0x10c>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4413      	add	r3, r2
 800135a:	b2d8      	uxtb	r0, r3
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <ssd1306_WriteChar+0x10c>)
 800135e:	885b      	ldrh	r3, [r3, #2]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	7bba      	ldrb	r2, [r7, #14]
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff ff5b 	bl	8001228 <ssd1306_DrawPixel>
 8001372:	e016      	b.n	80013a2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <ssd1306_WriteChar+0x10c>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <ssd1306_WriteChar+0x10c>)
 8001384:	885b      	ldrh	r3, [r3, #2]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4413      	add	r3, r2
 800138e:	b2d9      	uxtb	r1, r3
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	2b00      	cmp	r3, #0
 8001394:	bf0c      	ite	eq
 8001396:	2301      	moveq	r3, #1
 8001398:	2300      	movne	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	f7ff ff43 	bl	8001228 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	793b      	ldrb	r3, [r7, #4]
 80013aa:	461a      	mov	r2, r3
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d3c5      	bcc.n	800133e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	461a      	mov	r2, r3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	4293      	cmp	r3, r2
 80013c0:	d3ad      	bcc.n	800131e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <ssd1306_WriteChar+0x10c>)
 80013c4:	881a      	ldrh	r2, [r3, #0]
 80013c6:	793b      	ldrb	r3, [r7, #4]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b03      	ldr	r3, [pc, #12]	; (80013dc <ssd1306_WriteChar+0x10c>)
 80013d0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3724      	adds	r7, #36	; 0x24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	2000060c 	.word	0x2000060c

080013e0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	1d38      	adds	r0, r7, #4
 80013ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80013ee:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80013f0:	e012      	b.n	8001418 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	7818      	ldrb	r0, [r3, #0]
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	1d3a      	adds	r2, r7, #4
 80013fa:	ca06      	ldmia	r2, {r1, r2}
 80013fc:	f7ff ff68 	bl	80012d0 <ssd1306_WriteChar>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d002      	beq.n	8001412 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	e008      	b.n	8001424 <ssd1306_WriteString+0x44>
        }
        str++;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3301      	adds	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e8      	bne.n	80013f2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	781b      	ldrb	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	460a      	mov	r2, r1
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	4613      	mov	r3, r2
 800143a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	b29a      	uxth	r2, r3
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <ssd1306_SetCursor+0x2c>)
 8001442:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001444:	79bb      	ldrb	r3, [r7, #6]
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <ssd1306_SetCursor+0x2c>)
 800144a:	805a      	strh	r2, [r3, #2]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	2000060c 	.word	0x2000060c

0800145c <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	603a      	str	r2, [r7, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	460b      	mov	r3, r1
 800146c:	71bb      	strb	r3, [r7, #6]
 800146e:	4613      	mov	r3, r2
 8001470:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001472:	797b      	ldrb	r3, [r7, #5]
 8001474:	3307      	adds	r3, #7
 8001476:	2b00      	cmp	r3, #0
 8001478:	da00      	bge.n	800147c <ssd1306_DrawBitmap+0x20>
 800147a:	3307      	adds	r3, #7
 800147c:	10db      	asrs	r3, r3, #3
 800147e:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db3e      	blt.n	800150a <ssd1306_DrawBitmap+0xae>
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b3f      	cmp	r3, #63	; 0x3f
 8001490:	d83b      	bhi.n	800150a <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001492:	2300      	movs	r3, #0
 8001494:	73bb      	strb	r3, [r7, #14]
 8001496:	e033      	b.n	8001500 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	737b      	strb	r3, [r7, #13]
 800149c:	e026      	b.n	80014ec <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800149e:	7b7b      	ldrb	r3, [r7, #13]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e00d      	b.n	80014cc <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80014b6:	fb02 f303 	mul.w	r3, r2, r3
 80014ba:	7b7a      	ldrb	r2, [r7, #13]
 80014bc:	08d2      	lsrs	r2, r2, #3
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	4413      	add	r3, r2
 80014c2:	461a      	mov	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da08      	bge.n	80014e6 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80014d4:	79fa      	ldrb	r2, [r7, #7]
 80014d6:	7b7b      	ldrb	r3, [r7, #13]
 80014d8:	4413      	add	r3, r2
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	7f3a      	ldrb	r2, [r7, #28]
 80014de:	79b9      	ldrb	r1, [r7, #6]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fea1 	bl	8001228 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80014e6:	7b7b      	ldrb	r3, [r7, #13]
 80014e8:	3301      	adds	r3, #1
 80014ea:	737b      	strb	r3, [r7, #13]
 80014ec:	7b7a      	ldrb	r2, [r7, #13]
 80014ee:	797b      	ldrb	r3, [r7, #5]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3d4      	bcc.n	800149e <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80014f4:	7bbb      	ldrb	r3, [r7, #14]
 80014f6:	3301      	adds	r3, #1
 80014f8:	73bb      	strb	r3, [r7, #14]
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	3301      	adds	r3, #1
 80014fe:	71bb      	strb	r3, [r7, #6]
 8001500:	7bba      	ldrb	r2, [r7, #14]
 8001502:	7e3b      	ldrb	r3, [r7, #24]
 8001504:	429a      	cmp	r2, r3
 8001506:	d3c7      	bcc.n	8001498 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001508:	e000      	b.n	800150c <ssd1306_DrawBitmap+0xb0>
        return;
 800150a:	bf00      	nop
}
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <ssd1306_SetContrast>:

void ssd1306_SetContrast(I2C_HandleTypeDef *hi2c, const uint8_t value) {
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	70fb      	strb	r3, [r7, #3]
    const uint8_t kSetContrastControlRegister = 0x81;
 800151e:	2381      	movs	r3, #129	; 0x81
 8001520:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(hi2c, kSetContrastControlRegister);
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fd75 	bl	8001016 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(hi2c, value);
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	4619      	mov	r1, r3
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fd70 	bl	8001016 <ssd1306_WriteCommand>
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(I2C_HandleTypeDef *hi2c, const uint8_t on) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    if (on) {
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <ssd1306_SetDisplayOn+0x1e>
        value = 0xAF;   // Display on
 8001552:	23af      	movs	r3, #175	; 0xaf
 8001554:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <ssd1306_SetDisplayOn+0x3c>)
 8001558:	2201      	movs	r2, #1
 800155a:	715a      	strb	r2, [r3, #5]
 800155c:	e004      	b.n	8001568 <ssd1306_SetDisplayOn+0x28>
    } else {
        value = 0xAE;   // Display off
 800155e:	23ae      	movs	r3, #174	; 0xae
 8001560:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <ssd1306_SetDisplayOn+0x3c>)
 8001564:	2200      	movs	r2, #0
 8001566:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(hi2c, value);
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	4619      	mov	r1, r3
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fd52 	bl	8001016 <ssd1306_WriteCommand>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000060c 	.word	0x2000060c

08001580 <ssd1306_wait>:
	HAL_Delay(3000);
	ssd1306_TestDrawBitmap(hi2c);
	HAL_Delay(3000);
}

void ssd1306_wait(I2C_HandleTypeDef *hi2c) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af02      	add	r7, sp, #8
 8001586:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff fdfd 	bl	8001188 <ssd1306_Fill>
	ssd1306_DrawBitmap(32, 0, github_logo_64x64, 64, 64, White);
 800158e:	2301      	movs	r3, #1
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	2340      	movs	r3, #64	; 0x40
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <ssd1306_wait+0x30>)
 800159a:	2100      	movs	r1, #0
 800159c:	2020      	movs	r0, #32
 800159e:	f7ff ff5d 	bl	800145c <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(hi2c);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fe14 	bl	80011d0 <ssd1306_UpdateScreen>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	0800de54 	.word	0x0800de54

080015b4 <ssd1306_info>:

void ssd1306_info(I2C_HandleTypeDef *hi2c, int acc_x, int acc_y, int acc_z, int gyz_x, int gyz_y, int gyz_z, float tem, float gas) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0a0      	sub	sp, #128	; 0x80
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	6178      	str	r0, [r7, #20]
 80015bc:	6139      	str	r1, [r7, #16]
 80015be:	60fa      	str	r2, [r7, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80015c6:	edc7 0a00 	vstr	s1, [r7]
	char line1[24], line2[24], line3[24], line4[24];

	sprintf(line1, "X:%4d Y:%4d Z:%4d", acc_x, acc_y, acc_z);
 80015ca:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	493b      	ldr	r1, [pc, #236]	; (80016c4 <ssd1306_info+0x110>)
 80015d8:	f007 ff3a 	bl	8009450 <siprintf>
	sprintf(line2, "X:%4d Y:%4d Z:%4d", gyz_x, gyz_y, gyz_z);
 80015dc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80015e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80015ee:	4935      	ldr	r1, [pc, #212]	; (80016c4 <ssd1306_info+0x110>)
 80015f0:	f007 ff2e 	bl	8009450 <siprintf>
	sprintf(line3, "tem:%3.3f", tem);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7fe ffaf 	bl	8000558 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001602:	4931      	ldr	r1, [pc, #196]	; (80016c8 <ssd1306_info+0x114>)
 8001604:	f007 ff24 	bl	8009450 <siprintf>
	sprintf(line4, "gas:%4.3f", gas);
 8001608:	6838      	ldr	r0, [r7, #0]
 800160a:	f7fe ffa5 	bl	8000558 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	f107 0018 	add.w	r0, r7, #24
 8001616:	492d      	ldr	r1, [pc, #180]	; (80016cc <ssd1306_info+0x118>)
 8001618:	f007 ff1a 	bl	8009450 <siprintf>
	ssd1306_Fill(White);
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fdb3 	bl	8001188 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8001622:	2100      	movs	r1, #0
 8001624:	2002      	movs	r0, #2
 8001626:	f7ff ff01 	bl	800142c <ssd1306_SetCursor>
	ssd1306_WriteString("acceleration", Font_6x8, Black);
 800162a:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <ssd1306_info+0x11c>)
 800162c:	2300      	movs	r3, #0
 800162e:	ca06      	ldmia	r2, {r1, r2}
 8001630:	4828      	ldr	r0, [pc, #160]	; (80016d4 <ssd1306_info+0x120>)
 8001632:	f7ff fed5 	bl	80013e0 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 9);
 8001636:	2109      	movs	r1, #9
 8001638:	2002      	movs	r0, #2
 800163a:	f7ff fef7 	bl	800142c <ssd1306_SetCursor>
	ssd1306_WriteString(line1, Font_6x8, Black);
 800163e:	4a24      	ldr	r2, [pc, #144]	; (80016d0 <ssd1306_info+0x11c>)
 8001640:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001644:	2300      	movs	r3, #0
 8001646:	ca06      	ldmia	r2, {r1, r2}
 8001648:	f7ff feca 	bl	80013e0 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 18);
 800164c:	2112      	movs	r1, #18
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff feec 	bl	800142c <ssd1306_SetCursor>
	ssd1306_WriteString("gyroscope", Font_6x8, Black);
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <ssd1306_info+0x11c>)
 8001656:	2300      	movs	r3, #0
 8001658:	ca06      	ldmia	r2, {r1, r2}
 800165a:	481f      	ldr	r0, [pc, #124]	; (80016d8 <ssd1306_info+0x124>)
 800165c:	f7ff fec0 	bl	80013e0 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 27);
 8001660:	211b      	movs	r1, #27
 8001662:	2002      	movs	r0, #2
 8001664:	f7ff fee2 	bl	800142c <ssd1306_SetCursor>
	ssd1306_WriteString(line2, Font_6x8, Black);
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <ssd1306_info+0x11c>)
 800166a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800166e:	2300      	movs	r3, #0
 8001670:	ca06      	ldmia	r2, {r1, r2}
 8001672:	f7ff feb5 	bl	80013e0 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 36);
 8001676:	2124      	movs	r1, #36	; 0x24
 8001678:	2002      	movs	r0, #2
 800167a:	f7ff fed7 	bl	800142c <ssd1306_SetCursor>
	ssd1306_WriteString("orther", Font_6x8, Black);
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <ssd1306_info+0x11c>)
 8001680:	2300      	movs	r3, #0
 8001682:	ca06      	ldmia	r2, {r1, r2}
 8001684:	4815      	ldr	r0, [pc, #84]	; (80016dc <ssd1306_info+0x128>)
 8001686:	f7ff feab 	bl	80013e0 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 45);
 800168a:	212d      	movs	r1, #45	; 0x2d
 800168c:	2002      	movs	r0, #2
 800168e:	f7ff fecd 	bl	800142c <ssd1306_SetCursor>
	ssd1306_WriteString(line3, Font_6x8, Black);
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <ssd1306_info+0x11c>)
 8001694:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001698:	2300      	movs	r3, #0
 800169a:	ca06      	ldmia	r2, {r1, r2}
 800169c:	f7ff fea0 	bl	80013e0 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 54);
 80016a0:	2136      	movs	r1, #54	; 0x36
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff fec2 	bl	800142c <ssd1306_SetCursor>
	ssd1306_WriteString(line4, Font_6x8, Black);
 80016a8:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <ssd1306_info+0x11c>)
 80016aa:	f107 0018 	add.w	r0, r7, #24
 80016ae:	2300      	movs	r3, #0
 80016b0:	ca06      	ldmia	r2, {r1, r2}
 80016b2:	f7ff fe95 	bl	80013e0 <ssd1306_WriteString>
	ssd1306_UpdateScreen(hi2c);
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff fd8a 	bl	80011d0 <ssd1306_UpdateScreen>
}
 80016bc:	bf00      	nop
 80016be:	3778      	adds	r7, #120	; 0x78
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	0800d708 	.word	0x0800d708
 80016c8:	0800d71c 	.word	0x0800d71c
 80016cc:	0800d728 	.word	0x0800d728
 80016d0:	20000000 	.word	0x20000000
 80016d4:	0800d734 	.word	0x0800d734
 80016d8:	0800d744 	.word	0x0800d744
 80016dc:	0800d750 	.word	0x0800d750

080016e0 <W25Q32_Init>:
GPIO_TypeDef *CS_PORT;
uint16_t CS_Pin;
SPI_HandleTypeDef *hspi;
uint8_t dum_byte = 0xff;

void W25Q32_Init(SPI_HandleTypeDef *hspix, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
	hspi = hspix;
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <W25Q32_Init+0x2c>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6013      	str	r3, [r2, #0]
	CS_PORT = GPIOx;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <W25Q32_Init+0x30>)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	6013      	str	r3, [r2, #0]
	CS_Pin = GPIO_Pin;
 80016fa:	4a06      	ldr	r2, [pc, #24]	; (8001714 <W25Q32_Init+0x34>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	8013      	strh	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	2000061c 	.word	0x2000061c
 8001710:	20000614 	.word	0x20000614
 8001714:	20000618 	.word	0x20000618

08001718 <W25Q32_CS_LOW>:

void W25Q32_CS_LOW() {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_Pin, 0);
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <W25Q32_CS_LOW+0x18>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <W25Q32_CS_LOW+0x1c>)
 8001722:	8811      	ldrh	r1, [r2, #0]
 8001724:	2200      	movs	r2, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fc56 	bl	8002fd8 <HAL_GPIO_WritePin>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000614 	.word	0x20000614
 8001734:	20000618 	.word	0x20000618

08001738 <W25Q32_CS_HIGH>:

void W25Q32_CS_HIGH() {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_Pin, 1);
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <W25Q32_CS_HIGH+0x18>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <W25Q32_CS_HIGH+0x1c>)
 8001742:	8811      	ldrh	r1, [r2, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fc46 	bl	8002fd8 <HAL_GPIO_WritePin>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000614 	.word	0x20000614
 8001754:	20000618 	.word	0x20000618

08001758 <WriteEnable>:

void WriteEnable() {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	uint8_t *tsm = malloc(sizeof(uint8_t));
 800175e:	2001      	movs	r0, #1
 8001760:	f006 fec6 	bl	80084f0 <malloc>
 8001764:	4603      	mov	r3, r0
 8001766:	607b      	str	r3, [r7, #4]
	uint8_t *rev = malloc(sizeof(uint8_t));
 8001768:	2001      	movs	r0, #1
 800176a:	f006 fec1 	bl	80084f0 <malloc>
 800176e:	4603      	mov	r3, r0
 8001770:	603b      	str	r3, [r7, #0]
	tsm[0] = WRITE_EN;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2206      	movs	r2, #6
 8001776:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 8001778:	f7ff ffce 	bl	8001718 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tsm, rev, 1);
 800177c:	2201      	movs	r2, #1
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f867 	bl	8001854 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 8001786:	f7ff ffd7 	bl	8001738 <W25Q32_CS_HIGH>

	free(tsm);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f006 feb8 	bl	8008500 <free>
	free(rev);
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f006 feb5 	bl	8008500 <free>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <WriteDisable>:

void WriteDisable() {
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
	uint8_t *tsm = (uint8_t*) malloc(sizeof(uint8_t));
 80017a4:	2001      	movs	r0, #1
 80017a6:	f006 fea3 	bl	80084f0 <malloc>
 80017aa:	4603      	mov	r3, r0
 80017ac:	607b      	str	r3, [r7, #4]
	uint8_t *rev = (uint8_t*) malloc(sizeof(uint8_t));
 80017ae:	2001      	movs	r0, #1
 80017b0:	f006 fe9e 	bl	80084f0 <malloc>
 80017b4:	4603      	mov	r3, r0
 80017b6:	603b      	str	r3, [r7, #0]
	tsm[0] = WRITE_DIS;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2204      	movs	r2, #4
 80017bc:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 80017be:	f7ff ffab 	bl	8001718 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tsm, rev, 1);
 80017c2:	2201      	movs	r2, #1
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f844 	bl	8001854 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80017cc:	f7ff ffb4 	bl	8001738 <W25Q32_CS_HIGH>

	free(tsm);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f006 fe95 	bl	8008500 <free>
	free(rev);
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f006 fe92 	bl	8008500 <free>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <W25Q32_WaitEndCycle>:

void W25Q32_WaitEndCycle() {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
	W25Q32_CS_LOW();
 80017ea:	f7ff ff95 	bl	8001718 <W25Q32_CS_LOW>
	uint8_t check;
	uint8_t *tx = (uint8_t*) malloc(sizeof(uint8_t));
 80017ee:	2001      	movs	r0, #1
 80017f0:	f006 fe7e 	bl	80084f0 <malloc>
 80017f4:	4603      	mov	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]
	uint8_t *rx = (uint8_t*) malloc(sizeof(uint8_t));
 80017f8:	2001      	movs	r0, #1
 80017fa:	f006 fe79 	bl	80084f0 <malloc>
 80017fe:	4603      	mov	r3, r0
 8001800:	60bb      	str	r3, [r7, #8]
	*tx = RDSR1;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2205      	movs	r2, #5
 8001806:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 8001808:	f7ff ff86 	bl	8001718 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tx, rx, 1);
 800180c:	2201      	movs	r2, #1
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f81f 	bl	8001854 <W25Q32_Send_Receive>
	do {
		*tx = dum_byte;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <W25Q32_WaitEndCycle+0x6c>)
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	701a      	strb	r2, [r3, #0]
		W25Q32_Send_Receive(tx, rx, 1);
 800181e:	2201      	movs	r2, #1
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f816 	bl	8001854 <W25Q32_Send_Receive>
		check = *rx;
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	71fb      	strb	r3, [r7, #7]
	} while (check & 0x01);
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ee      	bne.n	8001816 <W25Q32_WaitEndCycle+0x32>
	W25Q32_CS_HIGH();
 8001838:	f7ff ff7e 	bl	8001738 <W25Q32_CS_HIGH>
	free(tx);
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f006 fe5f 	bl	8008500 <free>
	free(rx);
 8001842:	68b8      	ldr	r0, [r7, #8]
 8001844:	f006 fe5c 	bl	8008500 <free>
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000008 	.word	0x20000008

08001854 <W25Q32_Send_Receive>:

void W25Q32_Send_Receive(uint8_t *tx_buf, uint8_t *rx_buf, uint16_t tx_num) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	4613      	mov	r3, r2
 8001860:	80fb      	strh	r3, [r7, #6]
	rx_spi_flg = 0;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <W25Q32_Send_Receive+0x3c>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive_IT(hspi, tx_buf, rx_buf, tx_num);
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <W25Q32_Send_Receive+0x40>)
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	f002 fd09 	bl	8004288 <HAL_SPI_TransmitReceive_IT>
	while (!rx_spi_flg) {
 8001876:	bf00      	nop
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <W25Q32_Send_Receive+0x3c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f083 0301 	eor.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f8      	bne.n	8001878 <W25Q32_Send_Receive+0x24>
	}
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20001248 	.word	0x20001248
 8001894:	2000061c 	.word	0x2000061c

08001898 <W25Q32_ReadData>:

void W25Q32_ReadData(uint8_t *pBuffer, uint32_t ReadAddr, uint16_t len) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80fb      	strh	r3, [r7, #6]
	W25Q32_CS_LOW();
 80018a6:	f7ff ff37 	bl	8001718 <W25Q32_CS_LOW>

	uint8_t *cmd = malloc(sizeof(uint8_t) * (4 + len));
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	3304      	adds	r3, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f006 fe1e 	bl	80084f0 <malloc>
 80018b4:	4603      	mov	r3, r0
 80018b6:	617b      	str	r3, [r7, #20]
	uint8_t *ret = malloc(sizeof(uint8_t) * len);
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 fe18 	bl	80084f0 <malloc>
 80018c0:	4603      	mov	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]
	cmd[0] = READ_DATA;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2203      	movs	r2, #3
 80018c8:	701a      	strb	r2, [r3, #0]
	cmd[1] = (ReadAddr & 0x00FF0000) >> 16;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	0c1a      	lsrs	r2, r3, #16
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
	cmd[2] = (ReadAddr & 0x0000FF00) >> 8;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	0a1a      	lsrs	r2, r3, #8
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3302      	adds	r3, #2
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
	cmd[3] = ReadAddr & 0x000000FF;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3303      	adds	r3, #3
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	701a      	strb	r2, [r3, #0]
	W25Q32_Send_Receive(cmd, ret, 4);
 80018ec:	2204      	movs	r2, #4
 80018ee:	6939      	ldr	r1, [r7, #16]
 80018f0:	6978      	ldr	r0, [r7, #20]
 80018f2:	f7ff ffaf 	bl	8001854 <W25Q32_Send_Receive>
	W25Q32_Send_Receive(cmd + 4, pBuffer , len);
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3304      	adds	r3, #4
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ffa8 	bl	8001854 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 8001904:	f7ff ff18 	bl	8001738 <W25Q32_CS_HIGH>
	free(cmd);
 8001908:	6978      	ldr	r0, [r7, #20]
 800190a:	f006 fdf9 	bl	8008500 <free>
	free(ret);
 800190e:	6938      	ldr	r0, [r7, #16]
 8001910:	f006 fdf6 	bl	8008500 <free>
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <W25Q32_WriteData>:

void W25Q32_WriteData(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t len) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = malloc(sizeof(uint8_t) * (4 + len));
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	3304      	adds	r3, #4
 800192e:	4618      	mov	r0, r3
 8001930:	f006 fdde 	bl	80084f0 <malloc>
 8001934:	4603      	mov	r3, r0
 8001936:	61bb      	str	r3, [r7, #24]
	uint8_t *data = malloc(sizeof(uint8_t) * len);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4618      	mov	r0, r3
 800193c:	f006 fdd8 	bl	80084f0 <malloc>
 8001940:	4603      	mov	r3, r0
 8001942:	617b      	str	r3, [r7, #20]
	uint8_t *ret = malloc(sizeof(uint8_t) * len);
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	4618      	mov	r0, r3
 8001948:	f006 fdd2 	bl	80084f0 <malloc>
 800194c:	4603      	mov	r3, r0
 800194e:	613b      	str	r3, [r7, #16]

	WriteEnable();
 8001950:	f7ff ff02 	bl	8001758 <WriteEnable>
	W25Q32_CS_LOW();
 8001954:	f7ff fee0 	bl	8001718 <W25Q32_CS_LOW>
	cmd[0] = PAGE_PROGRAM;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2202      	movs	r2, #2
 800195c:	701a      	strb	r2, [r3, #0]
	cmd[1] = (WriteAddr & 0x00FF0000) >> 16;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	0c1a      	lsrs	r2, r3, #16
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	3301      	adds	r3, #1
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]
	cmd[2] = (WriteAddr & 0x0000FF00) >> 8;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0a1a      	lsrs	r2, r3, #8
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	3302      	adds	r3, #2
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]
	cmd[3] = WriteAddr & 0x000000FF;
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	3303      	adds	r3, #3
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	701a      	strb	r2, [r3, #0]
	W25Q32_Send_Receive(cmd, data, 4);
 8001980:	2204      	movs	r2, #4
 8001982:	6979      	ldr	r1, [r7, #20]
 8001984:	69b8      	ldr	r0, [r7, #24]
 8001986:	f7ff ff65 	bl	8001854 <W25Q32_Send_Receive>
	for (uint8_t i = 0; i < len; i++) {
 800198a:	2300      	movs	r3, #0
 800198c:	77fb      	strb	r3, [r7, #31]
 800198e:	e00a      	b.n	80019a6 <W25Q32_WriteData+0x8a>
		*(data + i) = *(pBuffer + i);
 8001990:	7ffb      	ldrb	r3, [r7, #31]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	441a      	add	r2, r3
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	6979      	ldr	r1, [r7, #20]
 800199a:	440b      	add	r3, r1
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 80019a0:	7ffb      	ldrb	r3, [r7, #31]
 80019a2:	3301      	adds	r3, #1
 80019a4:	77fb      	strb	r3, [r7, #31]
 80019a6:	7ffb      	ldrb	r3, [r7, #31]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8ef      	bhi.n	8001990 <W25Q32_WriteData+0x74>
	}
	W25Q32_Send_Receive(data, ret, len);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	461a      	mov	r2, r3
 80019b4:	6939      	ldr	r1, [r7, #16]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff4c 	bl	8001854 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80019bc:	f7ff febc 	bl	8001738 <W25Q32_CS_HIGH>
	W25Q32_WaitEndCycle();
 80019c0:	f7ff ff10 	bl	80017e4 <W25Q32_WaitEndCycle>
	WriteDisable();
 80019c4:	f7ff feeb 	bl	800179e <WriteDisable>
	free(cmd);
 80019c8:	69b8      	ldr	r0, [r7, #24]
 80019ca:	f006 fd99 	bl	8008500 <free>
	free(data);
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f006 fd96 	bl	8008500 <free>
}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <W25Q32_erase4k>:

void W25Q32_erase4k(uint32_t add) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	uint8_t *cmd = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 80019e4:	2004      	movs	r0, #4
 80019e6:	f006 fd83 	bl	80084f0 <malloc>
 80019ea:	4603      	mov	r3, r0
 80019ec:	60fb      	str	r3, [r7, #12]
	uint8_t *ret = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 80019ee:	2004      	movs	r0, #4
 80019f0:	f006 fd7e 	bl	80084f0 <malloc>
 80019f4:	4603      	mov	r3, r0
 80019f6:	60bb      	str	r3, [r7, #8]
	cmd[0] = ERASE_SECTOR;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2220      	movs	r2, #32
 80019fc:	701a      	strb	r2, [r3, #0]
	cmd[1] = (add & 0x00FF0000) >> 16;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0c1a      	lsrs	r2, r3, #16
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3301      	adds	r3, #1
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
	cmd[2] = (add & 0x0000FF00) >> 8;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0a1a      	lsrs	r2, r3, #8
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3302      	adds	r3, #2
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]
	cmd[3] = add & 0x0000000FF;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3303      	adds	r3, #3
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]

	WriteEnable();
 8001a20:	f7ff fe9a 	bl	8001758 <WriteEnable>
	W25Q32_CS_LOW();
 8001a24:	f7ff fe78 	bl	8001718 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(cmd, ret, 4);
 8001a28:	2204      	movs	r2, #4
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff ff11 	bl	8001854 <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 8001a32:	f7ff fe81 	bl	8001738 <W25Q32_CS_HIGH>
	W25Q32_WaitEndCycle();
 8001a36:	f7ff fed5 	bl	80017e4 <W25Q32_WaitEndCycle>
	WriteDisable();
 8001a3a:	f7ff feb0 	bl	800179e <WriteDisable>
	free(cmd);
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f006 fd5e 	bl	8008500 <free>
	free(ret);
 8001a44:	68b8      	ldr	r0, [r7, #8]
 8001a46:	f006 fd5b 	bl	8008500 <free>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <vApplicationGetIdleTaskMemory+0x30>)
 8001a6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000620 	.word	0x20000620
 8001a84:	20000674 	.word	0x20000674

08001a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8e:	f000 fee5 	bl	800285c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a92:	f000 f889 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a96:	f000 f9c1 	bl	8001e1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a9a:	f000 f8e3 	bl	8001c64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001a9e:	f000 f993 	bl	8001dc8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001aa2:	f000 f943 	bl	8001d2c <MX_TIM3_Init>
  MX_SPI1_Init();
 8001aa6:	f000 f90b 	bl	8001cc0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	  ssd1306_Init(&hi2c1);
 8001aaa:	482f      	ldr	r0, [pc, #188]	; (8001b68 <main+0xe0>)
 8001aac:	f7ff fae2 	bl	8001074 <ssd1306_Init>
	  W25Q32_Init(&hspi1, GPIOA, GPIO_PIN_3);
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	492e      	ldr	r1, [pc, #184]	; (8001b6c <main+0xe4>)
 8001ab4:	482e      	ldr	r0, [pc, #184]	; (8001b70 <main+0xe8>)
 8001ab6:	f7ff fe13 	bl	80016e0 <W25Q32_Init>
//	  sssd1306_temgas(&hi2c1, 1203, 2230, 312, 1243, 2342, 182, 30.023, 980.322);
	  HAL_UART_Receive_IT(&huart1, &uart_chr, sizeof(uart_chr));
 8001aba:	2201      	movs	r2, #1
 8001abc:	492d      	ldr	r1, [pc, #180]	; (8001b74 <main+0xec>)
 8001abe:	482e      	ldr	r0, [pc, #184]	; (8001b78 <main+0xf0>)
 8001ac0:	f003 fb1b 	bl	80050fa <HAL_UART_Receive_IT>
	  ssd1306_wait(&hi2c1);
 8001ac4:	4828      	ldr	r0, [pc, #160]	; (8001b68 <main+0xe0>)
 8001ac6:	f7ff fd5b 	bl	8001580 <ssd1306_wait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <main+0xf4>)
 8001acc:	1d3c      	adds	r4, r7, #4
 8001ace:	461d      	mov	r5, r3
 8001ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ad8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 fac2 	bl	800606a <osThreadCreate>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <main+0xf8>)
 8001aea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  	uart_queue = xQueueCreate(1, sizeof(uint8_t));
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	2001      	movs	r0, #1
 8001af2:	f004 fc37 	bl	8006364 <xQueueGenericCreate>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <main+0xfc>)
 8001afa:	6013      	str	r3, [r2, #0]
  	w25qxx_queue = xQueueCreate(1, sizeof(uint8_t));
 8001afc:	2200      	movs	r2, #0
 8001afe:	2101      	movs	r1, #1
 8001b00:	2001      	movs	r0, #1
 8001b02:	f004 fc2f 	bl	8006364 <xQueueGenericCreate>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <main+0x100>)
 8001b0a:	6013      	str	r3, [r2, #0]
  	mutex1 = xSemaphoreCreateMutex();
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f004 fc9c 	bl	800644a <xQueueCreateMutex>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <main+0x104>)
 8001b16:	6013      	str	r3, [r2, #0]
    xTaskCreate(uart_task, "UART task", 2048, NULL, 2, NULL);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2300      	movs	r3, #0
 8001b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b26:	491a      	ldr	r1, [pc, #104]	; (8001b90 <main+0x108>)
 8001b28:	481a      	ldr	r0, [pc, #104]	; (8001b94 <main+0x10c>)
 8001b2a:	f005 f934 	bl	8006d96 <xTaskCreate>
	xTaskCreate(w25qxx_task, "W25QXX task", 2048, NULL, 1, NULL);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	2301      	movs	r3, #1
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b3c:	4916      	ldr	r1, [pc, #88]	; (8001b98 <main+0x110>)
 8001b3e:	4817      	ldr	r0, [pc, #92]	; (8001b9c <main+0x114>)
 8001b40:	f005 f929 	bl	8006d96 <xTaskCreate>
	xTaskCreate(ssd1306_task, "SSD1306 task", 2048, NULL, 1, NULL);
 8001b44:	2300      	movs	r3, #0
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b52:	4913      	ldr	r1, [pc, #76]	; (8001ba0 <main+0x118>)
 8001b54:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <main+0x11c>)
 8001b56:	f005 f91e 	bl	8006d96 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b5a:	f004 fa7f 	bl	800605c <osKernelStart>
 8001b5e:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	}
  /* USER CODE END 3 */
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	20000874 	.word	0x20000874
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	200008c8 	.word	0x200008c8
 8001b74:	200009d1 	.word	0x200009d1
 8001b78:	20000968 	.word	0x20000968
 8001b7c:	0800d78c 	.word	0x0800d78c
 8001b80:	200009ac 	.word	0x200009ac
 8001b84:	20001240 	.word	0x20001240
 8001b88:	20001244 	.word	0x20001244
 8001b8c:	2000123c 	.word	0x2000123c
 8001b90:	0800d764 	.word	0x0800d764
 8001b94:	08001eed 	.word	0x08001eed
 8001b98:	0800d770 	.word	0x0800d770
 8001b9c:	08001f65 	.word	0x08001f65
 8001ba0:	0800d77c 	.word	0x0800d77c
 8001ba4:	080020a1 	.word	0x080020a1

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 0320 	add.w	r3, r7, #32
 8001bb2:	2230      	movs	r2, #48	; 0x30
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f006 fcd2 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <SystemClock_Config+0xb4>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <SystemClock_Config+0xb4>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <SystemClock_Config+0xb4>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <SystemClock_Config+0xb8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <SystemClock_Config+0xb8>)
 8001bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <SystemClock_Config+0xb8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 fe53 	bl	80038c4 <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c24:	f000 fba4 	bl	8002370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 f8b6 	bl	8003db4 <HAL_RCC_ClockConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001c4e:	f000 fb8f 	bl	8002370 <Error_Handler>
  }
}
 8001c52:	bf00      	nop
 8001c54:	3750      	adds	r7, #80	; 0x50
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c6a:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <MX_I2C1_Init+0x54>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c70:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <MX_I2C1_Init+0x58>)
 8001c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001ca2:	f001 f9b3 	bl	800300c <HAL_I2C_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cac:	f000 fb60 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000874 	.word	0x20000874
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	000186a0 	.word	0x000186a0

08001cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001d0c:	220a      	movs	r2, #10
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_SPI1_Init+0x64>)
 8001d12:	f002 fa2f 	bl	8004174 <HAL_SPI_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d1c:	f000 fb28 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200008c8 	.word	0x200008c8
 8001d28:	40013000 	.word	0x40013000

08001d2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d40:	463b      	mov	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <MX_TIM3_Init+0x94>)
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <MX_TIM3_Init+0x98>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_TIM3_Init+0x94>)
 8001d50:	220f      	movs	r2, #15
 8001d52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_TIM3_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <MX_TIM3_Init+0x94>)
 8001d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_TIM3_Init+0x94>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <MX_TIM3_Init+0x94>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d6e:	4814      	ldr	r0, [pc, #80]	; (8001dc0 <MX_TIM3_Init+0x94>)
 8001d70:	f002 fe46 	bl	8004a00 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d7a:	f000 faf9 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <MX_TIM3_Init+0x94>)
 8001d8c:	f002 fe87 	bl	8004a9e <HAL_TIM_ConfigClockSource>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d96:	f000 faeb 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da2:	463b      	mov	r3, r7
 8001da4:	4619      	mov	r1, r3
 8001da6:	4806      	ldr	r0, [pc, #24]	; (8001dc0 <MX_TIM3_Init+0x94>)
 8001da8:	f003 f85a 	bl	8004e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001db2:	f000 fadd 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000920 	.word	0x20000920
 8001dc4:	40000400 	.word	0x40000400

08001dc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_USART1_UART_Init+0x50>)
 8001dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dee:	220c      	movs	r2, #12
 8001df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001e00:	f003 f89c 	bl	8004f3c <HAL_UART_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e0a:	f000 fab1 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000968 	.word	0x20000968
 8001e18:	40011000 	.word	0x40011000

08001e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <MX_GPIO_Init+0xc4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a29      	ldr	r2, [pc, #164]	; (8001ee0 <MX_GPIO_Init+0xc4>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <MX_GPIO_Init+0xc4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <MX_GPIO_Init+0xc4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <MX_GPIO_Init+0xc4>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <MX_GPIO_Init+0xc4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <MX_GPIO_Init+0xc4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <MX_GPIO_Init+0xc4>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MX_GPIO_Init+0xc4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8c:	4815      	ldr	r0, [pc, #84]	; (8001ee4 <MX_GPIO_Init+0xc8>)
 8001e8e:	f001 f8a3 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2108      	movs	r1, #8
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <MX_GPIO_Init+0xcc>)
 8001e98:	f001 f89e 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <MX_GPIO_Init+0xc8>)
 8001eb6:	f000 ff0b 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001eba:	2308      	movs	r3, #8
 8001ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_GPIO_Init+0xcc>)
 8001ed2:	f000 fefd 	bl	8002cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020000 	.word	0x40020000

08001eec <uart_task>:

/* USER CODE BEGIN 4 */
void uart_task() {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	for (;;) {
		Handle_Command();
 8001ef0:	f000 f920 	bl	8002134 <Handle_Command>
		if (uart_recv) {
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <uart_task+0x60>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d022      	beq.n	8001f42 <uart_task+0x56>
			if (xSemaphoreTake(mutex1, portMAX_DELAY) == pdTRUE) {
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <uart_task+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	4618      	mov	r0, r3
 8001f06:	f004 fc97 	bl	8006838 <xQueueSemaphoreTake>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d118      	bne.n	8001f42 <uart_task+0x56>
				response("UART have mutex\n");
 8001f10:	4810      	ldr	r0, [pc, #64]	; (8001f54 <uart_task+0x68>)
 8001f12:	f000 f9f9 	bl	8002308 <response>
				xQueueSend(uart_queue, (void*) &uart_data, (TickType_t) 0);
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <uart_task+0x6c>)
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	490f      	ldr	r1, [pc, #60]	; (8001f5c <uart_task+0x70>)
 8001f20:	f004 faac 	bl	800647c <xQueueGenericSend>
				uart_recv = 0;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <uart_task+0x60>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(mutex1);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <uart_task+0x64>)
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2200      	movs	r2, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	f004 faa2 	bl	800647c <xQueueGenericSend>
				clear_uart_buf();
 8001f38:	f000 f982 	bl	8002240 <clear_uart_buf>
				response("UART release mutex\n");
 8001f3c:	4808      	ldr	r0, [pc, #32]	; (8001f60 <uart_task+0x74>)
 8001f3e:	f000 f9e3 	bl	8002308 <response>
			}
		}
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 8001f42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f46:	f005 f85d 	bl	8007004 <vTaskDelay>
		Handle_Command();
 8001f4a:	e7d1      	b.n	8001ef0 <uart_task+0x4>
 8001f4c:	200009d0 	.word	0x200009d0
 8001f50:	2000123c 	.word	0x2000123c
 8001f54:	0800d7a8 	.word	0x0800d7a8
 8001f58:	20001240 	.word	0x20001240
 8001f5c:	20000009 	.word	0x20000009
 8001f60:	0800d7bc 	.word	0x0800d7bc

08001f64 <w25qxx_task>:
	}
}

void w25qxx_task() {
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af04      	add	r7, sp, #16
	for (;;) {
		if (uxQueueMessagesWaiting(uart_queue)) {
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <w25qxx_task+0xfc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 fd6e 	bl	8006a50 <uxQueueMessagesWaiting>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d06e      	beq.n	8002058 <w25qxx_task+0xf4>
			if (xSemaphoreTake(mutex1, portMAX_DELAY) == pdTRUE) {
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <w25qxx_task+0x100>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 fc58 	bl	8006838 <xQueueSemaphoreTake>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d164      	bne.n	8002058 <w25qxx_task+0xf4>
				response("W25Qxx have mutex\n");
 8001f8e:	4836      	ldr	r0, [pc, #216]	; (8002068 <w25qxx_task+0x104>)
 8001f90:	f000 f9ba 	bl	8002308 <response>
				compress_data(acc_x, acc_y, acc_z, gyz_x, gyz_y, gyz_z, tem, gas);
 8001f94:	4b35      	ldr	r3, [pc, #212]	; (800206c <w25qxx_task+0x108>)
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <w25qxx_task+0x10c>)
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	4b35      	ldr	r3, [pc, #212]	; (8002074 <w25qxx_task+0x110>)
 8001f9e:	681c      	ldr	r4, [r3, #0]
 8001fa0:	4b35      	ldr	r3, [pc, #212]	; (8002078 <w25qxx_task+0x114>)
 8001fa2:	681d      	ldr	r5, [r3, #0]
 8001fa4:	4b35      	ldr	r3, [pc, #212]	; (800207c <w25qxx_task+0x118>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a35      	ldr	r2, [pc, #212]	; (8002080 <w25qxx_task+0x11c>)
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4e35      	ldr	r6, [pc, #212]	; (8002084 <w25qxx_task+0x120>)
 8001fae:	edd6 7a00 	vldr	s15, [r6]
 8001fb2:	4e35      	ldr	r6, [pc, #212]	; (8002088 <w25qxx_task+0x124>)
 8001fb4:	ed96 7a00 	vldr	s14, [r6]
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	eef0 0a47 	vmov.f32	s1, s14
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	462b      	mov	r3, r5
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	f000 f96e 	bl	80022a8 <compress_data>
				W25Q32_erase4k(10 * SECTOR_SIZE);
 8001fcc:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8001fd0:	f7ff fd04 	bl	80019dc <W25Q32_erase4k>
				W25Q32_WriteData(w25qxx_str, 10 * SECTOR_SIZE, strlen((char*) w25qxx_str));
 8001fd4:	482d      	ldr	r0, [pc, #180]	; (800208c <w25qxx_task+0x128>)
 8001fd6:	f7fe f903 	bl	80001e0 <strlen>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001fe4:	4829      	ldr	r0, [pc, #164]	; (800208c <w25qxx_task+0x128>)
 8001fe6:	f7ff fc99 	bl	800191c <W25Q32_WriteData>
				w25qxx_data = strlen((char*) w25qxx_str);
 8001fea:	4828      	ldr	r0, [pc, #160]	; (800208c <w25qxx_task+0x128>)
 8001fec:	f7fe f8f8 	bl	80001e0 <strlen>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <w25qxx_task+0x12c>)
 8001ff6:	701a      	strb	r2, [r3, #0]
				xQueueSend(w25qxx_queue, (void*) &w25qxx_data, (TickType_t) 0);
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <w25qxx_task+0x130>)
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	4923      	ldr	r1, [pc, #140]	; (8002090 <w25qxx_task+0x12c>)
 8002002:	f004 fa3b 	bl	800647c <xQueueGenericSend>
				ssd1306_info(&hi2c1, acc_x, acc_y, acc_z, gyz_x, gyz_y, gyz_z, tem, gas);
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <w25qxx_task+0x108>)
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <w25qxx_task+0x10c>)
 800200c:	681c      	ldr	r4, [r3, #0]
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <w25qxx_task+0x110>)
 8002010:	681d      	ldr	r5, [r3, #0]
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <w25qxx_task+0x114>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a19      	ldr	r2, [pc, #100]	; (800207c <w25qxx_task+0x118>)
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	4919      	ldr	r1, [pc, #100]	; (8002080 <w25qxx_task+0x11c>)
 800201c:	6809      	ldr	r1, [r1, #0]
 800201e:	4e19      	ldr	r6, [pc, #100]	; (8002084 <w25qxx_task+0x120>)
 8002020:	edd6 7a00 	vldr	s15, [r6]
 8002024:	4e18      	ldr	r6, [pc, #96]	; (8002088 <w25qxx_task+0x124>)
 8002026:	ed96 7a00 	vldr	s14, [r6]
 800202a:	9102      	str	r1, [sp, #8]
 800202c:	9201      	str	r2, [sp, #4]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	eef0 0a47 	vmov.f32	s1, s14
 8002034:	eeb0 0a67 	vmov.f32	s0, s15
 8002038:	462b      	mov	r3, r5
 800203a:	4622      	mov	r2, r4
 800203c:	4601      	mov	r1, r0
 800203e:	4816      	ldr	r0, [pc, #88]	; (8002098 <w25qxx_task+0x134>)
 8002040:	f7ff fab8 	bl	80015b4 <ssd1306_info>
				xSemaphoreGive(mutex1);
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <w25qxx_task+0x100>)
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	f004 fa15 	bl	800647c <xQueueGenericSend>
				response("W25Qxx release mutex\n");
 8002052:	4812      	ldr	r0, [pc, #72]	; (800209c <w25qxx_task+0x138>)
 8002054:	f000 f958 	bl	8002308 <response>
			}
		}
		vTaskDelay(100 / portTICK_PERIOD_MS);
 8002058:	2064      	movs	r0, #100	; 0x64
 800205a:	f004 ffd3 	bl	8007004 <vTaskDelay>
		if (uxQueueMessagesWaiting(uart_queue)) {
 800205e:	e784      	b.n	8001f6a <w25qxx_task+0x6>
 8002060:	20001240 	.word	0x20001240
 8002064:	2000123c 	.word	0x2000123c
 8002068:	0800d7d0 	.word	0x0800d7d0
 800206c:	200009b0 	.word	0x200009b0
 8002070:	200009b4 	.word	0x200009b4
 8002074:	200009b8 	.word	0x200009b8
 8002078:	200009bc 	.word	0x200009bc
 800207c:	200009c0 	.word	0x200009c0
 8002080:	200009c4 	.word	0x200009c4
 8002084:	200009c8 	.word	0x200009c8
 8002088:	200009cc 	.word	0x200009cc
 800208c:	20000a3c 	.word	0x20000a3c
 8002090:	2000000a 	.word	0x2000000a
 8002094:	20001244 	.word	0x20001244
 8002098:	20000874 	.word	0x20000874
 800209c:	0800d7e4 	.word	0x0800d7e4

080020a0 <ssd1306_task>:
	}
}

void ssd1306_task() {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	uint8_t len = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	71fb      	strb	r3, [r7, #7]
	for (;;) {
		if (uxQueueMessagesWaiting(w25qxx_queue) != 0) {
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <ssd1306_task+0x80>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 fcce 	bl	8006a50 <uxQueueMessagesWaiting>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d02e      	beq.n	8002118 <ssd1306_task+0x78>
			if (xSemaphoreTake(mutex1, portMAX_DELAY) == pdTRUE) {
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <ssd1306_task+0x84>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f04f 31ff 	mov.w	r1, #4294967295
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 fbb8 	bl	8006838 <xQueueSemaphoreTake>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d124      	bne.n	8002118 <ssd1306_task+0x78>
				response("SSD1306 have mutex\n");
 80020ce:	4816      	ldr	r0, [pc, #88]	; (8002128 <ssd1306_task+0x88>)
 80020d0:	f000 f91a 	bl	8002308 <response>
				xQueueReceive(w25qxx_queue, &len, portMAX_DELAY);
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <ssd1306_task+0x80>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1df9      	adds	r1, r7, #7
 80020da:	f04f 32ff 	mov.w	r2, #4294967295
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 faca 	bl	8006678 <xQueueReceive>
				W25Q32_ReadData(w25qxx_output_str, 10 * SECTOR_SIZE, len);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80020ee:	480f      	ldr	r0, [pc, #60]	; (800212c <ssd1306_task+0x8c>)
 80020f0:	f7ff fbd2 	bl	8001898 <W25Q32_ReadData>
				HAL_UART_Transmit(&huart1, w25qxx_output_str, strlen((char*) w25qxx_output_str), 500);
 80020f4:	480d      	ldr	r0, [pc, #52]	; (800212c <ssd1306_task+0x8c>)
 80020f6:	f7fe f873 	bl	80001e0 <strlen>
 80020fa:	4603      	mov	r3, r0
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002102:	490a      	ldr	r1, [pc, #40]	; (800212c <ssd1306_task+0x8c>)
 8002104:	480a      	ldr	r0, [pc, #40]	; (8002130 <ssd1306_task+0x90>)
 8002106:	f002 ff66 	bl	8004fd6 <HAL_UART_Transmit>
				xSemaphoreGive(mutex1);
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <ssd1306_task+0x84>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	f004 f9b2 	bl	800647c <xQueueGenericSend>
			}
		}
		vTaskDelay(100 / portTICK_PERIOD_MS);
 8002118:	2064      	movs	r0, #100	; 0x64
 800211a:	f004 ff73 	bl	8007004 <vTaskDelay>
		if (uxQueueMessagesWaiting(w25qxx_queue) != 0) {
 800211e:	e7c4      	b.n	80020aa <ssd1306_task+0xa>
 8002120:	20001244 	.word	0x20001244
 8002124:	2000123c 	.word	0x2000123c
 8002128:	0800d7fc 	.word	0x0800d7fc
 800212c:	20000e3c 	.word	0x20000e3c
 8002130:	20000968 	.word	0x20000968

08002134 <Handle_Command>:
	}
}
void Handle_Command() {
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af06      	add	r7, sp, #24
	if (HAL_GetTick() - uart_last_rcv >= 100 && strlen((char*) uart_buf) > 35) {
 800213a:	f000 fbf5 	bl	8002928 <HAL_GetTick>
 800213e:	4603      	mov	r3, r0
 8002140:	4a18      	ldr	r2, [pc, #96]	; (80021a4 <Handle_Command+0x70>)
 8002142:	7812      	ldrb	r2, [r2, #0]
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	2b63      	cmp	r3, #99	; 0x63
 8002148:	d929      	bls.n	800219e <Handle_Command+0x6a>
 800214a:	4817      	ldr	r0, [pc, #92]	; (80021a8 <Handle_Command+0x74>)
 800214c:	f7fe f848 	bl	80001e0 <strlen>
 8002150:	4603      	mov	r3, r0
 8002152:	2b23      	cmp	r3, #35	; 0x23
 8002154:	d923      	bls.n	800219e <Handle_Command+0x6a>
		if (strlen((char*) uart_buf) > 40) {
 8002156:	4814      	ldr	r0, [pc, #80]	; (80021a8 <Handle_Command+0x74>)
 8002158:	f7fe f842 	bl	80001e0 <strlen>
 800215c:	4603      	mov	r3, r0
 800215e:	2b28      	cmp	r3, #40	; 0x28
 8002160:	d918      	bls.n	8002194 <Handle_Command+0x60>
			extract_data(uart_buf, &acc_x, &acc_y, &acc_z, &gyz_x, &gyz_y, &gyz_z, &tem, &gas);
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <Handle_Command+0x78>)
 8002164:	9304      	str	r3, [sp, #16]
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <Handle_Command+0x7c>)
 8002168:	9303      	str	r3, [sp, #12]
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <Handle_Command+0x80>)
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <Handle_Command+0x84>)
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <Handle_Command+0x88>)
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <Handle_Command+0x8c>)
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <Handle_Command+0x90>)
 800217a:	4913      	ldr	r1, [pc, #76]	; (80021c8 <Handle_Command+0x94>)
 800217c:	480a      	ldr	r0, [pc, #40]	; (80021a8 <Handle_Command+0x74>)
 800217e:	f000 f873 	bl	8002268 <extract_data>
			clear_uart_buf();
 8002182:	f000 f85d 	bl	8002240 <clear_uart_buf>
			uart_recv = 1;
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <Handle_Command+0x98>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
			response("UART OK\n");
 800218c:	4810      	ldr	r0, [pc, #64]	; (80021d0 <Handle_Command+0x9c>)
 800218e:	f000 f8bb 	bl	8002308 <response>
			response("UART fail\n");
			clear_uart_buf();
		}
	}

}
 8002192:	e004      	b.n	800219e <Handle_Command+0x6a>
			response("UART fail\n");
 8002194:	480f      	ldr	r0, [pc, #60]	; (80021d4 <Handle_Command+0xa0>)
 8002196:	f000 f8b7 	bl	8002308 <response>
			clear_uart_buf();
 800219a:	f000 f851 	bl	8002240 <clear_uart_buf>
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000a39 	.word	0x20000a39
 80021a8:	200009d4 	.word	0x200009d4
 80021ac:	200009cc 	.word	0x200009cc
 80021b0:	200009c8 	.word	0x200009c8
 80021b4:	200009c4 	.word	0x200009c4
 80021b8:	200009c0 	.word	0x200009c0
 80021bc:	200009bc 	.word	0x200009bc
 80021c0:	200009b8 	.word	0x200009b8
 80021c4:	200009b4 	.word	0x200009b4
 80021c8:	200009b0 	.word	0x200009b0
 80021cc:	200009d0 	.word	0x200009d0
 80021d0:	0800d810 	.word	0x0800d810
 80021d4:	0800d81c 	.word	0x0800d81c

080021d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_UART_RxCpltCallback+0x54>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d11b      	bne.n	8002224 <HAL_UART_RxCpltCallback+0x4c>
		if (uart_buf_cnt < sizeof(uart_buf)) {
 80021ec:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_UART_RxCpltCallback+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b63      	cmp	r3, #99	; 0x63
 80021f2:	d806      	bhi.n	8002202 <HAL_UART_RxCpltCallback+0x2a>
			uart_buf[uart_buf_cnt] = uart_chr;
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_UART_RxCpltCallback+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_UART_RxCpltCallback+0x5c>)
 80021fc:	7819      	ldrb	r1, [r3, #0]
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_UART_RxCpltCallback+0x60>)
 8002200:	5499      	strb	r1, [r3, r2]
		}
		uart_last_rcv = HAL_GetTick();
 8002202:	f000 fb91 	bl	8002928 <HAL_GetTick>
 8002206:	4603      	mov	r3, r0
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_UART_RxCpltCallback+0x64>)
 800220c:	701a      	strb	r2, [r3, #0]
		uart_buf_cnt++;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_UART_RxCpltCallback+0x58>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_UART_RxCpltCallback+0x58>)
 8002218:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart_chr, sizeof(uart_chr));
 800221a:	2201      	movs	r2, #1
 800221c:	4905      	ldr	r1, [pc, #20]	; (8002234 <HAL_UART_RxCpltCallback+0x5c>)
 800221e:	4803      	ldr	r0, [pc, #12]	; (800222c <HAL_UART_RxCpltCallback+0x54>)
 8002220:	f002 ff6b 	bl	80050fa <HAL_UART_Receive_IT>
	}
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000968 	.word	0x20000968
 8002230:	20000a38 	.word	0x20000a38
 8002234:	200009d1 	.word	0x200009d1
 8002238:	200009d4 	.word	0x200009d4
 800223c:	20000a39 	.word	0x20000a39

08002240 <clear_uart_buf>:

void clear_uart_buf() {
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	memset(uart_buf, 0, strlen((char*) uart_buf));
 8002244:	4806      	ldr	r0, [pc, #24]	; (8002260 <clear_uart_buf+0x20>)
 8002246:	f7fd ffcb 	bl	80001e0 <strlen>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	2100      	movs	r1, #0
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <clear_uart_buf+0x20>)
 8002252:	f006 f985 	bl	8008560 <memset>
	uart_buf_cnt = 0;
 8002256:	4b03      	ldr	r3, [pc, #12]	; (8002264 <clear_uart_buf+0x24>)
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200009d4 	.word	0x200009d4
 8002264:	20000a38 	.word	0x20000a38

08002268 <extract_data>:

void extract_data(const uint8_t *input, int *acc_x, int *acc_y, int *acc_z,
					int *gyz_x, int *gyz_y, int *gyz_z, float *tem, float *gas) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af06      	add	r7, sp, #24
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
	sscanf((char*) input, "X:%d Y:%d Z:%d X:%d Y:%d Z:%d t:%f g:%f", acc_x, acc_y, acc_z, gyz_x, gyz_y, gyz_z, tem, gas);
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	9305      	str	r3, [sp, #20]
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	9304      	str	r3, [sp, #16]
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	9303      	str	r3, [sp, #12]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	9302      	str	r3, [sp, #8]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4904      	ldr	r1, [pc, #16]	; (80022a4 <extract_data+0x3c>)
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f007 f8fb 	bl	8009490 <siscanf>
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	0800d828 	.word	0x0800d828

080022a8 <compress_data>:

void compress_data(const int acc_x, const int acc_y, const int acc_z,
		const int gyz_x, const int gyz_y, const int gyz_z, const float tem, const float gas) {
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b08e      	sub	sp, #56	; 0x38
 80022ac:	af08      	add	r7, sp, #32
 80022ae:	6178      	str	r0, [r7, #20]
 80022b0:	6139      	str	r1, [r7, #16]
 80022b2:	60fa      	str	r2, [r7, #12]
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80022ba:	edc7 0a00 	vstr	s1, [r7]
	sprintf((char*) w25qxx_str, "X:%d Y:%d Z:%d X:%d Y:%d Z:%d t:%f g:%f", acc_x, acc_y, acc_z, gyz_x, gyz_y, gyz_z, tem, gas);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe f94a 	bl	8000558 <__aeabi_f2d>
 80022c4:	4604      	mov	r4, r0
 80022c6:	460d      	mov	r5, r1
 80022c8:	6838      	ldr	r0, [r7, #0]
 80022ca:	f7fe f945 	bl	8000558 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80022d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4904      	ldr	r1, [pc, #16]	; (8002300 <compress_data+0x58>)
 80022f0:	4804      	ldr	r0, [pc, #16]	; (8002304 <compress_data+0x5c>)
 80022f2:	f007 f8ad 	bl	8009450 <siprintf>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bdb0      	pop	{r4, r5, r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800d828 	.word	0x0800d828
 8002304:	20000a3c 	.word	0x20000a3c

08002308 <response>:

void response(char *rsp) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
//	sprintf((char*) tx, "acc\nX:%-4d\tY:%-4d\tZ:%-4d\ngyz\nX:%-4d\tY:%-4d\tZ:%-4d\n\ntem:%-3.3f\tgas:-%4.3f\n",
//			acc_x, acc_y, acc_z, gyz_x, gyz_y, gyz_z, tem, gas);
	HAL_UART_Transmit(&huart1, (uint8_t*) rsp, strlen (rsp), 200);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fd ff65 	bl	80001e0 <strlen>
 8002316:	4603      	mov	r3, r0
 8002318:	b29a      	uxth	r2, r3
 800231a:	23c8      	movs	r3, #200	; 0xc8
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4803      	ldr	r0, [pc, #12]	; (800232c <response+0x24>)
 8002320:	f002 fe59 	bl	8004fd6 <HAL_UART_Transmit>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000968 	.word	0x20000968

08002330 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi1.Instance) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_SPI_TxRxCpltCallback+0x28>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d102      	bne.n	800234a <HAL_SPI_TxRxCpltCallback+0x1a>
		rx_spi_flg = 1;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_SPI_TxRxCpltCallback+0x2c>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
	}
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200008c8 	.word	0x200008c8
 800235c:	20001248 	.word	0x20001248

08002360 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002368:	2001      	movs	r0, #1
 800236a:	f003 feca 	bl	8006102 <osDelay>
 800236e:	e7fb      	b.n	8002368 <StartDefaultTask+0x8>

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002378:	e7fe      	b.n	8002378 <Error_Handler+0x8>
	...

0800237c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_MspInit+0x54>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_MspInit+0x54>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_MspInit+0x54>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_MspInit+0x54>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_MspInit+0x54>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_MspInit+0x54>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	210f      	movs	r1, #15
 80023be:	f06f 0001 	mvn.w	r0, #1
 80023c2:	f000 fbbc 	bl	8002b3e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a19      	ldr	r2, [pc, #100]	; (8002458 <HAL_I2C_MspInit+0x84>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d12b      	bne.n	800244e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_I2C_MspInit+0x88>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_I2C_MspInit+0x88>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_I2C_MspInit+0x88>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002412:	23c0      	movs	r3, #192	; 0xc0
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002416:	2312      	movs	r3, #18
 8002418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002422:	2304      	movs	r3, #4
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <HAL_I2C_MspInit+0x8c>)
 800242e:	f000 fc4f 	bl	8002cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_I2C_MspInit+0x88>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_I2C_MspInit+0x88>)
 800243c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_I2C_MspInit+0x88>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800244e:	bf00      	nop
 8002450:	3728      	adds	r7, #40	; 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40005400 	.word	0x40005400
 800245c:	40023800 	.word	0x40023800
 8002460:	40020400 	.word	0x40020400

08002464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <HAL_SPI_MspInit+0x94>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d133      	bne.n	80024ee <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_SPI_MspInit+0x98>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <HAL_SPI_MspInit+0x98>)
 8002490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_SPI_MspInit+0x98>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_SPI_MspInit+0x98>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a14      	ldr	r2, [pc, #80]	; (80024fc <HAL_SPI_MspInit+0x98>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_SPI_MspInit+0x98>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024be:	23e0      	movs	r3, #224	; 0xe0
 80024c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ce:	2305      	movs	r3, #5
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 0314 	add.w	r3, r7, #20
 80024d6:	4619      	mov	r1, r3
 80024d8:	4809      	ldr	r0, [pc, #36]	; (8002500 <HAL_SPI_MspInit+0x9c>)
 80024da:	f000 fbf9 	bl	8002cd0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2105      	movs	r1, #5
 80024e2:	2023      	movs	r0, #35	; 0x23
 80024e4:	f000 fb2b 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024e8:	2023      	movs	r0, #35	; 0x23
 80024ea:	f000 fb44 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	; 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40013000 	.word	0x40013000
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020000 	.word	0x40020000

08002504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_TIM_Base_MspInit+0x3c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10d      	bne.n	8002532 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_TIM_Base_MspInit+0x40>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a09      	ldr	r2, [pc, #36]	; (8002544 <HAL_TIM_Base_MspInit+0x40>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_TIM_Base_MspInit+0x40>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40000400 	.word	0x40000400
 8002544:	40023800 	.word	0x40023800

08002548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_UART_MspInit+0x94>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d134      	bne.n	80025d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_UART_MspInit+0x98>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <HAL_UART_MspInit+0x98>)
 8002574:	f043 0310 	orr.w	r3, r3, #16
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_UART_MspInit+0x98>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_UART_MspInit+0x98>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <HAL_UART_MspInit+0x98>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_UART_MspInit+0x98>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025b4:	2307      	movs	r3, #7
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	4809      	ldr	r0, [pc, #36]	; (80025e4 <HAL_UART_MspInit+0x9c>)
 80025c0:	f000 fb86 	bl	8002cd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2106      	movs	r1, #6
 80025c8:	2025      	movs	r0, #37	; 0x25
 80025ca:	f000 fab8 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ce:	2025      	movs	r0, #37	; 0x25
 80025d0:	f000 fad1 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40011000 	.word	0x40011000
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <NMI_Handler+0x4>

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <MemManage_Handler+0x4>

080025fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler+0x4>

08002606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002618:	f000 f972 	bl	8002900 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800261c:	f005 f924 	bl	8007868 <xTaskGetSchedulerState>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002626:	f005 fcff 	bl	8008028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <SPI1_IRQHandler+0x10>)
 8002636:	f001 febb 	bl	80043b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200008c8 	.word	0x200008c8

08002644 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <USART1_IRQHandler+0x10>)
 800264a:	f002 fd87 	bl	800515c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000968 	.word	0x20000968

08002658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return 1;
 800265c:	2301      	movs	r3, #1
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_kill>:

int _kill(int pid, int sig)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002672:	f005 ff13 	bl	800849c <__errno>
 8002676:	4603      	mov	r3, r0
 8002678:	2216      	movs	r2, #22
 800267a:	601a      	str	r2, [r3, #0]
  return -1;
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_exit>:

void _exit (int status)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ffe7 	bl	8002668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800269a:	e7fe      	b.n	800269a <_exit+0x12>

0800269c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e00a      	b.n	80026c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ae:	f3af 8000 	nop.w
 80026b2:	4601      	mov	r1, r0
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60ba      	str	r2, [r7, #8]
 80026ba:	b2ca      	uxtb	r2, r1
 80026bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3301      	adds	r3, #1
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	dbf0      	blt.n	80026ae <_read+0x12>
  }

  return len;
 80026cc:	687b      	ldr	r3, [r7, #4]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e009      	b.n	80026fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	60ba      	str	r2, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	dbf1      	blt.n	80026e8 <_write+0x12>
  }
  return len;
 8002704:	687b      	ldr	r3, [r7, #4]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_close>:

int _close(int file)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002736:	605a      	str	r2, [r3, #4]
  return 0;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <_isatty>:

int _isatty(int file)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <_sbrk+0x5c>)
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <_sbrk+0x60>)
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800278c:	4b13      	ldr	r3, [pc, #76]	; (80027dc <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <_sbrk+0x64>)
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <_sbrk+0x68>)
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <_sbrk+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d207      	bcs.n	80027b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a8:	f005 fe78 	bl	800849c <__errno>
 80027ac:	4603      	mov	r3, r0
 80027ae:	220c      	movs	r2, #12
 80027b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	e009      	b.n	80027cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <_sbrk+0x64>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <_sbrk+0x64>)
 80027c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20020000 	.word	0x20020000
 80027d8:	00000400 	.word	0x00000400
 80027dc:	2000124c 	.word	0x2000124c
 80027e0:	20004fb8 	.word	0x20004fb8

080027e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <SystemInit+0x20>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	4a05      	ldr	r2, [pc, #20]	; (8002804 <SystemInit+0x20>)
 80027f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800280c:	480d      	ldr	r0, [pc, #52]	; (8002844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800280e:	490e      	ldr	r1, [pc, #56]	; (8002848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002810:	4a0e      	ldr	r2, [pc, #56]	; (800284c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002814:	e002      	b.n	800281c <LoopCopyDataInit>

08002816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281a:	3304      	adds	r3, #4

0800281c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800281c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002820:	d3f9      	bcc.n	8002816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002824:	4c0b      	ldr	r4, [pc, #44]	; (8002854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002828:	e001      	b.n	800282e <LoopFillZerobss>

0800282a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800282c:	3204      	adds	r2, #4

0800282e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002830:	d3fb      	bcc.n	800282a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002832:	f7ff ffd7 	bl	80027e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002836:	f005 fe37 	bl	80084a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283a:	f7ff f925 	bl	8001a88 <main>
  bx  lr    
 800283e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002848:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800284c:	0800e534 	.word	0x0800e534
  ldr r2, =_sbss
 8002850:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002854:	20004fb8 	.word	0x20004fb8

08002858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002858:	e7fe      	b.n	8002858 <ADC_IRQHandler>
	...

0800285c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_Init+0x40>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0d      	ldr	r2, [pc, #52]	; (800289c <HAL_Init+0x40>)
 8002866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_Init+0x40>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <HAL_Init+0x40>)
 8002872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_Init+0x40>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a07      	ldr	r2, [pc, #28]	; (800289c <HAL_Init+0x40>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002884:	2003      	movs	r0, #3
 8002886:	f000 f94f 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288a:	200f      	movs	r0, #15
 800288c:	f000 f808 	bl	80028a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002890:	f7ff fd74 	bl	800237c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00

080028a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_InitTick+0x54>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_InitTick+0x58>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f967 	bl	8002b92 <HAL_SYSTICK_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00e      	b.n	80028ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b0f      	cmp	r3, #15
 80028d2:	d80a      	bhi.n	80028ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d4:	2200      	movs	r2, #0
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f000 f92f 	bl	8002b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <HAL_InitTick+0x5c>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	2000000c 	.word	0x2000000c
 80028f8:	20000014 	.word	0x20000014
 80028fc:	20000010 	.word	0x20000010

08002900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_IncTick+0x20>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_IncTick+0x24>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4413      	add	r3, r2
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <HAL_IncTick+0x24>)
 8002912:	6013      	str	r3, [r2, #0]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000014 	.word	0x20000014
 8002924:	20001250 	.word	0x20001250

08002928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return uwTick;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_GetTick+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20001250 	.word	0x20001250

08002940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff ffee 	bl	8002928 <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d005      	beq.n	8002966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_Delay+0x44>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002966:	bf00      	nop
 8002968:	f7ff ffde 	bl	8002928 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	429a      	cmp	r2, r3
 8002976:	d8f7      	bhi.n	8002968 <HAL_Delay+0x28>
  {
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000014 	.word	0x20000014

08002988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a4:	4013      	ands	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ba:	4a04      	ldr	r2, [pc, #16]	; (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <__NVIC_GetPriorityGrouping+0x18>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 0307 	and.w	r3, r3, #7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db0b      	blt.n	8002a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	4907      	ldr	r1, [pc, #28]	; (8002a24 <__NVIC_EnableIRQ+0x38>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	; (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	; (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f1c3 0307 	rsb	r3, r3, #7
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf28      	it	cs
 8002a9a:	2304      	movcs	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d902      	bls.n	8002aac <NVIC_EncodePriority+0x30>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	e000      	b.n	8002aae <NVIC_EncodePriority+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	401a      	ands	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	4313      	orrs	r3, r2
         );
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af4:	d301      	bcc.n	8002afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00f      	b.n	8002b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <SysTick_Config+0x40>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b02:	210f      	movs	r1, #15
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f7ff ff8e 	bl	8002a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <SysTick_Config+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <SysTick_Config+0x40>)
 8002b14:	2207      	movs	r2, #7
 8002b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff29 	bl	8002988 <__NVIC_SetPriorityGrouping>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b50:	f7ff ff3e 	bl	80029d0 <__NVIC_GetPriorityGrouping>
 8002b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f7ff ff8e 	bl	8002a7c <NVIC_EncodePriority>
 8002b60:	4602      	mov	r2, r0
 8002b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff5d 	bl	8002a28 <__NVIC_SetPriority>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff31 	bl	80029ec <__NVIC_EnableIRQ>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffa2 	bl	8002ae4 <SysTick_Config>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff feb6 	bl	8002928 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d008      	beq.n	8002bdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e052      	b.n	8002c82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0216 	bic.w	r2, r2, #22
 8002bea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d103      	bne.n	8002c0c <HAL_DMA_Abort+0x62>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0208 	bic.w	r2, r2, #8
 8002c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2c:	e013      	b.n	8002c56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c2e:	f7ff fe7b 	bl	8002928 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d90c      	bls.n	8002c56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2203      	movs	r2, #3
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e015      	b.n	8002c82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e4      	bne.n	8002c2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	223f      	movs	r2, #63	; 0x3f
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e00c      	b.n	8002cc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2205      	movs	r2, #5
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	e159      	b.n	8002fa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	f040 8148 	bne.w	8002f9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d005      	beq.n	8002d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d130      	bne.n	8002d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 0201 	and.w	r2, r3, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d017      	beq.n	8002dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d123      	bne.n	8002e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	08da      	lsrs	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3208      	adds	r2, #8
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	220f      	movs	r2, #15
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	69b9      	ldr	r1, [r7, #24]
 8002e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0203 	and.w	r2, r3, #3
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a2 	beq.w	8002f9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	4b57      	ldr	r3, [pc, #348]	; (8002fb8 <HAL_GPIO_Init+0x2e8>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_GPIO_Init+0x2e8>)
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e64:	6453      	str	r3, [r2, #68]	; 0x44
 8002e66:	4b54      	ldr	r3, [pc, #336]	; (8002fb8 <HAL_GPIO_Init+0x2e8>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e72:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_GPIO_Init+0x2ec>)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	220f      	movs	r2, #15
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a49      	ldr	r2, [pc, #292]	; (8002fc0 <HAL_GPIO_Init+0x2f0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d019      	beq.n	8002ed2 <HAL_GPIO_Init+0x202>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a48      	ldr	r2, [pc, #288]	; (8002fc4 <HAL_GPIO_Init+0x2f4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_GPIO_Init+0x1fe>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a47      	ldr	r2, [pc, #284]	; (8002fc8 <HAL_GPIO_Init+0x2f8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00d      	beq.n	8002eca <HAL_GPIO_Init+0x1fa>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a46      	ldr	r2, [pc, #280]	; (8002fcc <HAL_GPIO_Init+0x2fc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <HAL_GPIO_Init+0x1f6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a45      	ldr	r2, [pc, #276]	; (8002fd0 <HAL_GPIO_Init+0x300>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_GPIO_Init+0x1f2>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	e008      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002ec2:	2307      	movs	r3, #7
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e004      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x204>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	f002 0203 	and.w	r2, r2, #3
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	4093      	lsls	r3, r2
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee4:	4935      	ldr	r1, [pc, #212]	; (8002fbc <HAL_GPIO_Init+0x2ec>)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef2:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f16:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f40:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f46:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_GPIO_Init+0x304>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	f67f aea2 	bls.w	8002cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3724      	adds	r7, #36	; 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40013c00 	.word	0x40013c00

08002fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe8:	787b      	ldrb	r3, [r7, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff4:	e003      	b.n	8002ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	041a      	lsls	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	619a      	str	r2, [r3, #24]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e12b      	b.n	8003276 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff f9ce 	bl	80023d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	; 0x24
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800306e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003070:	f001 f858 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8003074:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a81      	ldr	r2, [pc, #516]	; (8003280 <HAL_I2C_Init+0x274>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d807      	bhi.n	8003090 <HAL_I2C_Init+0x84>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a80      	ldr	r2, [pc, #512]	; (8003284 <HAL_I2C_Init+0x278>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e006      	b.n	800309e <HAL_I2C_Init+0x92>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a7d      	ldr	r2, [pc, #500]	; (8003288 <HAL_I2C_Init+0x27c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	bf94      	ite	ls
 8003098:	2301      	movls	r3, #1
 800309a:	2300      	movhi	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0e7      	b.n	8003276 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a78      	ldr	r2, [pc, #480]	; (800328c <HAL_I2C_Init+0x280>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0c9b      	lsrs	r3, r3, #18
 80030b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a6a      	ldr	r2, [pc, #424]	; (8003280 <HAL_I2C_Init+0x274>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d802      	bhi.n	80030e0 <HAL_I2C_Init+0xd4>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	e009      	b.n	80030f4 <HAL_I2C_Init+0xe8>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	4a69      	ldr	r2, [pc, #420]	; (8003290 <HAL_I2C_Init+0x284>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	3301      	adds	r3, #1
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003106:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	495c      	ldr	r1, [pc, #368]	; (8003280 <HAL_I2C_Init+0x274>)
 8003110:	428b      	cmp	r3, r1
 8003112:	d819      	bhi.n	8003148 <HAL_I2C_Init+0x13c>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e59      	subs	r1, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003122:	1c59      	adds	r1, r3, #1
 8003124:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003128:	400b      	ands	r3, r1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_I2C_Init+0x138>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e59      	subs	r1, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fbb1 f3f3 	udiv	r3, r1, r3
 800313c:	3301      	adds	r3, #1
 800313e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003142:	e051      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 8003144:	2304      	movs	r3, #4
 8003146:	e04f      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d111      	bne.n	8003174 <HAL_I2C_Init+0x168>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e012      	b.n	800319a <HAL_I2C_Init+0x18e>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	0099      	lsls	r1, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	fbb0 f3f3 	udiv	r3, r0, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Init+0x196>
 800319e:	2301      	movs	r3, #1
 80031a0:	e022      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10e      	bne.n	80031c8 <HAL_I2C_Init+0x1bc>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e58      	subs	r0, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	460b      	mov	r3, r1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	440b      	add	r3, r1
 80031b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c6:	e00f      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	0099      	lsls	r1, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	6809      	ldr	r1, [r1, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6911      	ldr	r1, [r2, #16]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68d2      	ldr	r2, [r2, #12]
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	430b      	orrs	r3, r1
 800322a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	000186a0 	.word	0x000186a0
 8003284:	001e847f 	.word	0x001e847f
 8003288:	003d08ff 	.word	0x003d08ff
 800328c:	431bde83 	.word	0x431bde83
 8003290:	10624dd3 	.word	0x10624dd3

08003294 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ae:	f7ff fb3b 	bl	8002928 <HAL_GetTick>
 80032b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b20      	cmp	r3, #32
 80032be:	f040 80d9 	bne.w	8003474 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2319      	movs	r3, #25
 80032c8:	2201      	movs	r2, #1
 80032ca:	496d      	ldr	r1, [pc, #436]	; (8003480 <HAL_I2C_Mem_Write+0x1ec>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f971 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
 80032da:	e0cc      	b.n	8003476 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_I2C_Mem_Write+0x56>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e0c5      	b.n	8003476 <HAL_I2C_Mem_Write+0x1e2>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d007      	beq.n	8003310 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2221      	movs	r2, #33	; 0x21
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a3a      	ldr	r2, [r7, #32]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a4d      	ldr	r2, [pc, #308]	; (8003484 <HAL_I2C_Mem_Write+0x1f0>)
 8003350:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003352:	88f8      	ldrh	r0, [r7, #6]
 8003354:	893a      	ldrh	r2, [r7, #8]
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4603      	mov	r3, r0
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f890 	bl	8003488 <I2C_RequestMemoryWrite>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d052      	beq.n	8003414 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e081      	b.n	8003476 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f9f2 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b04      	cmp	r3, #4
 8003388:	d107      	bne.n	800339a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003398:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06b      	b.n	8003476 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	781a      	ldrb	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d11b      	bne.n	8003414 <HAL_I2C_Mem_Write+0x180>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d017      	beq.n	8003414 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1aa      	bne.n	8003372 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f9de 	bl	80037e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2b04      	cmp	r3, #4
 8003432:	d107      	bne.n	8003444 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003442:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e016      	b.n	8003476 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	00100002 	.word	0x00100002
 8003484:	ffff0000 	.word	0xffff0000

08003488 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	460b      	mov	r3, r1
 800349c:	813b      	strh	r3, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f878 	bl	80035b4 <I2C_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d8:	d103      	bne.n	80034e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e05f      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	492d      	ldr	r1, [pc, #180]	; (80035b0 <I2C_RequestMemoryWrite+0x128>)
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f8b0 	bl	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e04c      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	6a39      	ldr	r1, [r7, #32]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f91a 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b04      	cmp	r3, #4
 8003538:	d107      	bne.n	800354a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003548:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e02b      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	611a      	str	r2, [r3, #16]
 800355e:	e021      	b.n	80035a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003560:	893b      	ldrh	r3, [r7, #8]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	b29b      	uxth	r3, r3
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	6a39      	ldr	r1, [r7, #32]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f8f4 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b04      	cmp	r3, #4
 8003584:	d107      	bne.n	8003596 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003594:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e005      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800359a:	893b      	ldrh	r3, [r7, #8]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	00010002 	.word	0x00010002

080035b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	e025      	b.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d021      	beq.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7ff f9ab 	bl	8002928 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d116      	bne.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e023      	b.n	800365a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d10d      	bne.n	8003638 <I2C_WaitOnFlagUntilTimeout+0x84>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	e00c      	b.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	429a      	cmp	r2, r3
 8003656:	d0b6      	beq.n	80035c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003670:	e051      	b.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003680:	d123      	bne.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003690:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800369a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f043 0204 	orr.w	r2, r3, #4
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e046      	b.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d021      	beq.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7ff f929 	bl	8002928 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d116      	bne.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e020      	b.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10c      	bne.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4013      	ands	r3, r2
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	e00b      	b.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	43da      	mvns	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d18d      	bne.n	8003672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800376c:	e02d      	b.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f878 	bl	8003864 <I2C_IsAcknowledgeFailed>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e02d      	b.n	80037da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d021      	beq.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7ff f8cf 	bl	8002928 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d116      	bne.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e007      	b.n	80037da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d1ca      	bne.n	800376e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ee:	e02d      	b.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f837 	bl	8003864 <I2C_IsAcknowledgeFailed>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e02d      	b.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d021      	beq.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7ff f88e 	bl	8002928 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d116      	bne.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e007      	b.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b04      	cmp	r3, #4
 8003858:	d1ca      	bne.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387a:	d11b      	bne.n	80038b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003884:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f043 0204 	orr.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e267      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d075      	beq.n	80039ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e2:	4b88      	ldr	r3, [pc, #544]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d00c      	beq.n	8003908 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ee:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d112      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fa:	4b82      	ldr	r3, [pc, #520]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003906:	d10b      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4b7e      	ldr	r3, [pc, #504]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05b      	beq.n	80039cc <HAL_RCC_OscConfig+0x108>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d157      	bne.n	80039cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e242      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x74>
 800392a:	4b76      	ldr	r3, [pc, #472]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a75      	ldr	r2, [pc, #468]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x98>
 8003942:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6f      	ldr	r2, [pc, #444]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b6d      	ldr	r3, [pc, #436]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6c      	ldr	r2, [pc, #432]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 800395c:	4b69      	ldr	r3, [pc, #420]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a68      	ldr	r2, [pc, #416]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a65      	ldr	r2, [pc, #404]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe ffd4 	bl	8002928 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003984:	f7fe ffd0 	bl	8002928 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e207      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b5b      	ldr	r3, [pc, #364]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xc0>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe ffc0 	bl	8002928 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe ffbc 	bl	8002928 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1f3      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	4b51      	ldr	r3, [pc, #324]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0xe8>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d063      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039da:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d11c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f2:	4b44      	ldr	r3, [pc, #272]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	4b41      	ldr	r3, [pc, #260]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e1c7      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4937      	ldr	r1, [pc, #220]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	e03a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <HAL_RCC_OscConfig+0x244>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fe ff75 	bl	8002928 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe ff71 	bl	8002928 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1a8      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4925      	ldr	r1, [pc, #148]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	e015      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_RCC_OscConfig+0x244>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe ff54 	bl	8002928 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a84:	f7fe ff50 	bl	8002928 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e187      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	4b1b      	ldr	r3, [pc, #108]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d036      	beq.n	8003b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_RCC_OscConfig+0x248>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fe ff34 	bl	8002928 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe ff30 	bl	8002928 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e167      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x200>
 8003ae2:	e01b      	b.n	8003b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_OscConfig+0x248>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aea:	f7fe ff1d 	bl	8002928 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	e00e      	b.n	8003b10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af2:	f7fe ff19 	bl	8002928 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d907      	bls.n	8003b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e150      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	42470000 	.word	0x42470000
 8003b0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	4b88      	ldr	r3, [pc, #544]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ea      	bne.n	8003af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8097 	beq.w	8003c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2e:	4b81      	ldr	r3, [pc, #516]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b7d      	ldr	r3, [pc, #500]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a7c      	ldr	r2, [pc, #496]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b7a      	ldr	r3, [pc, #488]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b77      	ldr	r3, [pc, #476]	; (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d118      	bne.n	8003b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b74      	ldr	r3, [pc, #464]	; (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a73      	ldr	r2, [pc, #460]	; (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7fe fed9 	bl	8002928 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7a:	f7fe fed5 	bl	8002928 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e10c      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	4b6a      	ldr	r3, [pc, #424]	; (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x2ea>
 8003ba0:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a63      	ldr	r2, [pc, #396]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bac:	e01c      	b.n	8003be8 <HAL_RCC_OscConfig+0x324>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x30c>
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	4a5e      	ldr	r2, [pc, #376]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc2:	4b5c      	ldr	r3, [pc, #368]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4a5b      	ldr	r2, [pc, #364]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bce:	e00b      	b.n	8003be8 <HAL_RCC_OscConfig+0x324>
 8003bd0:	4b58      	ldr	r3, [pc, #352]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a57      	ldr	r2, [pc, #348]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	4b55      	ldr	r3, [pc, #340]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a54      	ldr	r2, [pc, #336]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003be2:	f023 0304 	bic.w	r3, r3, #4
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fe fe9a 	bl	8002928 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fe96 	bl	8002928 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0cb      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	4b49      	ldr	r3, [pc, #292]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ee      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x334>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1c:	f7fe fe84 	bl	8002928 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fe fe80 	bl	8002928 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e0b5      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ee      	bne.n	8003c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4c:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	4a38      	ldr	r2, [pc, #224]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80a1 	beq.w	8003da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c62:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d05c      	beq.n	8003d28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d141      	bne.n	8003cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fe54 	bl	8002928 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe fe50 	bl	8002928 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e087      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	019b      	lsls	r3, r3, #6
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	041b      	lsls	r3, r3, #16
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	491b      	ldr	r1, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe fe29 	bl	8002928 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fe fe25 	bl	8002928 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e05c      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x416>
 8003cf8:	e054      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe fe12 	bl	8002928 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fe fe0e 	bl	8002928 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e045      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x444>
 8003d26:	e03d      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e038      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d40:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_RCC_OscConfig+0x4ec>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d028      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d121      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d11a      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d111      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800

08003db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0cc      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d90c      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b8      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e08:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a52      	ldr	r2, [pc, #328]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	494d      	ldr	r1, [pc, #308]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d044      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d119      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e06f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e067      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b37      	ldr	r3, [pc, #220]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4934      	ldr	r1, [pc, #208]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fe fd40 	bl	8002928 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7fe fd3c 	bl	8002928 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e04f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d20c      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4916      	ldr	r1, [pc, #88]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f821 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	490a      	ldr	r1, [pc, #40]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fca0 	bl	80028a0 <HAL_InitTick>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023c00 	.word	0x40023c00
 8003f70:	40023800 	.word	0x40023800
 8003f74:	0800e054 	.word	0x0800e054
 8003f78:	2000000c 	.word	0x2000000c
 8003f7c:	20000010 	.word	0x20000010

08003f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f84:	b090      	sub	sp, #64	; 0x40
 8003f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f90:	2300      	movs	r3, #0
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f98:	4b59      	ldr	r3, [pc, #356]	; (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 030c 	and.w	r3, r3, #12
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	f200 80a1 	bhi.w	80040ec <HAL_RCC_GetSysClockFreq+0x16c>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb2:	e09b      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b53      	ldr	r3, [pc, #332]	; (8004104 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fb6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fb8:	e09b      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fba:	4b53      	ldr	r3, [pc, #332]	; (8004108 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fbe:	e098      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc0:	4b4f      	ldr	r3, [pc, #316]	; (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fca:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d028      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd6:	4b4a      	ldr	r3, [pc, #296]	; (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	2200      	movs	r2, #0
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	627a      	str	r2, [r7, #36]	; 0x24
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fec:	fb03 f201 	mul.w	r2, r3, r1
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	fb00 f303 	mul.w	r3, r0, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	4a43      	ldr	r2, [pc, #268]	; (8004108 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ffa:	fba0 1202 	umull	r1, r2, r0, r2
 8003ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004000:	460a      	mov	r2, r1
 8004002:	62ba      	str	r2, [r7, #40]	; 0x28
 8004004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004006:	4413      	add	r3, r2
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	2200      	movs	r2, #0
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	61fa      	str	r2, [r7, #28]
 8004012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004016:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800401a:	f7fc fe3d 	bl	8000c98 <__aeabi_uldivmod>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4613      	mov	r3, r2
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004026:	e053      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004028:	4b35      	ldr	r3, [pc, #212]	; (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	2200      	movs	r2, #0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	617a      	str	r2, [r7, #20]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800403a:	f04f 0b00 	mov.w	fp, #0
 800403e:	4652      	mov	r2, sl
 8004040:	465b      	mov	r3, fp
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	ebb2 080a 	subs.w	r8, r2, sl
 800405a:	eb63 090b 	sbc.w	r9, r3, fp
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800406a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800406e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004072:	ebb2 0408 	subs.w	r4, r2, r8
 8004076:	eb63 0509 	sbc.w	r5, r3, r9
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	00eb      	lsls	r3, r5, #3
 8004084:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004088:	00e2      	lsls	r2, r4, #3
 800408a:	4614      	mov	r4, r2
 800408c:	461d      	mov	r5, r3
 800408e:	eb14 030a 	adds.w	r3, r4, sl
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	eb45 030b 	adc.w	r3, r5, fp
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a6:	4629      	mov	r1, r5
 80040a8:	028b      	lsls	r3, r1, #10
 80040aa:	4621      	mov	r1, r4
 80040ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b0:	4621      	mov	r1, r4
 80040b2:	028a      	lsls	r2, r1, #10
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ba:	2200      	movs	r2, #0
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	60fa      	str	r2, [r7, #12]
 80040c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c4:	f7fc fde8 	bl	8000c98 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4613      	mov	r3, r2
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCC_GetSysClockFreq+0x184>)
 80040ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3740      	adds	r7, #64	; 0x40
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400
 8004108:	017d7840 	.word	0x017d7840

0800410c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	2000000c 	.word	0x2000000c

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a9b      	lsrs	r3, r3, #10
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	0800e064 	.word	0x0800e064

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004150:	f7ff ffdc 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0b5b      	lsrs	r3, r3, #13
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	0800e064 	.word	0x0800e064

08004174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e07b      	b.n	800427e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d108      	bne.n	80041a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004196:	d009      	beq.n	80041ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
 800419e:	e005      	b.n	80041ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe f94c 	bl	8002464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	ea42 0103 	orr.w	r1, r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0104 	and.w	r1, r3, #4
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f003 0210 	and.w	r2, r3, #16
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_SPI_TransmitReceive_IT+0x20>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e075      	b.n	8004394 <HAL_SPI_TransmitReceive_IT+0x10c>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042be:	7dbb      	ldrb	r3, [r7, #22]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d00d      	beq.n	80042e0 <HAL_SPI_TransmitReceive_IT+0x58>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ca:	d106      	bne.n	80042da <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <HAL_SPI_TransmitReceive_IT+0x52>
 80042d4:	7dbb      	ldrb	r3, [r7, #22]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d002      	beq.n	80042e0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80042da:	2302      	movs	r3, #2
 80042dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042de:	e054      	b.n	800438a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80042ec:	887b      	ldrh	r3, [r7, #2]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042f6:	e048      	b.n	800438a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b04      	cmp	r3, #4
 8004302:	d003      	beq.n	800430c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2205      	movs	r2, #5
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	887a      	ldrh	r2, [r7, #2]
 8004322:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	887a      	ldrh	r2, [r7, #2]
 800432e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d006      	beq.n	800434c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a17      	ldr	r2, [pc, #92]	; (80043a4 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
 800434a:	e005      	b.n	8004358 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a16      	ldr	r2, [pc, #88]	; (80043a8 <HAL_SPI_TransmitReceive_IT+0x120>)
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a15      	ldr	r2, [pc, #84]	; (80043ac <HAL_SPI_TransmitReceive_IT+0x124>)
 8004356:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004366:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d008      	beq.n	8004388 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e000      	b.n	800438a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8004388:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004392:	7dfb      	ldrb	r3, [r7, #23]
}
 8004394:	4618      	mov	r0, r3
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	080046c5 	.word	0x080046c5
 80043a4:	08004725 	.word	0x08004725
 80043a8:	08004601 	.word	0x08004601
 80043ac:	08004665 	.word	0x08004665

080043b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
    return;
 80043f2:	e0d7      	b.n	80045a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_SPI_IRQHandler+0x66>
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	09db      	lsrs	r3, r3, #7
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
    return;
 8004414:	e0c6      	b.n	80045a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_SPI_IRQHandler+0x8c>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	099b      	lsrs	r3, r3, #6
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	0a1b      	lsrs	r3, r3, #8
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80b4 	beq.w	80045a4 <HAL_SPI_IRQHandler+0x1f4>
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80ad 	beq.w	80045a4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d023      	beq.n	800449e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b03      	cmp	r3, #3
 8004460:	d011      	beq.n	8004486 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	e00b      	b.n	800449e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	693b      	ldr	r3, [r7, #16]
        return;
 800449c:	e082      	b.n	80045a4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d014      	beq.n	80044d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00c      	beq.n	80044fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f043 0208 	orr.w	r2, r3, #8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d04f      	beq.n	80045a2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004510:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_SPI_IRQHandler+0x17e>
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d034      	beq.n	8004598 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0203 	bic.w	r2, r2, #3
 800453c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454a:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_SPI_IRQHandler+0x1fc>)
 800454c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fb99 	bl	8002c8a <HAL_DMA_Abort_IT>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004576:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_SPI_IRQHandler+0x1fc>)
 8004578:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fb83 	bl	8002c8a <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004596:	e003      	b.n	80045a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f813 	bl	80045c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800459e:	e000      	b.n	80045a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80045a0:	bf00      	nop
    return;
 80045a2:	bf00      	nop
  }
}
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	080045d9 	.word	0x080045d9

080045b0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ffe6 	bl	80045c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f103 020c 	add.w	r2, r3, #12
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	7812      	ldrb	r2, [r2, #0]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10f      	bne.n	800465c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800464a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f95e 	bl	8004918 <SPI_CloseRxTx_ISR>
    }
  }
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	7812      	ldrb	r2, [r2, #0]
 8004678:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10f      	bne.n	80046bc <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046aa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f92e 	bl	8004918 <SPI_CloseRxTx_ISR>
    }
  }
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	b292      	uxth	r2, r2
 80046d8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	1c9a      	adds	r2, r3, #2
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10f      	bne.n	800471c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8fe 	bl	8004918 <SPI_CloseRxTx_ISR>
    }
  }
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004768:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f8cf 	bl	8004918 <SPI_CloseRxTx_ISR>
    }
  }
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004794:	f7fe f8c8 	bl	8002928 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	4413      	add	r3, r2
 80047a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047a4:	f7fe f8c0 	bl	8002928 <HAL_GetTick>
 80047a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047aa:	4b39      	ldr	r3, [pc, #228]	; (8004890 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	015b      	lsls	r3, r3, #5
 80047b0:	0d1b      	lsrs	r3, r3, #20
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ba:	e054      	b.n	8004866 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d050      	beq.n	8004866 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047c4:	f7fe f8b0 	bl	8002928 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d902      	bls.n	80047da <SPI_WaitFlagStateUntilTimeout+0x56>
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d13d      	bne.n	8004856 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f2:	d111      	bne.n	8004818 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047fc:	d004      	beq.n	8004808 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004806:	d107      	bne.n	8004818 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004816:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004820:	d10f      	bne.n	8004842 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004840:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e017      	b.n	8004886 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	3b01      	subs	r3, #1
 8004864:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	429a      	cmp	r2, r3
 8004882:	d19b      	bne.n	80047bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	2000000c 	.word	0x2000000c

08004894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <SPI_EndRxTxTransaction+0x7c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1b      	ldr	r2, [pc, #108]	; (8004914 <SPI_EndRxTxTransaction+0x80>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	0d5b      	lsrs	r3, r3, #21
 80048ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048be:	d112      	bne.n	80048e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff ff5a 	bl	8004784 <SPI_WaitFlagStateUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	f043 0220 	orr.w	r2, r3, #32
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e00f      	b.n	8004906 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fc:	2b80      	cmp	r3, #128	; 0x80
 80048fe:	d0f2      	beq.n	80048e6 <SPI_EndRxTxTransaction+0x52>
 8004900:	e000      	b.n	8004904 <SPI_EndRxTxTransaction+0x70>
        break;
 8004902:	bf00      	nop
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	2000000c 	.word	0x2000000c
 8004914:	165e9f81 	.word	0x165e9f81

08004918 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004920:	4b35      	ldr	r3, [pc, #212]	; (80049f8 <SPI_CloseRxTx_ISR+0xe0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a35      	ldr	r2, [pc, #212]	; (80049fc <SPI_CloseRxTx_ISR+0xe4>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	0a5b      	lsrs	r3, r3, #9
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004934:	f7fd fff8 	bl	8002928 <HAL_GetTick>
 8004938:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0220 	bic.w	r2, r2, #32
 8004948:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800495c:	e009      	b.n	8004972 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3b01      	subs	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0eb      	beq.n	800494a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	2164      	movs	r1, #100	; 0x64
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff ff8c 	bl	8004894 <SPI_EndRxTxTransaction>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d115      	bne.n	80049e0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d107      	bne.n	80049d0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff fdf1 	bl	80045b0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80049ce:	e00e      	b.n	80049ee <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fd fca9 	bl	8002330 <HAL_SPI_TxRxCpltCallback>
}
 80049de:	e006      	b.n	80049ee <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fdeb 	bl	80045c4 <HAL_SPI_ErrorCallback>
}
 80049ee:	bf00      	nop
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	2000000c 	.word	0x2000000c
 80049fc:	057619f1 	.word	0x057619f1

08004a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e041      	b.n	8004a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fd fd6c 	bl	8002504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f000 f8f4 	bl	8004c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_ConfigClockSource+0x1c>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0b4      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x186>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ad8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af2:	d03e      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0xd4>
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	f200 8087 	bhi.w	8004c0a <HAL_TIM_ConfigClockSource+0x16c>
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b00:	f000 8086 	beq.w	8004c10 <HAL_TIM_ConfigClockSource+0x172>
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d87f      	bhi.n	8004c0a <HAL_TIM_ConfigClockSource+0x16c>
 8004b0a:	2b70      	cmp	r3, #112	; 0x70
 8004b0c:	d01a      	beq.n	8004b44 <HAL_TIM_ConfigClockSource+0xa6>
 8004b0e:	2b70      	cmp	r3, #112	; 0x70
 8004b10:	d87b      	bhi.n	8004c0a <HAL_TIM_ConfigClockSource+0x16c>
 8004b12:	2b60      	cmp	r3, #96	; 0x60
 8004b14:	d050      	beq.n	8004bb8 <HAL_TIM_ConfigClockSource+0x11a>
 8004b16:	2b60      	cmp	r3, #96	; 0x60
 8004b18:	d877      	bhi.n	8004c0a <HAL_TIM_ConfigClockSource+0x16c>
 8004b1a:	2b50      	cmp	r3, #80	; 0x50
 8004b1c:	d03c      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0xfa>
 8004b1e:	2b50      	cmp	r3, #80	; 0x50
 8004b20:	d873      	bhi.n	8004c0a <HAL_TIM_ConfigClockSource+0x16c>
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d058      	beq.n	8004bd8 <HAL_TIM_ConfigClockSource+0x13a>
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d86f      	bhi.n	8004c0a <HAL_TIM_ConfigClockSource+0x16c>
 8004b2a:	2b30      	cmp	r3, #48	; 0x30
 8004b2c:	d064      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0x15a>
 8004b2e:	2b30      	cmp	r3, #48	; 0x30
 8004b30:	d86b      	bhi.n	8004c0a <HAL_TIM_ConfigClockSource+0x16c>
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d060      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0x15a>
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d867      	bhi.n	8004c0a <HAL_TIM_ConfigClockSource+0x16c>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d05c      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0x15a>
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d05a      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0x15a>
 8004b42:	e062      	b.n	8004c0a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	6899      	ldr	r1, [r3, #8]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f000 f964 	bl	8004e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
      break;
 8004b70:	e04f      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6899      	ldr	r1, [r3, #8]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f000 f94d 	bl	8004e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b94:	609a      	str	r2, [r3, #8]
      break;
 8004b96:	e03c      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f000 f8c1 	bl	8004d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2150      	movs	r1, #80	; 0x50
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 f91a 	bl	8004dea <TIM_ITRx_SetConfig>
      break;
 8004bb6:	e02c      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6859      	ldr	r1, [r3, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f000 f8e0 	bl	8004d8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2160      	movs	r1, #96	; 0x60
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 f90a 	bl	8004dea <TIM_ITRx_SetConfig>
      break;
 8004bd6:	e01c      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	461a      	mov	r2, r3
 8004be6:	f000 f8a1 	bl	8004d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2140      	movs	r1, #64	; 0x40
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f8fa 	bl	8004dea <TIM_ITRx_SetConfig>
      break;
 8004bf6:	e00c      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f000 f8f1 	bl	8004dea <TIM_ITRx_SetConfig>
      break;
 8004c08:	e003      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0e:	e000      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a34      	ldr	r2, [pc, #208]	; (8004d10 <TIM_Base_SetConfig+0xe4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00f      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4a:	d00b      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a31      	ldr	r2, [pc, #196]	; (8004d14 <TIM_Base_SetConfig+0xe8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a30      	ldr	r2, [pc, #192]	; (8004d18 <TIM_Base_SetConfig+0xec>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <TIM_Base_SetConfig+0xf0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d108      	bne.n	8004c76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <TIM_Base_SetConfig+0xe4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d017      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <TIM_Base_SetConfig+0xe8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <TIM_Base_SetConfig+0xec>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00f      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a20      	ldr	r2, [pc, #128]	; (8004d1c <TIM_Base_SetConfig+0xf0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <TIM_Base_SetConfig+0xf4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a1e      	ldr	r2, [pc, #120]	; (8004d24 <TIM_Base_SetConfig+0xf8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	; (8004d28 <TIM_Base_SetConfig+0xfc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d108      	bne.n	8004cc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <TIM_Base_SetConfig+0xe4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d103      	bne.n	8004cfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	615a      	str	r2, [r3, #20]
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800

08004d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 030a 	bic.w	r3, r3, #10
 8004d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b087      	sub	sp, #28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f023 0210 	bic.w	r2, r3, #16
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	031b      	lsls	r3, r3, #12
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f043 0307 	orr.w	r3, r3, #7
 8004e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	609a      	str	r2, [r3, #8]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	021a      	lsls	r2, r3, #8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	609a      	str	r2, [r3, #8]
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e050      	b.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d018      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec4:	d013      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d10c      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40000800 	.word	0x40000800
 8004f34:	40000c00 	.word	0x40000c00
 8004f38:	40014000 	.word	0x40014000

08004f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e03f      	b.n	8004fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fd faf0 	bl	8002548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2224      	movs	r2, #36	; 0x24
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fddf 	bl	8005b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b08a      	sub	sp, #40	; 0x28
 8004fda:	af02      	add	r7, sp, #8
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d17c      	bne.n	80050f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_UART_Transmit+0x2c>
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e075      	b.n	80050f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_UART_Transmit+0x3e>
 8005010:	2302      	movs	r3, #2
 8005012:	e06e      	b.n	80050f2 <HAL_UART_Transmit+0x11c>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2221      	movs	r2, #33	; 0x21
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800502a:	f7fd fc7d 	bl	8002928 <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	88fa      	ldrh	r2, [r7, #6]
 800503a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d108      	bne.n	8005058 <HAL_UART_Transmit+0x82>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	e003      	b.n	8005060 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005068:	e02a      	b.n	80050c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	2180      	movs	r1, #128	; 0x80
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fb1f 	bl	80056b8 <UART_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e036      	b.n	80050f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005098:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	3302      	adds	r3, #2
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	e007      	b.n	80050b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	3301      	adds	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1cf      	bne.n	800506a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2200      	movs	r2, #0
 80050d2:	2140      	movs	r1, #64	; 0x40
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 faef 	bl	80056b8 <UART_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e006      	b.n	80050f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	4613      	mov	r3, r2
 8005106:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b20      	cmp	r3, #32
 8005112:	d11d      	bne.n	8005150 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_UART_Receive_IT+0x26>
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e016      	b.n	8005152 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_UART_Receive_IT+0x38>
 800512e:	2302      	movs	r3, #2
 8005130:	e00f      	b.n	8005152 <HAL_UART_Receive_IT+0x58>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	461a      	mov	r2, r3
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 fb24 	bl	8005794 <UART_Start_Receive_IT>
 800514c:	4603      	mov	r3, r0
 800514e:	e000      	b.n	8005152 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
  }
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b0ba      	sub	sp, #232	; 0xe8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005182:	2300      	movs	r3, #0
 8005184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005188:	2300      	movs	r3, #0
 800518a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800519a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_UART_IRQHandler+0x66>
 80051ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fc07 	bl	80059ce <UART_Receive_IT>
      return;
 80051c0:	e256      	b.n	8005670 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80de 	beq.w	8005388 <HAL_UART_IRQHandler+0x22c>
 80051cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80d1 	beq.w	8005388 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <HAL_UART_IRQHandler+0xae>
 80051f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f043 0201 	orr.w	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800520a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00b      	beq.n	800522e <HAL_UART_IRQHandler+0xd2>
 8005216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f043 0202 	orr.w	r2, r3, #2
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <HAL_UART_IRQHandler+0xf6>
 800523a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f043 0204 	orr.w	r2, r3, #4
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d011      	beq.n	8005282 <HAL_UART_IRQHandler+0x126>
 800525e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d105      	bne.n	8005276 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800526a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0208 	orr.w	r2, r3, #8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 81ed 	beq.w	8005666 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_UART_IRQHandler+0x14e>
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fb92 	bl	80059ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <HAL_UART_IRQHandler+0x17a>
 80052ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d04f      	beq.n	8005376 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa9a 	bl	8005810 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d141      	bne.n	800536e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3314      	adds	r3, #20
 80052f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005316:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800531a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800532e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1d9      	bne.n	80052ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	2b00      	cmp	r3, #0
 800533c:	d013      	beq.n	8005366 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	4a7d      	ldr	r2, [pc, #500]	; (8005538 <HAL_UART_IRQHandler+0x3dc>)
 8005344:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	4618      	mov	r0, r3
 800534c:	f7fd fc9d 	bl	8002c8a <HAL_DMA_Abort_IT>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d016      	beq.n	8005384 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005360:	4610      	mov	r0, r2
 8005362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	e00e      	b.n	8005384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f990 	bl	800568c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	e00a      	b.n	8005384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f98c 	bl	800568c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	e006      	b.n	8005384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f988 	bl	800568c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005382:	e170      	b.n	8005666 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	bf00      	nop
    return;
 8005386:	e16e      	b.n	8005666 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	2b01      	cmp	r3, #1
 800538e:	f040 814a 	bne.w	8005626 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 8143 	beq.w	8005626 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 813c 	beq.w	8005626 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	f040 80b4 	bne.w	800553c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8140 	beq.w	800566a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053f2:	429a      	cmp	r2, r3
 80053f4:	f080 8139 	bcs.w	800566a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540a:	f000 8088 	beq.w	800551e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800542c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800543a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800543e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1d9      	bne.n	800540e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3314      	adds	r3, #20
 8005460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800546a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800547e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e1      	bne.n	800545a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3314      	adds	r3, #20
 800549c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3314      	adds	r3, #20
 80054b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e3      	bne.n	8005496 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ee:	f023 0310 	bic.w	r3, r3, #16
 80054f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005500:	65ba      	str	r2, [r7, #88]	; 0x58
 8005502:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005506:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800550e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e3      	bne.n	80054dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	4618      	mov	r0, r3
 800551a:	f7fd fb46 	bl	8002baa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005526:	b29b      	uxth	r3, r3
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	b29b      	uxth	r3, r3
 800552c:	4619      	mov	r1, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f8b6 	bl	80056a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005534:	e099      	b.n	800566a <HAL_UART_IRQHandler+0x50e>
 8005536:	bf00      	nop
 8005538:	080058d7 	.word	0x080058d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005544:	b29b      	uxth	r3, r3
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 808b 	beq.w	800566e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8086 	beq.w	800566e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005586:	647a      	str	r2, [r7, #68]	; 0x44
 8005588:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800558c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e3      	bne.n	8005562 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3314      	adds	r3, #20
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	623b      	str	r3, [r7, #32]
   return(result);
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3314      	adds	r3, #20
 80055ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055be:	633a      	str	r2, [r7, #48]	; 0x30
 80055c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e3      	bne.n	800559a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0310 	bic.w	r3, r3, #16
 80055f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	330c      	adds	r3, #12
 8005600:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005604:	61fa      	str	r2, [r7, #28]
 8005606:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	69b9      	ldr	r1, [r7, #24]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	617b      	str	r3, [r7, #20]
   return(result);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e3      	bne.n	80055e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f83e 	bl	80056a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005624:	e023      	b.n	800566e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_UART_IRQHandler+0x4ea>
 8005632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f95d 	bl	80058fe <UART_Transmit_IT>
    return;
 8005644:	e014      	b.n	8005670 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00e      	beq.n	8005670 <HAL_UART_IRQHandler+0x514>
 8005652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f99d 	bl	800599e <UART_EndTransmit_IT>
    return;
 8005664:	e004      	b.n	8005670 <HAL_UART_IRQHandler+0x514>
    return;
 8005666:	bf00      	nop
 8005668:	e002      	b.n	8005670 <HAL_UART_IRQHandler+0x514>
      return;
 800566a:	bf00      	nop
 800566c:	e000      	b.n	8005670 <HAL_UART_IRQHandler+0x514>
      return;
 800566e:	bf00      	nop
  }
}
 8005670:	37e8      	adds	r7, #232	; 0xe8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop

08005678 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b090      	sub	sp, #64	; 0x40
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c8:	e050      	b.n	800576c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d04c      	beq.n	800576c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056d8:	f7fd f926 	bl	8002928 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d241      	bcs.n	800576c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	330c      	adds	r3, #12
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005708:	637a      	str	r2, [r7, #52]	; 0x34
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800570e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e5      	bne.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3314      	adds	r3, #20
 8005722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	613b      	str	r3, [r7, #16]
   return(result);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	63bb      	str	r3, [r7, #56]	; 0x38
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3314      	adds	r3, #20
 800573a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800573c:	623a      	str	r2, [r7, #32]
 800573e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	69f9      	ldr	r1, [r7, #28]
 8005742:	6a3a      	ldr	r2, [r7, #32]
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	61bb      	str	r3, [r7, #24]
   return(result);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e00f      	b.n	800578c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4013      	ands	r3, r2
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	429a      	cmp	r2, r3
 8005788:	d09f      	beq.n	80056ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3740      	adds	r7, #64	; 0x40
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	4613      	mov	r3, r2
 80057a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	88fa      	ldrh	r2, [r7, #6]
 80057ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	88fa      	ldrh	r2, [r7, #6]
 80057b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2222      	movs	r2, #34	; 0x22
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695a      	ldr	r2, [r3, #20]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0201 	orr.w	r2, r2, #1
 80057f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0220 	orr.w	r2, r2, #32
 8005800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b095      	sub	sp, #84	; 0x54
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800582e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005838:	643a      	str	r2, [r7, #64]	; 0x40
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800583e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e5      	bne.n	8005818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	61fb      	str	r3, [r7, #28]
   return(result);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	64bb      	str	r3, [r7, #72]	; 0x48
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800586c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	2b01      	cmp	r3, #1
 8005886:	d119      	bne.n	80058bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	60bb      	str	r3, [r7, #8]
   return(result);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f023 0310 	bic.w	r3, r3, #16
 800589e:	647b      	str	r3, [r7, #68]	; 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058a8:	61ba      	str	r2, [r7, #24]
 80058aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6979      	ldr	r1, [r7, #20]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	613b      	str	r3, [r7, #16]
   return(result);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e5      	bne.n	8005888 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058ca:	bf00      	nop
 80058cc:	3754      	adds	r7, #84	; 0x54
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff fecb 	bl	800568c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b21      	cmp	r3, #33	; 0x21
 8005910:	d13e      	bne.n	8005990 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591a:	d114      	bne.n	8005946 <UART_Transmit_IT+0x48>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d110      	bne.n	8005946 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005938:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	1c9a      	adds	r2, r3, #2
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]
 8005944:	e008      	b.n	8005958 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6211      	str	r1, [r2, #32]
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29b      	uxth	r3, r3
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4619      	mov	r1, r3
 8005966:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10f      	bne.n	800598c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800597a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800598a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	e000      	b.n	8005992 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005990:	2302      	movs	r3, #2
  }
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fe5a 	bl	8005678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08c      	sub	sp, #48	; 0x30
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b22      	cmp	r3, #34	; 0x22
 80059e0:	f040 80ab 	bne.w	8005b3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ec:	d117      	bne.n	8005a1e <UART_Receive_IT+0x50>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d113      	bne.n	8005a1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	1c9a      	adds	r2, r3, #2
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a1c:	e026      	b.n	8005a6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a30:	d007      	beq.n	8005a42 <UART_Receive_IT+0x74>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <UART_Receive_IT+0x82>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	e008      	b.n	8005a62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d15a      	bne.n	8005b36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0220 	bic.w	r2, r2, #32
 8005a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d135      	bne.n	8005b2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f023 0310 	bic.w	r3, r3, #16
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	623a      	str	r2, [r7, #32]
 8005ae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	69f9      	ldr	r1, [r7, #28]
 8005aec:	6a3a      	ldr	r2, [r7, #32]
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d10a      	bne.n	8005b1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fdbb 	bl	80056a0 <HAL_UARTEx_RxEventCallback>
 8005b2a:	e002      	b.n	8005b32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fc fb53 	bl	80021d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	e002      	b.n	8005b3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3730      	adds	r7, #48	; 0x30
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b48:	b0c0      	sub	sp, #256	; 0x100
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	68d9      	ldr	r1, [r3, #12]
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	ea40 0301 	orr.w	r3, r0, r1
 8005b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b9c:	f021 010c 	bic.w	r1, r1, #12
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005baa:	430b      	orrs	r3, r1
 8005bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbe:	6999      	ldr	r1, [r3, #24]
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	ea40 0301 	orr.w	r3, r0, r1
 8005bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b8f      	ldr	r3, [pc, #572]	; (8005e10 <UART_SetConfig+0x2cc>)
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d005      	beq.n	8005be4 <UART_SetConfig+0xa0>
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b8d      	ldr	r3, [pc, #564]	; (8005e14 <UART_SetConfig+0x2d0>)
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d104      	bne.n	8005bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7fe fab2 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 8005be8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bec:	e003      	b.n	8005bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bee:	f7fe fa99 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c00:	f040 810c 	bne.w	8005e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c16:	4622      	mov	r2, r4
 8005c18:	462b      	mov	r3, r5
 8005c1a:	1891      	adds	r1, r2, r2
 8005c1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c1e:	415b      	adcs	r3, r3
 8005c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c26:	4621      	mov	r1, r4
 8005c28:	eb12 0801 	adds.w	r8, r2, r1
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	eb43 0901 	adc.w	r9, r3, r1
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c46:	4690      	mov	r8, r2
 8005c48:	4699      	mov	r9, r3
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	eb18 0303 	adds.w	r3, r8, r3
 8005c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c54:	462b      	mov	r3, r5
 8005c56:	eb49 0303 	adc.w	r3, r9, r3
 8005c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c72:	460b      	mov	r3, r1
 8005c74:	18db      	adds	r3, r3, r3
 8005c76:	653b      	str	r3, [r7, #80]	; 0x50
 8005c78:	4613      	mov	r3, r2
 8005c7a:	eb42 0303 	adc.w	r3, r2, r3
 8005c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c88:	f7fb f806 	bl	8000c98 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4b61      	ldr	r3, [pc, #388]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005c92:	fba3 2302 	umull	r2, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	011c      	lsls	r4, r3, #4
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cdc:	4692      	mov	sl, r2
 8005cde:	469b      	mov	fp, r3
 8005ce0:	4643      	mov	r3, r8
 8005ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cea:	464b      	mov	r3, r9
 8005cec:	eb4b 0303 	adc.w	r3, fp, r3
 8005cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	18db      	adds	r3, r3, r3
 8005d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0e:	4613      	mov	r3, r2
 8005d10:	eb42 0303 	adc.w	r3, r2, r3
 8005d14:	647b      	str	r3, [r7, #68]	; 0x44
 8005d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d1e:	f7fa ffbb 	bl	8000c98 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	4b3b      	ldr	r3, [pc, #236]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2264      	movs	r2, #100	; 0x64
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	1acb      	subs	r3, r1, r3
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d3e:	4b36      	ldr	r3, [pc, #216]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005d40:	fba3 2302 	umull	r2, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d4c:	441c      	add	r4, r3
 8005d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d70:	4641      	mov	r1, r8
 8005d72:	1851      	adds	r1, r2, r1
 8005d74:	6339      	str	r1, [r7, #48]	; 0x30
 8005d76:	4649      	mov	r1, r9
 8005d78:	414b      	adcs	r3, r1
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d88:	4659      	mov	r1, fp
 8005d8a:	00cb      	lsls	r3, r1, #3
 8005d8c:	4651      	mov	r1, sl
 8005d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d92:	4651      	mov	r1, sl
 8005d94:	00ca      	lsls	r2, r1, #3
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	189b      	adds	r3, r3, r2
 8005da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005da4:	464b      	mov	r3, r9
 8005da6:	460a      	mov	r2, r1
 8005da8:	eb42 0303 	adc.w	r3, r2, r3
 8005dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	18db      	adds	r3, r3, r3
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dca:	4613      	mov	r3, r2
 8005dcc:	eb42 0303 	adc.w	r3, r2, r3
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dda:	f7fa ff5d 	bl	8000c98 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005de4:	fba3 1302 	umull	r1, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	2164      	movs	r1, #100	; 0x64
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	3332      	adds	r3, #50	; 0x32
 8005df6:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	f003 0207 	and.w	r2, r3, #7
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4422      	add	r2, r4
 8005e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e0c:	e105      	b.n	800601a <UART_SetConfig+0x4d6>
 8005e0e:	bf00      	nop
 8005e10:	40011000 	.word	0x40011000
 8005e14:	40011400 	.word	0x40011400
 8005e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e2e:	4642      	mov	r2, r8
 8005e30:	464b      	mov	r3, r9
 8005e32:	1891      	adds	r1, r2, r2
 8005e34:	6239      	str	r1, [r7, #32]
 8005e36:	415b      	adcs	r3, r3
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e3e:	4641      	mov	r1, r8
 8005e40:	1854      	adds	r4, r2, r1
 8005e42:	4649      	mov	r1, r9
 8005e44:	eb43 0501 	adc.w	r5, r3, r1
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	00eb      	lsls	r3, r5, #3
 8005e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e56:	00e2      	lsls	r2, r4, #3
 8005e58:	4614      	mov	r4, r2
 8005e5a:	461d      	mov	r5, r3
 8005e5c:	4643      	mov	r3, r8
 8005e5e:	18e3      	adds	r3, r4, r3
 8005e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e64:	464b      	mov	r3, r9
 8005e66:	eb45 0303 	adc.w	r3, r5, r3
 8005e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	008b      	lsls	r3, r1, #2
 8005e8e:	4621      	mov	r1, r4
 8005e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e94:	4621      	mov	r1, r4
 8005e96:	008a      	lsls	r2, r1, #2
 8005e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e9c:	f7fa fefc 	bl	8000c98 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4b60      	ldr	r3, [pc, #384]	; (8006028 <UART_SetConfig+0x4e4>)
 8005ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	011c      	lsls	r4, r3, #4
 8005eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005eb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	1891      	adds	r1, r2, r2
 8005ec6:	61b9      	str	r1, [r7, #24]
 8005ec8:	415b      	adcs	r3, r3
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	1851      	adds	r1, r2, r1
 8005ed4:	6139      	str	r1, [r7, #16]
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	414b      	adcs	r3, r1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee8:	4659      	mov	r1, fp
 8005eea:	00cb      	lsls	r3, r1, #3
 8005eec:	4651      	mov	r1, sl
 8005eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef2:	4651      	mov	r1, sl
 8005ef4:	00ca      	lsls	r2, r1, #3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	4642      	mov	r2, r8
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f04:	464b      	mov	r3, r9
 8005f06:	460a      	mov	r2, r1
 8005f08:	eb42 0303 	adc.w	r3, r2, r3
 8005f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f28:	4649      	mov	r1, r9
 8005f2a:	008b      	lsls	r3, r1, #2
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f32:	4641      	mov	r1, r8
 8005f34:	008a      	lsls	r2, r1, #2
 8005f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f3a:	f7fa fead 	bl	8000c98 <__aeabi_uldivmod>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4b39      	ldr	r3, [pc, #228]	; (8006028 <UART_SetConfig+0x4e4>)
 8005f44:	fba3 1302 	umull	r1, r3, r3, r2
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	2164      	movs	r1, #100	; 0x64
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	3332      	adds	r3, #50	; 0x32
 8005f56:	4a34      	ldr	r2, [pc, #208]	; (8006028 <UART_SetConfig+0x4e4>)
 8005f58:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f62:	441c      	add	r4, r3
 8005f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f68:	2200      	movs	r2, #0
 8005f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f6c:	677a      	str	r2, [r7, #116]	; 0x74
 8005f6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f72:	4642      	mov	r2, r8
 8005f74:	464b      	mov	r3, r9
 8005f76:	1891      	adds	r1, r2, r2
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	415b      	adcs	r3, r3
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f82:	4641      	mov	r1, r8
 8005f84:	1851      	adds	r1, r2, r1
 8005f86:	6039      	str	r1, [r7, #0]
 8005f88:	4649      	mov	r1, r9
 8005f8a:	414b      	adcs	r3, r1
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f9a:	4659      	mov	r1, fp
 8005f9c:	00cb      	lsls	r3, r1, #3
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	00ca      	lsls	r2, r1, #3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	4642      	mov	r2, r8
 8005fb0:	189b      	adds	r3, r3, r2
 8005fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fb4:	464b      	mov	r3, r9
 8005fb6:	460a      	mov	r2, r1
 8005fb8:	eb42 0303 	adc.w	r3, r2, r3
 8005fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc8:	667a      	str	r2, [r7, #100]	; 0x64
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	008b      	lsls	r3, r1, #2
 8005fda:	4641      	mov	r1, r8
 8005fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	008a      	lsls	r2, r1, #2
 8005fe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fe8:	f7fa fe56 	bl	8000c98 <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <UART_SetConfig+0x4e4>)
 8005ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2164      	movs	r1, #100	; 0x64
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	3332      	adds	r3, #50	; 0x32
 8006004:	4a08      	ldr	r2, [pc, #32]	; (8006028 <UART_SetConfig+0x4e4>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	f003 020f 	and.w	r2, r3, #15
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4422      	add	r2, r4
 8006018:	609a      	str	r2, [r3, #8]
}
 800601a:	bf00      	nop
 800601c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006020:	46bd      	mov	sp, r7
 8006022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006026:	bf00      	nop
 8006028:	51eb851f 	.word	0x51eb851f

0800602c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800603a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800603e:	2b84      	cmp	r3, #132	; 0x84
 8006040:	d005      	beq.n	800604e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006042:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	3303      	adds	r3, #3
 800604c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800604e:	68fb      	ldr	r3, [r7, #12]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006060:	f001 f804 	bl	800706c <vTaskStartScheduler>
  
  return osOK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	bd80      	pop	{r7, pc}

0800606a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800606a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606c:	b089      	sub	sp, #36	; 0x24
 800606e:	af04      	add	r7, sp, #16
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d020      	beq.n	80060be <osThreadCreate+0x54>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01c      	beq.n	80060be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685c      	ldr	r4, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681d      	ldr	r5, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691e      	ldr	r6, [r3, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff ffc8 	bl	800602c <makeFreeRtosPriority>
 800609c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060a6:	9202      	str	r2, [sp, #8]
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	9100      	str	r1, [sp, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	4632      	mov	r2, r6
 80060b0:	4629      	mov	r1, r5
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 fe12 	bl	8006cdc <xTaskCreateStatic>
 80060b8:	4603      	mov	r3, r0
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	e01c      	b.n	80060f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685c      	ldr	r4, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060ca:	b29e      	uxth	r6, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff ffaa 	bl	800602c <makeFreeRtosPriority>
 80060d8:	4602      	mov	r2, r0
 80060da:	f107 030c 	add.w	r3, r7, #12
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	9200      	str	r2, [sp, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	4632      	mov	r2, r6
 80060e6:	4629      	mov	r1, r5
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 fe54 	bl	8006d96 <xTaskCreate>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d001      	beq.n	80060f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e000      	b.n	80060fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80060f8:	68fb      	ldr	r3, [r7, #12]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006102 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <osDelay+0x16>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	e000      	b.n	800611a <osDelay+0x18>
 8006118:	2301      	movs	r3, #1
 800611a:	4618      	mov	r0, r3
 800611c:	f000 ff72 	bl	8007004 <vTaskDelay>
  
  return osOK;
 8006120:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f103 0208 	add.w	r2, r3, #8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f04f 32ff 	mov.w	r2, #4294967295
 8006142:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f103 0208 	add.w	r2, r3, #8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f103 0208 	add.w	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	601a      	str	r2, [r3, #0]
}
 80061c0:	bf00      	nop
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d103      	bne.n	80061ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e00c      	b.n	8006206 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3308      	adds	r3, #8
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	e002      	b.n	80061fa <vListInsert+0x2e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	d2f6      	bcs.n	80061f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
}
 8006232:	bf00      	nop
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6892      	ldr	r2, [r2, #8]
 8006254:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6852      	ldr	r2, [r2, #4]
 800625e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d103      	bne.n	8006272 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	1e5a      	subs	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062be:	f001 fe21 	bl	8007f04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	441a      	add	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	3b01      	subs	r3, #1
 80062f0:	68f9      	ldr	r1, [r7, #12]
 80062f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	441a      	add	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	22ff      	movs	r2, #255	; 0xff
 8006302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	22ff      	movs	r2, #255	; 0xff
 800630a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d114      	bne.n	800633e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01a      	beq.n	8006352 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3310      	adds	r3, #16
 8006320:	4618      	mov	r0, r3
 8006322:	f001 f8e5 	bl	80074f0 <xTaskRemoveFromEventList>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d012      	beq.n	8006352 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <xQueueGenericReset+0xcc>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	e009      	b.n	8006352 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3310      	adds	r3, #16
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fef1 	bl	800612a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff feec 	bl	800612a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006352:	f001 fe07 	bl	8007f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006356:	2301      	movs	r3, #1
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af02      	add	r7, sp, #8
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	613b      	str	r3, [r7, #16]
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	fb02 f303 	mul.w	r3, r2, r3
 8006396:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	3348      	adds	r3, #72	; 0x48
 800639c:	4618      	mov	r0, r3
 800639e:	f001 fe93 	bl	80080c8 <pvPortMalloc>
 80063a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d011      	beq.n	80063ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	3348      	adds	r3, #72	; 0x48
 80063b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063bc:	79fa      	ldrb	r2, [r7, #7]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	4613      	mov	r3, r2
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f805 	bl	80063d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063ce:	69bb      	ldr	r3, [r7, #24]
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3720      	adds	r7, #32
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d103      	bne.n	80063f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e002      	b.n	80063fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006406:	2101      	movs	r1, #1
 8006408:	69b8      	ldr	r0, [r7, #24]
 800640a:	f7ff ff43 	bl	8006294 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00e      	beq.n	8006442 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006436:	2300      	movs	r3, #0
 8006438:	2200      	movs	r2, #0
 800643a:	2100      	movs	r1, #0
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f81d 	bl	800647c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800644a:	b580      	push	{r7, lr}
 800644c:	b086      	sub	sp, #24
 800644e:	af00      	add	r7, sp, #0
 8006450:	4603      	mov	r3, r0
 8006452:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006454:	2301      	movs	r3, #1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	2300      	movs	r3, #0
 800645a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	461a      	mov	r2, r3
 8006460:	6939      	ldr	r1, [r7, #16]
 8006462:	6978      	ldr	r0, [r7, #20]
 8006464:	f7ff ff7e 	bl	8006364 <xQueueGenericCreate>
 8006468:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7ff ffd3 	bl	8006416 <prvInitialiseMutex>

		return xNewQueue;
 8006470:	68fb      	ldr	r3, [r7, #12]
	}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08e      	sub	sp, #56	; 0x38
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800648a:	2300      	movs	r3, #0
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <xQueueGenericSend+0x32>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <xQueueGenericSend+0x40>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <xQueueGenericSend+0x44>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <xQueueGenericSend+0x46>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <xQueueGenericSend+0x60>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d103      	bne.n	80064ea <xQueueGenericSend+0x6e>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <xQueueGenericSend+0x72>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <xQueueGenericSend+0x74>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xQueueGenericSend+0x8e>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	623b      	str	r3, [r7, #32]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800650a:	f001 f9ad 	bl	8007868 <xTaskGetSchedulerState>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d102      	bne.n	800651a <xQueueGenericSend+0x9e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <xQueueGenericSend+0xa2>
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <xQueueGenericSend+0xa4>
 800651e:	2300      	movs	r3, #0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10a      	bne.n	800653a <xQueueGenericSend+0xbe>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	61fb      	str	r3, [r7, #28]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800653a:	f001 fce3 	bl	8007f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	429a      	cmp	r2, r3
 8006548:	d302      	bcc.n	8006550 <xQueueGenericSend+0xd4>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d129      	bne.n	80065a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006556:	f000 fab1 	bl	8006abc <prvCopyDataToQueue>
 800655a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d010      	beq.n	8006586 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	3324      	adds	r3, #36	; 0x24
 8006568:	4618      	mov	r0, r3
 800656a:	f000 ffc1 	bl	80074f0 <xTaskRemoveFromEventList>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d013      	beq.n	800659c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006574:	4b3f      	ldr	r3, [pc, #252]	; (8006674 <xQueueGenericSend+0x1f8>)
 8006576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	e00a      	b.n	800659c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800658c:	4b39      	ldr	r3, [pc, #228]	; (8006674 <xQueueGenericSend+0x1f8>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800659c:	f001 fce2 	bl	8007f64 <vPortExitCritical>
				return pdPASS;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e063      	b.n	800666c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065aa:	f001 fcdb 	bl	8007f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e05c      	b.n	800666c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065b8:	f107 0314 	add.w	r3, r7, #20
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fff9 	bl	80075b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065c2:	2301      	movs	r3, #1
 80065c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065c6:	f001 fccd 	bl	8007f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065ca:	f000 fdaf 	bl	800712c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ce:	f001 fc99 	bl	8007f04 <vPortEnterCritical>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065d8:	b25b      	sxtb	r3, r3
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d103      	bne.n	80065e8 <xQueueGenericSend+0x16c>
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ee:	b25b      	sxtb	r3, r3
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d103      	bne.n	80065fe <xQueueGenericSend+0x182>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065fe:	f001 fcb1 	bl	8007f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006602:	1d3a      	adds	r2, r7, #4
 8006604:	f107 0314 	add.w	r3, r7, #20
 8006608:	4611      	mov	r1, r2
 800660a:	4618      	mov	r0, r3
 800660c:	f000 ffe8 	bl	80075e0 <xTaskCheckForTimeOut>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d124      	bne.n	8006660 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006618:	f000 fb48 	bl	8006cac <prvIsQueueFull>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d018      	beq.n	8006654 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	3310      	adds	r3, #16
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f000 ff3c 	bl	80074a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006632:	f000 fad3 	bl	8006bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006636:	f000 fd87 	bl	8007148 <xTaskResumeAll>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	f47f af7c 	bne.w	800653a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006642:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <xQueueGenericSend+0x1f8>)
 8006644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	e772      	b.n	800653a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006656:	f000 fac1 	bl	8006bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800665a:	f000 fd75 	bl	8007148 <xTaskResumeAll>
 800665e:	e76c      	b.n	800653a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006662:	f000 fabb 	bl	8006bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006666:	f000 fd6f 	bl	8007148 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800666a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800666c:	4618      	mov	r0, r3
 800666e:	3738      	adds	r7, #56	; 0x38
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	e000ed04 	.word	0xe000ed04

08006678 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08c      	sub	sp, #48	; 0x30
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <xQueueReceive+0x30>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	623b      	str	r3, [r7, #32]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <xQueueReceive+0x3e>
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <xQueueReceive+0x42>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <xQueueReceive+0x44>
 80066ba:	2300      	movs	r3, #0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <xQueueReceive+0x5e>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	61fb      	str	r3, [r7, #28]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066d6:	f001 f8c7 	bl	8007868 <xTaskGetSchedulerState>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <xQueueReceive+0x6e>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <xQueueReceive+0x72>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <xQueueReceive+0x74>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueReceive+0x8e>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61bb      	str	r3, [r7, #24]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006706:	f001 fbfd 	bl	8007f04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01f      	beq.n	8006756 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671a:	f000 fa39 	bl	8006b90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	1e5a      	subs	r2, r3, #1
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00f      	beq.n	800674e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	3310      	adds	r3, #16
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fedc 	bl	80074f0 <xTaskRemoveFromEventList>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800673e:	4b3d      	ldr	r3, [pc, #244]	; (8006834 <xQueueReceive+0x1bc>)
 8006740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800674e:	f001 fc09 	bl	8007f64 <vPortExitCritical>
				return pdPASS;
 8006752:	2301      	movs	r3, #1
 8006754:	e069      	b.n	800682a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d103      	bne.n	8006764 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800675c:	f001 fc02 	bl	8007f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006760:	2300      	movs	r3, #0
 8006762:	e062      	b.n	800682a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800676a:	f107 0310 	add.w	r3, r7, #16
 800676e:	4618      	mov	r0, r3
 8006770:	f000 ff20 	bl	80075b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006778:	f001 fbf4 	bl	8007f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800677c:	f000 fcd6 	bl	800712c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006780:	f001 fbc0 	bl	8007f04 <vPortEnterCritical>
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800678a:	b25b      	sxtb	r3, r3
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d103      	bne.n	800679a <xQueueReceive+0x122>
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a0:	b25b      	sxtb	r3, r3
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a6:	d103      	bne.n	80067b0 <xQueueReceive+0x138>
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067b0:	f001 fbd8 	bl	8007f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067b4:	1d3a      	adds	r2, r7, #4
 80067b6:	f107 0310 	add.w	r3, r7, #16
 80067ba:	4611      	mov	r1, r2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ff0f 	bl	80075e0 <xTaskCheckForTimeOut>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d123      	bne.n	8006810 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ca:	f000 fa59 	bl	8006c80 <prvIsQueueEmpty>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d017      	beq.n	8006804 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	3324      	adds	r3, #36	; 0x24
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4611      	mov	r1, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fe63 	bl	80074a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e4:	f000 f9fa 	bl	8006bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067e8:	f000 fcae 	bl	8007148 <xTaskResumeAll>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d189      	bne.n	8006706 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <xQueueReceive+0x1bc>)
 80067f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	e780      	b.n	8006706 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006806:	f000 f9e9 	bl	8006bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800680a:	f000 fc9d 	bl	8007148 <xTaskResumeAll>
 800680e:	e77a      	b.n	8006706 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006812:	f000 f9e3 	bl	8006bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006816:	f000 fc97 	bl	8007148 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800681a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800681c:	f000 fa30 	bl	8006c80 <prvIsQueueEmpty>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	f43f af6f 	beq.w	8006706 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006828:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800682a:	4618      	mov	r0, r3
 800682c:	3730      	adds	r7, #48	; 0x30
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08e      	sub	sp, #56	; 0x38
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800684a:	2300      	movs	r3, #0
 800684c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	623b      	str	r3, [r7, #32]
}
 8006866:	bf00      	nop
 8006868:	e7fe      	b.n	8006868 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	61fb      	str	r3, [r7, #28]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006888:	f000 ffee 	bl	8007868 <xTaskGetSchedulerState>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d102      	bne.n	8006898 <xQueueSemaphoreTake+0x60>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <xQueueSemaphoreTake+0x64>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <xQueueSemaphoreTake+0x66>
 800689c:	2300      	movs	r3, #0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	61bb      	str	r3, [r7, #24]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068b8:	f001 fb24 	bl	8007f04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d024      	beq.n	8006912 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	1e5a      	subs	r2, r3, #1
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80068d8:	f001 f96e 	bl	8007bb8 <pvTaskIncrementMutexHeldCount>
 80068dc:	4602      	mov	r2, r0
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00f      	beq.n	800690a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	3310      	adds	r3, #16
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fdfe 	bl	80074f0 <xTaskRemoveFromEventList>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068fa:	4b54      	ldr	r3, [pc, #336]	; (8006a4c <xQueueSemaphoreTake+0x214>)
 80068fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800690a:	f001 fb2b 	bl	8007f64 <vPortExitCritical>
				return pdPASS;
 800690e:	2301      	movs	r3, #1
 8006910:	e097      	b.n	8006a42 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d111      	bne.n	800693c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	617b      	str	r3, [r7, #20]
}
 8006930:	bf00      	nop
 8006932:	e7fe      	b.n	8006932 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006934:	f001 fb16 	bl	8007f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006938:	2300      	movs	r3, #0
 800693a:	e082      	b.n	8006a42 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800693c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006942:	f107 030c 	add.w	r3, r7, #12
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fe34 	bl	80075b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800694c:	2301      	movs	r3, #1
 800694e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006950:	f001 fb08 	bl	8007f64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006954:	f000 fbea 	bl	800712c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006958:	f001 fad4 	bl	8007f04 <vPortEnterCritical>
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006962:	b25b      	sxtb	r3, r3
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d103      	bne.n	8006972 <xQueueSemaphoreTake+0x13a>
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006978:	b25b      	sxtb	r3, r3
 800697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697e:	d103      	bne.n	8006988 <xQueueSemaphoreTake+0x150>
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006988:	f001 faec 	bl	8007f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800698c:	463a      	mov	r2, r7
 800698e:	f107 030c 	add.w	r3, r7, #12
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f000 fe23 	bl	80075e0 <xTaskCheckForTimeOut>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d132      	bne.n	8006a06 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069a2:	f000 f96d 	bl	8006c80 <prvIsQueueEmpty>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d026      	beq.n	80069fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80069b4:	f001 faa6 	bl	8007f04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 ff71 	bl	80078a4 <xTaskPriorityInherit>
 80069c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80069c4:	f001 face 	bl	8007f64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	3324      	adds	r3, #36	; 0x24
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	4611      	mov	r1, r2
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fd69 	bl	80074a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069d8:	f000 f900 	bl	8006bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069dc:	f000 fbb4 	bl	8007148 <xTaskResumeAll>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f47f af68 	bne.w	80068b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80069e8:	4b18      	ldr	r3, [pc, #96]	; (8006a4c <xQueueSemaphoreTake+0x214>)
 80069ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	e75e      	b.n	80068b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80069fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069fc:	f000 f8ee 	bl	8006bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a00:	f000 fba2 	bl	8007148 <xTaskResumeAll>
 8006a04:	e758      	b.n	80068b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a08:	f000 f8e8 	bl	8006bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a0c:	f000 fb9c 	bl	8007148 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a12:	f000 f935 	bl	8006c80 <prvIsQueueEmpty>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f43f af4d 	beq.w	80068b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00d      	beq.n	8006a40 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006a24:	f001 fa6e 	bl	8007f04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a2a:	f000 f82f 	bl	8006a8c <prvGetDisinheritPriorityAfterTimeout>
 8006a2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 f830 	bl	8007a9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a3c:	f001 fa92 	bl	8007f64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3738      	adds	r7, #56	; 0x38
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	60bb      	str	r3, [r7, #8]
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006a74:	f001 fa46 	bl	8007f04 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006a7e:	f001 fa71 	bl	8007f64 <vPortExitCritical>

	return uxReturn;
 8006a82:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1c3 0307 	rsb	r3, r3, #7
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e001      	b.n	8006aae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006aae:	68fb      	ldr	r3, [r7, #12]
	}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10d      	bne.n	8006af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d14d      	bne.n	8006b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 ff52 	bl	8007990 <xTaskPriorityDisinherit>
 8006aec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	609a      	str	r2, [r3, #8]
 8006af4:	e043      	b.n	8006b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d119      	bne.n	8006b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6858      	ldr	r0, [r3, #4]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	461a      	mov	r2, r3
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	f001 fd02 	bl	8008510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	441a      	add	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d32b      	bcc.n	8006b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]
 8006b2e:	e026      	b.n	8006b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68d8      	ldr	r0, [r3, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	461a      	mov	r2, r3
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	f001 fce8 	bl	8008510 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	425b      	negs	r3, r3
 8006b4a:	441a      	add	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d207      	bcs.n	8006b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	425b      	negs	r3, r3
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d105      	bne.n	8006b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b86:	697b      	ldr	r3, [r7, #20]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d018      	beq.n	8006bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	441a      	add	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d303      	bcc.n	8006bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68d9      	ldr	r1, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6838      	ldr	r0, [r7, #0]
 8006bd0:	f001 fc9e 	bl	8008510 <memcpy>
	}
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006be4:	f001 f98e 	bl	8007f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bf0:	e011      	b.n	8006c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d012      	beq.n	8006c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3324      	adds	r3, #36	; 0x24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fc76 	bl	80074f0 <xTaskRemoveFromEventList>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c0a:	f000 fd4b 	bl	80076a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	dce9      	bgt.n	8006bf2 <prvUnlockQueue+0x16>
 8006c1e:	e000      	b.n	8006c22 <prvUnlockQueue+0x46>
					break;
 8006c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	22ff      	movs	r2, #255	; 0xff
 8006c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c2a:	f001 f99b 	bl	8007f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c2e:	f001 f969 	bl	8007f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c3a:	e011      	b.n	8006c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d012      	beq.n	8006c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3310      	adds	r3, #16
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fc51 	bl	80074f0 <xTaskRemoveFromEventList>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c54:	f000 fd26 	bl	80076a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dce9      	bgt.n	8006c3c <prvUnlockQueue+0x60>
 8006c68:	e000      	b.n	8006c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	22ff      	movs	r2, #255	; 0xff
 8006c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c74:	f001 f976 	bl	8007f64 <vPortExitCritical>
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c88:	f001 f93c 	bl	8007f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	e001      	b.n	8006c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c9e:	f001 f961 	bl	8007f64 <vPortExitCritical>

	return xReturn;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cb4:	f001 f926 	bl	8007f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d102      	bne.n	8006cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e001      	b.n	8006cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cce:	f001 f949 	bl	8007f64 <vPortExitCritical>

	return xReturn;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08e      	sub	sp, #56	; 0x38
 8006ce0:	af04      	add	r7, sp, #16
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	623b      	str	r3, [r7, #32]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <xTaskCreateStatic+0x46>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	61fb      	str	r3, [r7, #28]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d22:	2354      	movs	r3, #84	; 0x54
 8006d24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b54      	cmp	r3, #84	; 0x54
 8006d2a:	d00a      	beq.n	8006d42 <xTaskCreateStatic+0x66>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	61bb      	str	r3, [r7, #24]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01e      	beq.n	8006d88 <xTaskCreateStatic+0xac>
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01b      	beq.n	8006d88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d62:	2300      	movs	r3, #0
 8006d64:	9303      	str	r3, [sp, #12]
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	f107 0314 	add.w	r3, r7, #20
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 f850 	bl	8006e20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d82:	f000 f8d5 	bl	8006f30 <prvAddNewTaskToReadyList>
 8006d86:	e001      	b.n	8006d8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d8c:	697b      	ldr	r3, [r7, #20]
	}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3728      	adds	r7, #40	; 0x28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b08c      	sub	sp, #48	; 0x30
 8006d9a:	af04      	add	r7, sp, #16
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	603b      	str	r3, [r7, #0]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 f98c 	bl	80080c8 <pvPortMalloc>
 8006db0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00e      	beq.n	8006dd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006db8:	2054      	movs	r0, #84	; 0x54
 8006dba:	f001 f985 	bl	80080c8 <pvPortMalloc>
 8006dbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30
 8006dcc:	e005      	b.n	8006dda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dce:	6978      	ldr	r0, [r7, #20]
 8006dd0:	f001 fa46 	bl	8008260 <vPortFree>
 8006dd4:	e001      	b.n	8006dda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d017      	beq.n	8006e10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	2300      	movs	r3, #0
 8006dec:	9303      	str	r3, [sp, #12]
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	9302      	str	r3, [sp, #8]
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68b9      	ldr	r1, [r7, #8]
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 f80e 	bl	8006e20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e04:	69f8      	ldr	r0, [r7, #28]
 8006e06:	f000 f893 	bl	8006f30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	e002      	b.n	8006e16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e10:	f04f 33ff 	mov.w	r3, #4294967295
 8006e14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e16:	69bb      	ldr	r3, [r7, #24]
	}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	f023 0307 	bic.w	r3, r3, #7
 8006e46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	617b      	str	r3, [r7, #20]
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d01f      	beq.n	8006eae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	e012      	b.n	8006e9a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	7819      	ldrb	r1, [r3, #0]
 8006e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	3334      	adds	r3, #52	; 0x34
 8006e84:	460a      	mov	r2, r1
 8006e86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	3301      	adds	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2b0f      	cmp	r3, #15
 8006e9e:	d9e9      	bls.n	8006e74 <prvInitialiseNewTask+0x54>
 8006ea0:	e000      	b.n	8006ea4 <prvInitialiseNewTask+0x84>
			{
				break;
 8006ea2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006eac:	e003      	b.n	8006eb6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	2b06      	cmp	r3, #6
 8006eba:	d901      	bls.n	8006ec0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ebc:	2306      	movs	r3, #6
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	2200      	movs	r2, #0
 8006ed0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff f947 	bl	800616a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	3318      	adds	r3, #24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff f942 	bl	800616a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	f1c3 0207 	rsb	r2, r3, #7
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	2200      	movs	r2, #0
 8006f00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	68f9      	ldr	r1, [r7, #12]
 8006f0e:	69b8      	ldr	r0, [r7, #24]
 8006f10:	f000 fecc 	bl	8007cac <pxPortInitialiseStack>
 8006f14:	4602      	mov	r2, r0
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f26:	bf00      	nop
 8006f28:	3720      	adds	r7, #32
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f38:	f000 ffe4 	bl	8007f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f3c:	4b2a      	ldr	r3, [pc, #168]	; (8006fe8 <prvAddNewTaskToReadyList+0xb8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	4a29      	ldr	r2, [pc, #164]	; (8006fe8 <prvAddNewTaskToReadyList+0xb8>)
 8006f44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f46:	4b29      	ldr	r3, [pc, #164]	; (8006fec <prvAddNewTaskToReadyList+0xbc>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f4e:	4a27      	ldr	r2, [pc, #156]	; (8006fec <prvAddNewTaskToReadyList+0xbc>)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f54:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <prvAddNewTaskToReadyList+0xb8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d110      	bne.n	8006f7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f5c:	f000 fbc6 	bl	80076ec <prvInitialiseTaskLists>
 8006f60:	e00d      	b.n	8006f7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f62:	4b23      	ldr	r3, [pc, #140]	; (8006ff0 <prvAddNewTaskToReadyList+0xc0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f6a:	4b20      	ldr	r3, [pc, #128]	; (8006fec <prvAddNewTaskToReadyList+0xbc>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d802      	bhi.n	8006f7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f78:	4a1c      	ldr	r2, [pc, #112]	; (8006fec <prvAddNewTaskToReadyList+0xbc>)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <prvAddNewTaskToReadyList+0xc4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	4a1b      	ldr	r2, [pc, #108]	; (8006ff4 <prvAddNewTaskToReadyList+0xc4>)
 8006f86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	409a      	lsls	r2, r3
 8006f90:	4b19      	ldr	r3, [pc, #100]	; (8006ff8 <prvAddNewTaskToReadyList+0xc8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <prvAddNewTaskToReadyList+0xc8>)
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <prvAddNewTaskToReadyList+0xcc>)
 8006fa8:	441a      	add	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7ff f8e7 	bl	8006184 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fb6:	f000 ffd5 	bl	8007f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <prvAddNewTaskToReadyList+0xc0>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00e      	beq.n	8006fe0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <prvAddNewTaskToReadyList+0xbc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d207      	bcs.n	8006fe0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <prvAddNewTaskToReadyList+0xd0>)
 8006fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20001354 	.word	0x20001354
 8006fec:	20001254 	.word	0x20001254
 8006ff0:	20001360 	.word	0x20001360
 8006ff4:	20001370 	.word	0x20001370
 8006ff8:	2000135c 	.word	0x2000135c
 8006ffc:	20001258 	.word	0x20001258
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d017      	beq.n	8007046 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007016:	4b13      	ldr	r3, [pc, #76]	; (8007064 <vTaskDelay+0x60>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <vTaskDelay+0x30>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60bb      	str	r3, [r7, #8]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007034:	f000 f87a 	bl	800712c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fdd0 	bl	8007be0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007040:	f000 f882 	bl	8007148 <xTaskResumeAll>
 8007044:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d107      	bne.n	800705c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <vTaskDelay+0x64>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	2000137c 	.word	0x2000137c
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08a      	sub	sp, #40	; 0x28
 8007070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800707a:	463a      	mov	r2, r7
 800707c:	1d39      	adds	r1, r7, #4
 800707e:	f107 0308 	add.w	r3, r7, #8
 8007082:	4618      	mov	r0, r3
 8007084:	f7fa fce6 	bl	8001a54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	9202      	str	r2, [sp, #8]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	2300      	movs	r3, #0
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2300      	movs	r3, #0
 8007098:	460a      	mov	r2, r1
 800709a:	491e      	ldr	r1, [pc, #120]	; (8007114 <vTaskStartScheduler+0xa8>)
 800709c:	481e      	ldr	r0, [pc, #120]	; (8007118 <vTaskStartScheduler+0xac>)
 800709e:	f7ff fe1d 	bl	8006cdc <xTaskCreateStatic>
 80070a2:	4603      	mov	r3, r0
 80070a4:	4a1d      	ldr	r2, [pc, #116]	; (800711c <vTaskStartScheduler+0xb0>)
 80070a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070a8:	4b1c      	ldr	r3, [pc, #112]	; (800711c <vTaskStartScheduler+0xb0>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070b0:	2301      	movs	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	e001      	b.n	80070ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d116      	bne.n	80070ee <vTaskStartScheduler+0x82>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	613b      	str	r3, [r7, #16]
}
 80070d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070d4:	4b12      	ldr	r3, [pc, #72]	; (8007120 <vTaskStartScheduler+0xb4>)
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295
 80070da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070dc:	4b11      	ldr	r3, [pc, #68]	; (8007124 <vTaskStartScheduler+0xb8>)
 80070de:	2201      	movs	r2, #1
 80070e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070e2:	4b11      	ldr	r3, [pc, #68]	; (8007128 <vTaskStartScheduler+0xbc>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070e8:	f000 fe6a 	bl	8007dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070ec:	e00e      	b.n	800710c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d10a      	bne.n	800710c <vTaskStartScheduler+0xa0>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	60fb      	str	r3, [r7, #12]
}
 8007108:	bf00      	nop
 800710a:	e7fe      	b.n	800710a <vTaskStartScheduler+0x9e>
}
 800710c:	bf00      	nop
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	0800d850 	.word	0x0800d850
 8007118:	080076bd 	.word	0x080076bd
 800711c:	20001378 	.word	0x20001378
 8007120:	20001374 	.word	0x20001374
 8007124:	20001360 	.word	0x20001360
 8007128:	20001358 	.word	0x20001358

0800712c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <vTaskSuspendAll+0x18>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	4a03      	ldr	r2, [pc, #12]	; (8007144 <vTaskSuspendAll+0x18>)
 8007138:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800713a:	bf00      	nop
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	2000137c 	.word	0x2000137c

08007148 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007152:	2300      	movs	r3, #0
 8007154:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007156:	4b41      	ldr	r3, [pc, #260]	; (800725c <xTaskResumeAll+0x114>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <xTaskResumeAll+0x2c>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	603b      	str	r3, [r7, #0]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007174:	f000 fec6 	bl	8007f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007178:	4b38      	ldr	r3, [pc, #224]	; (800725c <xTaskResumeAll+0x114>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3b01      	subs	r3, #1
 800717e:	4a37      	ldr	r2, [pc, #220]	; (800725c <xTaskResumeAll+0x114>)
 8007180:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007182:	4b36      	ldr	r3, [pc, #216]	; (800725c <xTaskResumeAll+0x114>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d161      	bne.n	800724e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800718a:	4b35      	ldr	r3, [pc, #212]	; (8007260 <xTaskResumeAll+0x118>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d05d      	beq.n	800724e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007192:	e02e      	b.n	80071f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007194:	4b33      	ldr	r3, [pc, #204]	; (8007264 <xTaskResumeAll+0x11c>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3318      	adds	r3, #24
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff f84c 	bl	800623e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff f847 	bl	800623e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	2201      	movs	r2, #1
 80071b6:	409a      	lsls	r2, r3
 80071b8:	4b2b      	ldr	r3, [pc, #172]	; (8007268 <xTaskResumeAll+0x120>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4313      	orrs	r3, r2
 80071be:	4a2a      	ldr	r2, [pc, #168]	; (8007268 <xTaskResumeAll+0x120>)
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4a27      	ldr	r2, [pc, #156]	; (800726c <xTaskResumeAll+0x124>)
 80071d0:	441a      	add	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7fe ffd3 	bl	8006184 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e2:	4b23      	ldr	r3, [pc, #140]	; (8007270 <xTaskResumeAll+0x128>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d302      	bcc.n	80071f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80071ec:	4b21      	ldr	r3, [pc, #132]	; (8007274 <xTaskResumeAll+0x12c>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <xTaskResumeAll+0x11c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1cc      	bne.n	8007194 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007200:	f000 fb12 	bl	8007828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007204:	4b1c      	ldr	r3, [pc, #112]	; (8007278 <xTaskResumeAll+0x130>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d010      	beq.n	8007232 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007210:	f000 f836 	bl	8007280 <xTaskIncrementTick>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800721a:	4b16      	ldr	r3, [pc, #88]	; (8007274 <xTaskResumeAll+0x12c>)
 800721c:	2201      	movs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3b01      	subs	r3, #1
 8007224:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f1      	bne.n	8007210 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800722c:	4b12      	ldr	r3, [pc, #72]	; (8007278 <xTaskResumeAll+0x130>)
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007232:	4b10      	ldr	r3, [pc, #64]	; (8007274 <xTaskResumeAll+0x12c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800723a:	2301      	movs	r3, #1
 800723c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800723e:	4b0f      	ldr	r3, [pc, #60]	; (800727c <xTaskResumeAll+0x134>)
 8007240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800724e:	f000 fe89 	bl	8007f64 <vPortExitCritical>

	return xAlreadyYielded;
 8007252:	68bb      	ldr	r3, [r7, #8]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	2000137c 	.word	0x2000137c
 8007260:	20001354 	.word	0x20001354
 8007264:	20001314 	.word	0x20001314
 8007268:	2000135c 	.word	0x2000135c
 800726c:	20001258 	.word	0x20001258
 8007270:	20001254 	.word	0x20001254
 8007274:	20001368 	.word	0x20001368
 8007278:	20001364 	.word	0x20001364
 800727c:	e000ed04 	.word	0xe000ed04

08007280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800728a:	4b4e      	ldr	r3, [pc, #312]	; (80073c4 <xTaskIncrementTick+0x144>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f040 808e 	bne.w	80073b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007294:	4b4c      	ldr	r3, [pc, #304]	; (80073c8 <xTaskIncrementTick+0x148>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800729c:	4a4a      	ldr	r2, [pc, #296]	; (80073c8 <xTaskIncrementTick+0x148>)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d120      	bne.n	80072ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072a8:	4b48      	ldr	r3, [pc, #288]	; (80073cc <xTaskIncrementTick+0x14c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	603b      	str	r3, [r7, #0]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <xTaskIncrementTick+0x46>
 80072c8:	4b40      	ldr	r3, [pc, #256]	; (80073cc <xTaskIncrementTick+0x14c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	4b40      	ldr	r3, [pc, #256]	; (80073d0 <xTaskIncrementTick+0x150>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a3e      	ldr	r2, [pc, #248]	; (80073cc <xTaskIncrementTick+0x14c>)
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	4a3e      	ldr	r2, [pc, #248]	; (80073d0 <xTaskIncrementTick+0x150>)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	4b3d      	ldr	r3, [pc, #244]	; (80073d4 <xTaskIncrementTick+0x154>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3301      	adds	r3, #1
 80072e2:	4a3c      	ldr	r2, [pc, #240]	; (80073d4 <xTaskIncrementTick+0x154>)
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	f000 fa9f 	bl	8007828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072ea:	4b3b      	ldr	r3, [pc, #236]	; (80073d8 <xTaskIncrementTick+0x158>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d348      	bcc.n	8007386 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072f4:	4b35      	ldr	r3, [pc, #212]	; (80073cc <xTaskIncrementTick+0x14c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d104      	bne.n	8007308 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072fe:	4b36      	ldr	r3, [pc, #216]	; (80073d8 <xTaskIncrementTick+0x158>)
 8007300:	f04f 32ff 	mov.w	r2, #4294967295
 8007304:	601a      	str	r2, [r3, #0]
					break;
 8007306:	e03e      	b.n	8007386 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007308:	4b30      	ldr	r3, [pc, #192]	; (80073cc <xTaskIncrementTick+0x14c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d203      	bcs.n	8007328 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007320:	4a2d      	ldr	r2, [pc, #180]	; (80073d8 <xTaskIncrementTick+0x158>)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007326:	e02e      	b.n	8007386 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	3304      	adds	r3, #4
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe ff86 	bl	800623e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	3318      	adds	r3, #24
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe ff7d 	bl	800623e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	2201      	movs	r2, #1
 800734a:	409a      	lsls	r2, r3
 800734c:	4b23      	ldr	r3, [pc, #140]	; (80073dc <xTaskIncrementTick+0x15c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4313      	orrs	r3, r2
 8007352:	4a22      	ldr	r2, [pc, #136]	; (80073dc <xTaskIncrementTick+0x15c>)
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4a1f      	ldr	r2, [pc, #124]	; (80073e0 <xTaskIncrementTick+0x160>)
 8007364:	441a      	add	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f7fe ff09 	bl	8006184 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007376:	4b1b      	ldr	r3, [pc, #108]	; (80073e4 <xTaskIncrementTick+0x164>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	429a      	cmp	r2, r3
 800737e:	d3b9      	bcc.n	80072f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007384:	e7b6      	b.n	80072f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007386:	4b17      	ldr	r3, [pc, #92]	; (80073e4 <xTaskIncrementTick+0x164>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738c:	4914      	ldr	r1, [pc, #80]	; (80073e0 <xTaskIncrementTick+0x160>)
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d901      	bls.n	80073a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800739e:	2301      	movs	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80073a2:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <xTaskIncrementTick+0x168>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80073aa:	2301      	movs	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	e004      	b.n	80073ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073b0:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <xTaskIncrementTick+0x16c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	4a0d      	ldr	r2, [pc, #52]	; (80073ec <xTaskIncrementTick+0x16c>)
 80073b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073ba:	697b      	ldr	r3, [r7, #20]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	2000137c 	.word	0x2000137c
 80073c8:	20001358 	.word	0x20001358
 80073cc:	2000130c 	.word	0x2000130c
 80073d0:	20001310 	.word	0x20001310
 80073d4:	2000136c 	.word	0x2000136c
 80073d8:	20001374 	.word	0x20001374
 80073dc:	2000135c 	.word	0x2000135c
 80073e0:	20001258 	.word	0x20001258
 80073e4:	20001254 	.word	0x20001254
 80073e8:	20001368 	.word	0x20001368
 80073ec:	20001364 	.word	0x20001364

080073f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073f6:	4b27      	ldr	r3, [pc, #156]	; (8007494 <vTaskSwitchContext+0xa4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073fe:	4b26      	ldr	r3, [pc, #152]	; (8007498 <vTaskSwitchContext+0xa8>)
 8007400:	2201      	movs	r2, #1
 8007402:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007404:	e03f      	b.n	8007486 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <vTaskSwitchContext+0xa8>)
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740c:	4b23      	ldr	r3, [pc, #140]	; (800749c <vTaskSwitchContext+0xac>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	fab3 f383 	clz	r3, r3
 8007418:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	f1c3 031f 	rsb	r3, r3, #31
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	491f      	ldr	r1, [pc, #124]	; (80074a0 <vTaskSwitchContext+0xb0>)
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	440b      	add	r3, r1
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	607b      	str	r3, [r7, #4]
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <vTaskSwitchContext+0x5a>
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4a12      	ldr	r2, [pc, #72]	; (80074a0 <vTaskSwitchContext+0xb0>)
 8007458:	4413      	add	r3, r2
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	605a      	str	r2, [r3, #4]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	3308      	adds	r3, #8
 800746e:	429a      	cmp	r2, r3
 8007470:	d104      	bne.n	800747c <vTaskSwitchContext+0x8c>
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	605a      	str	r2, [r3, #4]
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <vTaskSwitchContext+0xb4>)
 8007484:	6013      	str	r3, [r2, #0]
}
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	2000137c 	.word	0x2000137c
 8007498:	20001368 	.word	0x20001368
 800749c:	2000135c 	.word	0x2000135c
 80074a0:	20001258 	.word	0x20001258
 80074a4:	20001254 	.word	0x20001254

080074a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60fb      	str	r3, [r7, #12]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <vTaskPlaceOnEventList+0x44>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3318      	adds	r3, #24
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fe fe78 	bl	80061cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074dc:	2101      	movs	r1, #1
 80074de:	6838      	ldr	r0, [r7, #0]
 80074e0:	f000 fb7e 	bl	8007be0 <prvAddCurrentTaskToDelayedList>
}
 80074e4:	bf00      	nop
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	20001254 	.word	0x20001254

080074f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60fb      	str	r3, [r7, #12]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	3318      	adds	r3, #24
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe fe8c 	bl	800623e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007526:	4b1d      	ldr	r3, [pc, #116]	; (800759c <xTaskRemoveFromEventList+0xac>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d11c      	bne.n	8007568 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3304      	adds	r3, #4
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fe83 	bl	800623e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	2201      	movs	r2, #1
 800753e:	409a      	lsls	r2, r3
 8007540:	4b17      	ldr	r3, [pc, #92]	; (80075a0 <xTaskRemoveFromEventList+0xb0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4313      	orrs	r3, r2
 8007546:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <xTaskRemoveFromEventList+0xb0>)
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <xTaskRemoveFromEventList+0xb4>)
 8007558:	441a      	add	r2, r3
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7fe fe0f 	bl	8006184 <vListInsertEnd>
 8007566:	e005      	b.n	8007574 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3318      	adds	r3, #24
 800756c:	4619      	mov	r1, r3
 800756e:	480e      	ldr	r0, [pc, #56]	; (80075a8 <xTaskRemoveFromEventList+0xb8>)
 8007570:	f7fe fe08 	bl	8006184 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <xTaskRemoveFromEventList+0xbc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	429a      	cmp	r2, r3
 8007580:	d905      	bls.n	800758e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007582:	2301      	movs	r3, #1
 8007584:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007586:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <xTaskRemoveFromEventList+0xc0>)
 8007588:	2201      	movs	r2, #1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e001      	b.n	8007592 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007592:	697b      	ldr	r3, [r7, #20]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	2000137c 	.word	0x2000137c
 80075a0:	2000135c 	.word	0x2000135c
 80075a4:	20001258 	.word	0x20001258
 80075a8:	20001314 	.word	0x20001314
 80075ac:	20001254 	.word	0x20001254
 80075b0:	20001368 	.word	0x20001368

080075b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <vTaskInternalSetTimeOutState+0x24>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075c4:	4b05      	ldr	r3, [pc, #20]	; (80075dc <vTaskInternalSetTimeOutState+0x28>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	605a      	str	r2, [r3, #4]
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	2000136c 	.word	0x2000136c
 80075dc:	20001358 	.word	0x20001358

080075e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60fb      	str	r3, [r7, #12]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007622:	f000 fc6f 	bl	8007f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007626:	4b1d      	ldr	r3, [pc, #116]	; (800769c <xTaskCheckForTimeOut+0xbc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763e:	d102      	bne.n	8007646 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007640:	2300      	movs	r3, #0
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	e023      	b.n	800768e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	4b15      	ldr	r3, [pc, #84]	; (80076a0 <xTaskCheckForTimeOut+0xc0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d007      	beq.n	8007662 <xTaskCheckForTimeOut+0x82>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	429a      	cmp	r2, r3
 800765a:	d302      	bcc.n	8007662 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800765c:	2301      	movs	r3, #1
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	e015      	b.n	800768e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	429a      	cmp	r2, r3
 800766a:	d20b      	bcs.n	8007684 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff ff9b 	bl	80075b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800767e:	2300      	movs	r3, #0
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	e004      	b.n	800768e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800768a:	2301      	movs	r3, #1
 800768c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800768e:	f000 fc69 	bl	8007f64 <vPortExitCritical>

	return xReturn;
 8007692:	69fb      	ldr	r3, [r7, #28]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3720      	adds	r7, #32
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20001358 	.word	0x20001358
 80076a0:	2000136c 	.word	0x2000136c

080076a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076a8:	4b03      	ldr	r3, [pc, #12]	; (80076b8 <vTaskMissedYield+0x14>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
}
 80076ae:	bf00      	nop
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	20001368 	.word	0x20001368

080076bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076c4:	f000 f852 	bl	800776c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <prvIdleTask+0x28>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d9f9      	bls.n	80076c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <prvIdleTask+0x2c>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076e0:	e7f0      	b.n	80076c4 <prvIdleTask+0x8>
 80076e2:	bf00      	nop
 80076e4:	20001258 	.word	0x20001258
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076f2:	2300      	movs	r3, #0
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	e00c      	b.n	8007712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4a12      	ldr	r2, [pc, #72]	; (800774c <prvInitialiseTaskLists+0x60>)
 8007704:	4413      	add	r3, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fd0f 	bl	800612a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3301      	adds	r3, #1
 8007710:	607b      	str	r3, [r7, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b06      	cmp	r3, #6
 8007716:	d9ef      	bls.n	80076f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007718:	480d      	ldr	r0, [pc, #52]	; (8007750 <prvInitialiseTaskLists+0x64>)
 800771a:	f7fe fd06 	bl	800612a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800771e:	480d      	ldr	r0, [pc, #52]	; (8007754 <prvInitialiseTaskLists+0x68>)
 8007720:	f7fe fd03 	bl	800612a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007724:	480c      	ldr	r0, [pc, #48]	; (8007758 <prvInitialiseTaskLists+0x6c>)
 8007726:	f7fe fd00 	bl	800612a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800772a:	480c      	ldr	r0, [pc, #48]	; (800775c <prvInitialiseTaskLists+0x70>)
 800772c:	f7fe fcfd 	bl	800612a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007730:	480b      	ldr	r0, [pc, #44]	; (8007760 <prvInitialiseTaskLists+0x74>)
 8007732:	f7fe fcfa 	bl	800612a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <prvInitialiseTaskLists+0x78>)
 8007738:	4a05      	ldr	r2, [pc, #20]	; (8007750 <prvInitialiseTaskLists+0x64>)
 800773a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <prvInitialiseTaskLists+0x7c>)
 800773e:	4a05      	ldr	r2, [pc, #20]	; (8007754 <prvInitialiseTaskLists+0x68>)
 8007740:	601a      	str	r2, [r3, #0]
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20001258 	.word	0x20001258
 8007750:	200012e4 	.word	0x200012e4
 8007754:	200012f8 	.word	0x200012f8
 8007758:	20001314 	.word	0x20001314
 800775c:	20001328 	.word	0x20001328
 8007760:	20001340 	.word	0x20001340
 8007764:	2000130c 	.word	0x2000130c
 8007768:	20001310 	.word	0x20001310

0800776c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007772:	e019      	b.n	80077a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007774:	f000 fbc6 	bl	8007f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007778:	4b10      	ldr	r3, [pc, #64]	; (80077bc <prvCheckTasksWaitingTermination+0x50>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fd5a 	bl	800623e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800778a:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <prvCheckTasksWaitingTermination+0x54>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3b01      	subs	r3, #1
 8007790:	4a0b      	ldr	r2, [pc, #44]	; (80077c0 <prvCheckTasksWaitingTermination+0x54>)
 8007792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <prvCheckTasksWaitingTermination+0x58>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3b01      	subs	r3, #1
 800779a:	4a0a      	ldr	r2, [pc, #40]	; (80077c4 <prvCheckTasksWaitingTermination+0x58>)
 800779c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800779e:	f000 fbe1 	bl	8007f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f810 	bl	80077c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <prvCheckTasksWaitingTermination+0x58>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e1      	bne.n	8007774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20001328 	.word	0x20001328
 80077c0:	20001354 	.word	0x20001354
 80077c4:	2000133c 	.word	0x2000133c

080077c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d108      	bne.n	80077ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fd3e 	bl	8008260 <vPortFree>
				vPortFree( pxTCB );
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fd3b 	bl	8008260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077ea:	e018      	b.n	800781e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d103      	bne.n	80077fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fd32 	bl	8008260 <vPortFree>
	}
 80077fc:	e00f      	b.n	800781e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007804:	2b02      	cmp	r3, #2
 8007806:	d00a      	beq.n	800781e <prvDeleteTCB+0x56>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	60fb      	str	r3, [r7, #12]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <prvDeleteTCB+0x54>
	}
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800782e:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <prvResetNextTaskUnblockTime+0x38>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <prvResetNextTaskUnblockTime+0x3c>)
 800783a:	f04f 32ff 	mov.w	r2, #4294967295
 800783e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007840:	e008      	b.n	8007854 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <prvResetNextTaskUnblockTime+0x38>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	4a04      	ldr	r2, [pc, #16]	; (8007864 <prvResetNextTaskUnblockTime+0x3c>)
 8007852:	6013      	str	r3, [r2, #0]
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	2000130c 	.word	0x2000130c
 8007864:	20001374 	.word	0x20001374

08007868 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800786e:	4b0b      	ldr	r3, [pc, #44]	; (800789c <xTaskGetSchedulerState+0x34>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007876:	2301      	movs	r3, #1
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	e008      	b.n	800788e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800787c:	4b08      	ldr	r3, [pc, #32]	; (80078a0 <xTaskGetSchedulerState+0x38>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007884:	2302      	movs	r3, #2
 8007886:	607b      	str	r3, [r7, #4]
 8007888:	e001      	b.n	800788e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800788e:	687b      	ldr	r3, [r7, #4]
	}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20001360 	.word	0x20001360
 80078a0:	2000137c 	.word	0x2000137c

080078a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d05e      	beq.n	8007978 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078be:	4b31      	ldr	r3, [pc, #196]	; (8007984 <xTaskPriorityInherit+0xe0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d24e      	bcs.n	8007966 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	db06      	blt.n	80078de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d0:	4b2c      	ldr	r3, [pc, #176]	; (8007984 <xTaskPriorityInherit+0xe0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	f1c3 0207 	rsb	r2, r3, #7
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	6959      	ldr	r1, [r3, #20]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4a26      	ldr	r2, [pc, #152]	; (8007988 <xTaskPriorityInherit+0xe4>)
 80078f0:	4413      	add	r3, r2
 80078f2:	4299      	cmp	r1, r3
 80078f4:	d12f      	bne.n	8007956 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	3304      	adds	r3, #4
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fc9f 	bl	800623e <uxListRemove>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	2201      	movs	r2, #1
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	43da      	mvns	r2, r3
 8007912:	4b1e      	ldr	r3, [pc, #120]	; (800798c <xTaskPriorityInherit+0xe8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4013      	ands	r3, r2
 8007918:	4a1c      	ldr	r2, [pc, #112]	; (800798c <xTaskPriorityInherit+0xe8>)
 800791a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800791c:	4b19      	ldr	r3, [pc, #100]	; (8007984 <xTaskPriorityInherit+0xe0>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	2201      	movs	r2, #1
 800792c:	409a      	lsls	r2, r3
 800792e:	4b17      	ldr	r3, [pc, #92]	; (800798c <xTaskPriorityInherit+0xe8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4313      	orrs	r3, r2
 8007934:	4a15      	ldr	r2, [pc, #84]	; (800798c <xTaskPriorityInherit+0xe8>)
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4a10      	ldr	r2, [pc, #64]	; (8007988 <xTaskPriorityInherit+0xe4>)
 8007946:	441a      	add	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	3304      	adds	r3, #4
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f7fe fc18 	bl	8006184 <vListInsertEnd>
 8007954:	e004      	b.n	8007960 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007956:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <xTaskPriorityInherit+0xe0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007960:	2301      	movs	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e008      	b.n	8007978 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <xTaskPriorityInherit+0xe0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	429a      	cmp	r2, r3
 8007972:	d201      	bcs.n	8007978 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007978:	68fb      	ldr	r3, [r7, #12]
	}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20001254 	.word	0x20001254
 8007988:	20001258 	.word	0x20001258
 800798c:	2000135c 	.word	0x2000135c

08007990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d06e      	beq.n	8007a84 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079a6:	4b3a      	ldr	r3, [pc, #232]	; (8007a90 <xTaskPriorityDisinherit+0x100>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d00a      	beq.n	80079c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	60fb      	str	r3, [r7, #12]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60bb      	str	r3, [r7, #8]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d044      	beq.n	8007a84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d140      	bne.n	8007a84 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fc19 	bl	800623e <uxListRemove>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d115      	bne.n	8007a3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a16:	491f      	ldr	r1, [pc, #124]	; (8007a94 <xTaskPriorityDisinherit+0x104>)
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xTaskPriorityDisinherit+0xae>
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43da      	mvns	r2, r3
 8007a34:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <xTaskPriorityDisinherit+0x108>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <xTaskPriorityDisinherit+0x108>)
 8007a3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	f1c3 0207 	rsb	r2, r3, #7
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	2201      	movs	r2, #1
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <xTaskPriorityDisinherit+0x108>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	4a0d      	ldr	r2, [pc, #52]	; (8007a98 <xTaskPriorityDisinherit+0x108>)
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4a08      	ldr	r2, [pc, #32]	; (8007a94 <xTaskPriorityDisinherit+0x104>)
 8007a72:	441a      	add	r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fe fb82 	bl	8006184 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a80:	2301      	movs	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a84:	697b      	ldr	r3, [r7, #20]
	}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20001254 	.word	0x20001254
 8007a94:	20001258 	.word	0x20001258
 8007a98:	2000135c 	.word	0x2000135c

08007a9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d077      	beq.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	60fb      	str	r3, [r7, #12]
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d902      	bls.n	8007ae2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	61fb      	str	r3, [r7, #28]
 8007ae0:	e002      	b.n	8007ae8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d058      	beq.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d153      	bne.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007afc:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d10a      	bne.n	8007b1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	60bb      	str	r3, [r7, #8]
}
 8007b18:	bf00      	nop
 8007b1a:	e7fe      	b.n	8007b1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	db04      	blt.n	8007b3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f1c3 0207 	rsb	r2, r3, #7
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	6959      	ldr	r1, [r3, #20]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4a19      	ldr	r2, [pc, #100]	; (8007bb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007b4a:	4413      	add	r3, r2
 8007b4c:	4299      	cmp	r1, r3
 8007b4e:	d129      	bne.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fb72 	bl	800623e <uxListRemove>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	2201      	movs	r2, #1
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	43da      	mvns	r2, r3
 8007b6c:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4013      	ands	r3, r2
 8007b72:	4a10      	ldr	r2, [pc, #64]	; (8007bb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b74:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	409a      	lsls	r2, r3
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	4a0b      	ldr	r2, [pc, #44]	; (8007bb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4a06      	ldr	r2, [pc, #24]	; (8007bb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007b96:	441a      	add	r2, r3
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe faf0 	bl	8006184 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ba4:	bf00      	nop
 8007ba6:	3720      	adds	r7, #32
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20001254 	.word	0x20001254
 8007bb0:	20001258 	.word	0x20001258
 8007bb4:	2000135c 	.word	0x2000135c

08007bb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bbc:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bca:	3201      	adds	r2, #1
 8007bcc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007bce:	4b03      	ldr	r3, [pc, #12]	; (8007bdc <pvTaskIncrementMutexHeldCount+0x24>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
	}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	20001254 	.word	0x20001254

08007be0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bea:	4b29      	ldr	r3, [pc, #164]	; (8007c90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bf0:	4b28      	ldr	r3, [pc, #160]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fb21 	bl	800623e <uxListRemove>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10b      	bne.n	8007c1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c02:	4b24      	ldr	r3, [pc, #144]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	2201      	movs	r2, #1
 8007c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0e:	43da      	mvns	r2, r3
 8007c10:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4013      	ands	r3, r2
 8007c16:	4a20      	ldr	r2, [pc, #128]	; (8007c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d10a      	bne.n	8007c38 <prvAddCurrentTaskToDelayedList+0x58>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c28:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	4619      	mov	r1, r3
 8007c30:	481a      	ldr	r0, [pc, #104]	; (8007c9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007c32:	f7fe faa7 	bl	8006184 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c36:	e026      	b.n	8007c86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c40:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d209      	bcs.n	8007c64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c50:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	f7fe fab5 	bl	80061cc <vListInsert>
}
 8007c62:	e010      	b.n	8007c86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4610      	mov	r0, r2
 8007c72:	f7fe faab 	bl	80061cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c76:	4b0c      	ldr	r3, [pc, #48]	; (8007ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d202      	bcs.n	8007c86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007c80:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6013      	str	r3, [r2, #0]
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20001358 	.word	0x20001358
 8007c94:	20001254 	.word	0x20001254
 8007c98:	2000135c 	.word	0x2000135c
 8007c9c:	20001340 	.word	0x20001340
 8007ca0:	20001310 	.word	0x20001310
 8007ca4:	2000130c 	.word	0x2000130c
 8007ca8:	20001374 	.word	0x20001374

08007cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3b04      	subs	r3, #4
 8007cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3b04      	subs	r3, #4
 8007cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f023 0201 	bic.w	r2, r3, #1
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3b04      	subs	r3, #4
 8007cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cdc:	4a0c      	ldr	r2, [pc, #48]	; (8007d10 <pxPortInitialiseStack+0x64>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3b14      	subs	r3, #20
 8007ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3b04      	subs	r3, #4
 8007cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f06f 0202 	mvn.w	r2, #2
 8007cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3b20      	subs	r3, #32
 8007d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d02:	68fb      	ldr	r3, [r7, #12]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	08007d15 	.word	0x08007d15

08007d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <prvTaskExitError+0x54>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d26:	d00a      	beq.n	8007d3e <prvTaskExitError+0x2a>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	60fb      	str	r3, [r7, #12]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <prvTaskExitError+0x28>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60bb      	str	r3, [r7, #8]
}
 8007d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d52:	bf00      	nop
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0fc      	beq.n	8007d54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d5a:	bf00      	nop
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	20000018 	.word	0x20000018
 8007d6c:	00000000 	.word	0x00000000

08007d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d70:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <pxCurrentTCBConst2>)
 8007d72:	6819      	ldr	r1, [r3, #0]
 8007d74:	6808      	ldr	r0, [r1, #0]
 8007d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	f380 8809 	msr	PSP, r0
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f04f 0000 	mov.w	r0, #0
 8007d86:	f380 8811 	msr	BASEPRI, r0
 8007d8a:	4770      	bx	lr
 8007d8c:	f3af 8000 	nop.w

08007d90 <pxCurrentTCBConst2>:
 8007d90:	20001254 	.word	0x20001254
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop

08007d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d98:	4808      	ldr	r0, [pc, #32]	; (8007dbc <prvPortStartFirstTask+0x24>)
 8007d9a:	6800      	ldr	r0, [r0, #0]
 8007d9c:	6800      	ldr	r0, [r0, #0]
 8007d9e:	f380 8808 	msr	MSP, r0
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8814 	msr	CONTROL, r0
 8007daa:	b662      	cpsie	i
 8007dac:	b661      	cpsie	f
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	df00      	svc	0
 8007db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dba:	bf00      	nop
 8007dbc:	e000ed08 	.word	0xe000ed08

08007dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007dc6:	4b46      	ldr	r3, [pc, #280]	; (8007ee0 <xPortStartScheduler+0x120>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a46      	ldr	r2, [pc, #280]	; (8007ee4 <xPortStartScheduler+0x124>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d10a      	bne.n	8007de6 <xPortStartScheduler+0x26>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	613b      	str	r3, [r7, #16]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007de6:	4b3e      	ldr	r3, [pc, #248]	; (8007ee0 <xPortStartScheduler+0x120>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a3f      	ldr	r2, [pc, #252]	; (8007ee8 <xPortStartScheduler+0x128>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10a      	bne.n	8007e06 <xPortStartScheduler+0x46>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	60fb      	str	r3, [r7, #12]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e06:	4b39      	ldr	r3, [pc, #228]	; (8007eec <xPortStartScheduler+0x12c>)
 8007e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	22ff      	movs	r2, #255	; 0xff
 8007e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	4b31      	ldr	r3, [pc, #196]	; (8007ef0 <xPortStartScheduler+0x130>)
 8007e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e2e:	4b31      	ldr	r3, [pc, #196]	; (8007ef4 <xPortStartScheduler+0x134>)
 8007e30:	2207      	movs	r2, #7
 8007e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e34:	e009      	b.n	8007e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e36:	4b2f      	ldr	r3, [pc, #188]	; (8007ef4 <xPortStartScheduler+0x134>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	4a2d      	ldr	r2, [pc, #180]	; (8007ef4 <xPortStartScheduler+0x134>)
 8007e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e52:	2b80      	cmp	r3, #128	; 0x80
 8007e54:	d0ef      	beq.n	8007e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e56:	4b27      	ldr	r3, [pc, #156]	; (8007ef4 <xPortStartScheduler+0x134>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f1c3 0307 	rsb	r3, r3, #7
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d00a      	beq.n	8007e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	60bb      	str	r3, [r7, #8]
}
 8007e74:	bf00      	nop
 8007e76:	e7fe      	b.n	8007e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e78:	4b1e      	ldr	r3, [pc, #120]	; (8007ef4 <xPortStartScheduler+0x134>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	021b      	lsls	r3, r3, #8
 8007e7e:	4a1d      	ldr	r2, [pc, #116]	; (8007ef4 <xPortStartScheduler+0x134>)
 8007e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e82:	4b1c      	ldr	r3, [pc, #112]	; (8007ef4 <xPortStartScheduler+0x134>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e8a:	4a1a      	ldr	r2, [pc, #104]	; (8007ef4 <xPortStartScheduler+0x134>)
 8007e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e96:	4b18      	ldr	r3, [pc, #96]	; (8007ef8 <xPortStartScheduler+0x138>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a17      	ldr	r2, [pc, #92]	; (8007ef8 <xPortStartScheduler+0x138>)
 8007e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ea2:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <xPortStartScheduler+0x138>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a14      	ldr	r2, [pc, #80]	; (8007ef8 <xPortStartScheduler+0x138>)
 8007ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007eae:	f000 f8dd 	bl	800806c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007eb2:	4b12      	ldr	r3, [pc, #72]	; (8007efc <xPortStartScheduler+0x13c>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007eb8:	f000 f8fc 	bl	80080b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ebc:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <xPortStartScheduler+0x140>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0f      	ldr	r2, [pc, #60]	; (8007f00 <xPortStartScheduler+0x140>)
 8007ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ec8:	f7ff ff66 	bl	8007d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ecc:	f7ff fa90 	bl	80073f0 <vTaskSwitchContext>
	prvTaskExitError();
 8007ed0:	f7ff ff20 	bl	8007d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	e000ed00 	.word	0xe000ed00
 8007ee4:	410fc271 	.word	0x410fc271
 8007ee8:	410fc270 	.word	0x410fc270
 8007eec:	e000e400 	.word	0xe000e400
 8007ef0:	20001380 	.word	0x20001380
 8007ef4:	20001384 	.word	0x20001384
 8007ef8:	e000ed20 	.word	0xe000ed20
 8007efc:	20000018 	.word	0x20000018
 8007f00:	e000ef34 	.word	0xe000ef34

08007f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	607b      	str	r3, [r7, #4]
}
 8007f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f1e:	4b0f      	ldr	r3, [pc, #60]	; (8007f5c <vPortEnterCritical+0x58>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3301      	adds	r3, #1
 8007f24:	4a0d      	ldr	r2, [pc, #52]	; (8007f5c <vPortEnterCritical+0x58>)
 8007f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f28:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <vPortEnterCritical+0x58>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d10f      	bne.n	8007f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <vPortEnterCritical+0x5c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	603b      	str	r3, [r7, #0]
}
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <vPortEnterCritical+0x4a>
	}
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	20000018 	.word	0x20000018
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f6a:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <vPortExitCritical+0x50>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <vPortExitCritical+0x24>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	607b      	str	r3, [r7, #4]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <vPortExitCritical+0x50>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <vPortExitCritical+0x50>)
 8007f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f92:	4b08      	ldr	r3, [pc, #32]	; (8007fb4 <vPortExitCritical+0x50>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <vPortExitCritical+0x42>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20000018 	.word	0x20000018
	...

08007fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fc0:	f3ef 8009 	mrs	r0, PSP
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	4b15      	ldr	r3, [pc, #84]	; (8008020 <pxCurrentTCBConst>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	f01e 0f10 	tst.w	lr, #16
 8007fd0:	bf08      	it	eq
 8007fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	6010      	str	r0, [r2, #0]
 8007fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fe4:	f380 8811 	msr	BASEPRI, r0
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f7ff f9fe 	bl	80073f0 <vTaskSwitchContext>
 8007ff4:	f04f 0000 	mov.w	r0, #0
 8007ff8:	f380 8811 	msr	BASEPRI, r0
 8007ffc:	bc09      	pop	{r0, r3}
 8007ffe:	6819      	ldr	r1, [r3, #0]
 8008000:	6808      	ldr	r0, [r1, #0]
 8008002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008006:	f01e 0f10 	tst.w	lr, #16
 800800a:	bf08      	it	eq
 800800c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008010:	f380 8809 	msr	PSP, r0
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	f3af 8000 	nop.w

08008020 <pxCurrentTCBConst>:
 8008020:	20001254 	.word	0x20001254
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop

08008028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	607b      	str	r3, [r7, #4]
}
 8008040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008042:	f7ff f91d 	bl	8007280 <xTaskIncrementTick>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <xPortSysTickHandler+0x40>)
 800804e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	2300      	movs	r3, #0
 8008056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f383 8811 	msr	BASEPRI, r3
}
 800805e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	e000ed04 	.word	0xe000ed04

0800806c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <vPortSetupTimerInterrupt+0x34>)
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008076:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <vPortSetupTimerInterrupt+0x38>)
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800807c:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <vPortSetupTimerInterrupt+0x3c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <vPortSetupTimerInterrupt+0x40>)
 8008082:	fba2 2303 	umull	r2, r3, r2, r3
 8008086:	099b      	lsrs	r3, r3, #6
 8008088:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <vPortSetupTimerInterrupt+0x44>)
 800808a:	3b01      	subs	r3, #1
 800808c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800808e:	4b04      	ldr	r3, [pc, #16]	; (80080a0 <vPortSetupTimerInterrupt+0x34>)
 8008090:	2207      	movs	r2, #7
 8008092:	601a      	str	r2, [r3, #0]
}
 8008094:	bf00      	nop
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	e000e010 	.word	0xe000e010
 80080a4:	e000e018 	.word	0xe000e018
 80080a8:	2000000c 	.word	0x2000000c
 80080ac:	10624dd3 	.word	0x10624dd3
 80080b0:	e000e014 	.word	0xe000e014

080080b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080c4 <vPortEnableVFP+0x10>
 80080b8:	6801      	ldr	r1, [r0, #0]
 80080ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080be:	6001      	str	r1, [r0, #0]
 80080c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080c2:	bf00      	nop
 80080c4:	e000ed88 	.word	0xe000ed88

080080c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08a      	sub	sp, #40	; 0x28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080d4:	f7ff f82a 	bl	800712c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080d8:	4b5b      	ldr	r3, [pc, #364]	; (8008248 <pvPortMalloc+0x180>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080e0:	f000 f920 	bl	8008324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080e4:	4b59      	ldr	r3, [pc, #356]	; (800824c <pvPortMalloc+0x184>)
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f040 8093 	bne.w	8008218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01d      	beq.n	8008134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80080f8:	2208      	movs	r2, #8
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	2b00      	cmp	r3, #0
 8008108:	d014      	beq.n	8008134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f023 0307 	bic.w	r3, r3, #7
 8008110:	3308      	adds	r3, #8
 8008112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <pvPortMalloc+0x6c>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	617b      	str	r3, [r7, #20]
}
 8008130:	bf00      	nop
 8008132:	e7fe      	b.n	8008132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d06e      	beq.n	8008218 <pvPortMalloc+0x150>
 800813a:	4b45      	ldr	r3, [pc, #276]	; (8008250 <pvPortMalloc+0x188>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	d869      	bhi.n	8008218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008144:	4b43      	ldr	r3, [pc, #268]	; (8008254 <pvPortMalloc+0x18c>)
 8008146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008148:	4b42      	ldr	r3, [pc, #264]	; (8008254 <pvPortMalloc+0x18c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800814e:	e004      	b.n	800815a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d903      	bls.n	800816c <pvPortMalloc+0xa4>
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1f1      	bne.n	8008150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800816c:	4b36      	ldr	r3, [pc, #216]	; (8008248 <pvPortMalloc+0x180>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008172:	429a      	cmp	r2, r3
 8008174:	d050      	beq.n	8008218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2208      	movs	r2, #8
 800817c:	4413      	add	r3, r2
 800817e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	2308      	movs	r3, #8
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	429a      	cmp	r2, r3
 8008196:	d91f      	bls.n	80081d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <pvPortMalloc+0xf8>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	613b      	str	r3, [r7, #16]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	1ad2      	subs	r2, r2, r3
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081d2:	69b8      	ldr	r0, [r7, #24]
 80081d4:	f000 f908 	bl	80083e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081d8:	4b1d      	ldr	r3, [pc, #116]	; (8008250 <pvPortMalloc+0x188>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	4a1b      	ldr	r2, [pc, #108]	; (8008250 <pvPortMalloc+0x188>)
 80081e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081e6:	4b1a      	ldr	r3, [pc, #104]	; (8008250 <pvPortMalloc+0x188>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <pvPortMalloc+0x190>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d203      	bcs.n	80081fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081f2:	4b17      	ldr	r3, [pc, #92]	; (8008250 <pvPortMalloc+0x188>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a18      	ldr	r2, [pc, #96]	; (8008258 <pvPortMalloc+0x190>)
 80081f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	4b13      	ldr	r3, [pc, #76]	; (800824c <pvPortMalloc+0x184>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	431a      	orrs	r2, r3
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800820e:	4b13      	ldr	r3, [pc, #76]	; (800825c <pvPortMalloc+0x194>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	4a11      	ldr	r2, [pc, #68]	; (800825c <pvPortMalloc+0x194>)
 8008216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008218:	f7fe ff96 	bl	8007148 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <pvPortMalloc+0x174>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	60fb      	str	r3, [r7, #12]
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <pvPortMalloc+0x172>
	return pvReturn;
 800823c:	69fb      	ldr	r3, [r7, #28]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3728      	adds	r7, #40	; 0x28
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20004f90 	.word	0x20004f90
 800824c:	20004fa4 	.word	0x20004fa4
 8008250:	20004f94 	.word	0x20004f94
 8008254:	20004f88 	.word	0x20004f88
 8008258:	20004f98 	.word	0x20004f98
 800825c:	20004f9c 	.word	0x20004f9c

08008260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d04d      	beq.n	800830e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008272:	2308      	movs	r3, #8
 8008274:	425b      	negs	r3, r3
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	4413      	add	r3, r2
 800827a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	4b24      	ldr	r3, [pc, #144]	; (8008318 <vPortFree+0xb8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4013      	ands	r3, r2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <vPortFree+0x44>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60fb      	str	r3, [r7, #12]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <vPortFree+0x62>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	60bb      	str	r3, [r7, #8]
}
 80082be:	bf00      	nop
 80082c0:	e7fe      	b.n	80082c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <vPortFree+0xb8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01e      	beq.n	800830e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d11a      	bne.n	800830e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <vPortFree+0xb8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	43db      	mvns	r3, r3
 80082e2:	401a      	ands	r2, r3
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082e8:	f7fe ff20 	bl	800712c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <vPortFree+0xbc>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4413      	add	r3, r2
 80082f6:	4a09      	ldr	r2, [pc, #36]	; (800831c <vPortFree+0xbc>)
 80082f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082fa:	6938      	ldr	r0, [r7, #16]
 80082fc:	f000 f874 	bl	80083e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <vPortFree+0xc0>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	4a06      	ldr	r2, [pc, #24]	; (8008320 <vPortFree+0xc0>)
 8008308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800830a:	f7fe ff1d 	bl	8007148 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800830e:	bf00      	nop
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20004fa4 	.word	0x20004fa4
 800831c:	20004f94 	.word	0x20004f94
 8008320:	20004fa0 	.word	0x20004fa0

08008324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800832a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800832e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008330:	4b27      	ldr	r3, [pc, #156]	; (80083d0 <prvHeapInit+0xac>)
 8008332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00c      	beq.n	8008358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3307      	adds	r3, #7
 8008342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0307 	bic.w	r3, r3, #7
 800834a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <prvHeapInit+0xac>)
 8008354:	4413      	add	r3, r2
 8008356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800835c:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <prvHeapInit+0xb0>)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008362:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <prvHeapInit+0xb0>)
 8008364:	2200      	movs	r2, #0
 8008366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	4413      	add	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008370:	2208      	movs	r2, #8
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a15      	ldr	r2, [pc, #84]	; (80083d8 <prvHeapInit+0xb4>)
 8008384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <prvHeapInit+0xb4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800838e:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <prvHeapInit+0xb4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <prvHeapInit+0xb4>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <prvHeapInit+0xb8>)
 80083b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <prvHeapInit+0xbc>)
 80083ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <prvHeapInit+0xc0>)
 80083be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083c2:	601a      	str	r2, [r3, #0]
}
 80083c4:	bf00      	nop
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	20001388 	.word	0x20001388
 80083d4:	20004f88 	.word	0x20004f88
 80083d8:	20004f90 	.word	0x20004f90
 80083dc:	20004f98 	.word	0x20004f98
 80083e0:	20004f94 	.word	0x20004f94
 80083e4:	20004fa4 	.word	0x20004fa4

080083e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083f0:	4b28      	ldr	r3, [pc, #160]	; (8008494 <prvInsertBlockIntoFreeList+0xac>)
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e002      	b.n	80083fc <prvInsertBlockIntoFreeList+0x14>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	d8f7      	bhi.n	80083f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d108      	bne.n	800842a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	441a      	add	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	441a      	add	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d118      	bne.n	8008470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <prvInsertBlockIntoFreeList+0xb0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d00d      	beq.n	8008466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	441a      	add	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e008      	b.n	8008478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <prvInsertBlockIntoFreeList+0xb0>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e003      	b.n	8008478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d002      	beq.n	8008486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	20004f88 	.word	0x20004f88
 8008498:	20004f90 	.word	0x20004f90

0800849c <__errno>:
 800849c:	4b01      	ldr	r3, [pc, #4]	; (80084a4 <__errno+0x8>)
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	2000001c 	.word	0x2000001c

080084a8 <__libc_init_array>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	4d0d      	ldr	r5, [pc, #52]	; (80084e0 <__libc_init_array+0x38>)
 80084ac:	4c0d      	ldr	r4, [pc, #52]	; (80084e4 <__libc_init_array+0x3c>)
 80084ae:	1b64      	subs	r4, r4, r5
 80084b0:	10a4      	asrs	r4, r4, #2
 80084b2:	2600      	movs	r6, #0
 80084b4:	42a6      	cmp	r6, r4
 80084b6:	d109      	bne.n	80084cc <__libc_init_array+0x24>
 80084b8:	4d0b      	ldr	r5, [pc, #44]	; (80084e8 <__libc_init_array+0x40>)
 80084ba:	4c0c      	ldr	r4, [pc, #48]	; (80084ec <__libc_init_array+0x44>)
 80084bc:	f005 f8d0 	bl	800d660 <_init>
 80084c0:	1b64      	subs	r4, r4, r5
 80084c2:	10a4      	asrs	r4, r4, #2
 80084c4:	2600      	movs	r6, #0
 80084c6:	42a6      	cmp	r6, r4
 80084c8:	d105      	bne.n	80084d6 <__libc_init_array+0x2e>
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d0:	4798      	blx	r3
 80084d2:	3601      	adds	r6, #1
 80084d4:	e7ee      	b.n	80084b4 <__libc_init_array+0xc>
 80084d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084da:	4798      	blx	r3
 80084dc:	3601      	adds	r6, #1
 80084de:	e7f2      	b.n	80084c6 <__libc_init_array+0x1e>
 80084e0:	0800e52c 	.word	0x0800e52c
 80084e4:	0800e52c 	.word	0x0800e52c
 80084e8:	0800e52c 	.word	0x0800e52c
 80084ec:	0800e530 	.word	0x0800e530

080084f0 <malloc>:
 80084f0:	4b02      	ldr	r3, [pc, #8]	; (80084fc <malloc+0xc>)
 80084f2:	4601      	mov	r1, r0
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	f000 b8a7 	b.w	8008648 <_malloc_r>
 80084fa:	bf00      	nop
 80084fc:	2000001c 	.word	0x2000001c

08008500 <free>:
 8008500:	4b02      	ldr	r3, [pc, #8]	; (800850c <free+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f000 b833 	b.w	8008570 <_free_r>
 800850a:	bf00      	nop
 800850c:	2000001c 	.word	0x2000001c

08008510 <memcpy>:
 8008510:	440a      	add	r2, r1
 8008512:	4291      	cmp	r1, r2
 8008514:	f100 33ff 	add.w	r3, r0, #4294967295
 8008518:	d100      	bne.n	800851c <memcpy+0xc>
 800851a:	4770      	bx	lr
 800851c:	b510      	push	{r4, lr}
 800851e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008526:	4291      	cmp	r1, r2
 8008528:	d1f9      	bne.n	800851e <memcpy+0xe>
 800852a:	bd10      	pop	{r4, pc}

0800852c <memmove>:
 800852c:	4288      	cmp	r0, r1
 800852e:	b510      	push	{r4, lr}
 8008530:	eb01 0402 	add.w	r4, r1, r2
 8008534:	d902      	bls.n	800853c <memmove+0x10>
 8008536:	4284      	cmp	r4, r0
 8008538:	4623      	mov	r3, r4
 800853a:	d807      	bhi.n	800854c <memmove+0x20>
 800853c:	1e43      	subs	r3, r0, #1
 800853e:	42a1      	cmp	r1, r4
 8008540:	d008      	beq.n	8008554 <memmove+0x28>
 8008542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800854a:	e7f8      	b.n	800853e <memmove+0x12>
 800854c:	4402      	add	r2, r0
 800854e:	4601      	mov	r1, r0
 8008550:	428a      	cmp	r2, r1
 8008552:	d100      	bne.n	8008556 <memmove+0x2a>
 8008554:	bd10      	pop	{r4, pc}
 8008556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800855a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800855e:	e7f7      	b.n	8008550 <memmove+0x24>

08008560 <memset>:
 8008560:	4402      	add	r2, r0
 8008562:	4603      	mov	r3, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <_free_r>:
 8008570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008572:	2900      	cmp	r1, #0
 8008574:	d044      	beq.n	8008600 <_free_r+0x90>
 8008576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800857a:	9001      	str	r0, [sp, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f1a1 0404 	sub.w	r4, r1, #4
 8008582:	bfb8      	it	lt
 8008584:	18e4      	addlt	r4, r4, r3
 8008586:	f003 f8d9 	bl	800b73c <__malloc_lock>
 800858a:	4a1e      	ldr	r2, [pc, #120]	; (8008604 <_free_r+0x94>)
 800858c:	9801      	ldr	r0, [sp, #4]
 800858e:	6813      	ldr	r3, [r2, #0]
 8008590:	b933      	cbnz	r3, 80085a0 <_free_r+0x30>
 8008592:	6063      	str	r3, [r4, #4]
 8008594:	6014      	str	r4, [r2, #0]
 8008596:	b003      	add	sp, #12
 8008598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800859c:	f003 b8d4 	b.w	800b748 <__malloc_unlock>
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	d908      	bls.n	80085b6 <_free_r+0x46>
 80085a4:	6825      	ldr	r5, [r4, #0]
 80085a6:	1961      	adds	r1, r4, r5
 80085a8:	428b      	cmp	r3, r1
 80085aa:	bf01      	itttt	eq
 80085ac:	6819      	ldreq	r1, [r3, #0]
 80085ae:	685b      	ldreq	r3, [r3, #4]
 80085b0:	1949      	addeq	r1, r1, r5
 80085b2:	6021      	streq	r1, [r4, #0]
 80085b4:	e7ed      	b.n	8008592 <_free_r+0x22>
 80085b6:	461a      	mov	r2, r3
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	b10b      	cbz	r3, 80085c0 <_free_r+0x50>
 80085bc:	42a3      	cmp	r3, r4
 80085be:	d9fa      	bls.n	80085b6 <_free_r+0x46>
 80085c0:	6811      	ldr	r1, [r2, #0]
 80085c2:	1855      	adds	r5, r2, r1
 80085c4:	42a5      	cmp	r5, r4
 80085c6:	d10b      	bne.n	80085e0 <_free_r+0x70>
 80085c8:	6824      	ldr	r4, [r4, #0]
 80085ca:	4421      	add	r1, r4
 80085cc:	1854      	adds	r4, r2, r1
 80085ce:	42a3      	cmp	r3, r4
 80085d0:	6011      	str	r1, [r2, #0]
 80085d2:	d1e0      	bne.n	8008596 <_free_r+0x26>
 80085d4:	681c      	ldr	r4, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	6053      	str	r3, [r2, #4]
 80085da:	4421      	add	r1, r4
 80085dc:	6011      	str	r1, [r2, #0]
 80085de:	e7da      	b.n	8008596 <_free_r+0x26>
 80085e0:	d902      	bls.n	80085e8 <_free_r+0x78>
 80085e2:	230c      	movs	r3, #12
 80085e4:	6003      	str	r3, [r0, #0]
 80085e6:	e7d6      	b.n	8008596 <_free_r+0x26>
 80085e8:	6825      	ldr	r5, [r4, #0]
 80085ea:	1961      	adds	r1, r4, r5
 80085ec:	428b      	cmp	r3, r1
 80085ee:	bf04      	itt	eq
 80085f0:	6819      	ldreq	r1, [r3, #0]
 80085f2:	685b      	ldreq	r3, [r3, #4]
 80085f4:	6063      	str	r3, [r4, #4]
 80085f6:	bf04      	itt	eq
 80085f8:	1949      	addeq	r1, r1, r5
 80085fa:	6021      	streq	r1, [r4, #0]
 80085fc:	6054      	str	r4, [r2, #4]
 80085fe:	e7ca      	b.n	8008596 <_free_r+0x26>
 8008600:	b003      	add	sp, #12
 8008602:	bd30      	pop	{r4, r5, pc}
 8008604:	20004fa8 	.word	0x20004fa8

08008608 <sbrk_aligned>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	4e0e      	ldr	r6, [pc, #56]	; (8008644 <sbrk_aligned+0x3c>)
 800860c:	460c      	mov	r4, r1
 800860e:	6831      	ldr	r1, [r6, #0]
 8008610:	4605      	mov	r5, r0
 8008612:	b911      	cbnz	r1, 800861a <sbrk_aligned+0x12>
 8008614:	f000 ff06 	bl	8009424 <_sbrk_r>
 8008618:	6030      	str	r0, [r6, #0]
 800861a:	4621      	mov	r1, r4
 800861c:	4628      	mov	r0, r5
 800861e:	f000 ff01 	bl	8009424 <_sbrk_r>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	d00a      	beq.n	800863c <sbrk_aligned+0x34>
 8008626:	1cc4      	adds	r4, r0, #3
 8008628:	f024 0403 	bic.w	r4, r4, #3
 800862c:	42a0      	cmp	r0, r4
 800862e:	d007      	beq.n	8008640 <sbrk_aligned+0x38>
 8008630:	1a21      	subs	r1, r4, r0
 8008632:	4628      	mov	r0, r5
 8008634:	f000 fef6 	bl	8009424 <_sbrk_r>
 8008638:	3001      	adds	r0, #1
 800863a:	d101      	bne.n	8008640 <sbrk_aligned+0x38>
 800863c:	f04f 34ff 	mov.w	r4, #4294967295
 8008640:	4620      	mov	r0, r4
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	20004fac 	.word	0x20004fac

08008648 <_malloc_r>:
 8008648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864c:	1ccd      	adds	r5, r1, #3
 800864e:	f025 0503 	bic.w	r5, r5, #3
 8008652:	3508      	adds	r5, #8
 8008654:	2d0c      	cmp	r5, #12
 8008656:	bf38      	it	cc
 8008658:	250c      	movcc	r5, #12
 800865a:	2d00      	cmp	r5, #0
 800865c:	4607      	mov	r7, r0
 800865e:	db01      	blt.n	8008664 <_malloc_r+0x1c>
 8008660:	42a9      	cmp	r1, r5
 8008662:	d905      	bls.n	8008670 <_malloc_r+0x28>
 8008664:	230c      	movs	r3, #12
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	2600      	movs	r6, #0
 800866a:	4630      	mov	r0, r6
 800866c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008670:	4e2e      	ldr	r6, [pc, #184]	; (800872c <_malloc_r+0xe4>)
 8008672:	f003 f863 	bl	800b73c <__malloc_lock>
 8008676:	6833      	ldr	r3, [r6, #0]
 8008678:	461c      	mov	r4, r3
 800867a:	bb34      	cbnz	r4, 80086ca <_malloc_r+0x82>
 800867c:	4629      	mov	r1, r5
 800867e:	4638      	mov	r0, r7
 8008680:	f7ff ffc2 	bl	8008608 <sbrk_aligned>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	4604      	mov	r4, r0
 8008688:	d14d      	bne.n	8008726 <_malloc_r+0xde>
 800868a:	6834      	ldr	r4, [r6, #0]
 800868c:	4626      	mov	r6, r4
 800868e:	2e00      	cmp	r6, #0
 8008690:	d140      	bne.n	8008714 <_malloc_r+0xcc>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	4631      	mov	r1, r6
 8008696:	4638      	mov	r0, r7
 8008698:	eb04 0803 	add.w	r8, r4, r3
 800869c:	f000 fec2 	bl	8009424 <_sbrk_r>
 80086a0:	4580      	cmp	r8, r0
 80086a2:	d13a      	bne.n	800871a <_malloc_r+0xd2>
 80086a4:	6821      	ldr	r1, [r4, #0]
 80086a6:	3503      	adds	r5, #3
 80086a8:	1a6d      	subs	r5, r5, r1
 80086aa:	f025 0503 	bic.w	r5, r5, #3
 80086ae:	3508      	adds	r5, #8
 80086b0:	2d0c      	cmp	r5, #12
 80086b2:	bf38      	it	cc
 80086b4:	250c      	movcc	r5, #12
 80086b6:	4629      	mov	r1, r5
 80086b8:	4638      	mov	r0, r7
 80086ba:	f7ff ffa5 	bl	8008608 <sbrk_aligned>
 80086be:	3001      	adds	r0, #1
 80086c0:	d02b      	beq.n	800871a <_malloc_r+0xd2>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	442b      	add	r3, r5
 80086c6:	6023      	str	r3, [r4, #0]
 80086c8:	e00e      	b.n	80086e8 <_malloc_r+0xa0>
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	1b52      	subs	r2, r2, r5
 80086ce:	d41e      	bmi.n	800870e <_malloc_r+0xc6>
 80086d0:	2a0b      	cmp	r2, #11
 80086d2:	d916      	bls.n	8008702 <_malloc_r+0xba>
 80086d4:	1961      	adds	r1, r4, r5
 80086d6:	42a3      	cmp	r3, r4
 80086d8:	6025      	str	r5, [r4, #0]
 80086da:	bf18      	it	ne
 80086dc:	6059      	strne	r1, [r3, #4]
 80086de:	6863      	ldr	r3, [r4, #4]
 80086e0:	bf08      	it	eq
 80086e2:	6031      	streq	r1, [r6, #0]
 80086e4:	5162      	str	r2, [r4, r5]
 80086e6:	604b      	str	r3, [r1, #4]
 80086e8:	4638      	mov	r0, r7
 80086ea:	f104 060b 	add.w	r6, r4, #11
 80086ee:	f003 f82b 	bl	800b748 <__malloc_unlock>
 80086f2:	f026 0607 	bic.w	r6, r6, #7
 80086f6:	1d23      	adds	r3, r4, #4
 80086f8:	1af2      	subs	r2, r6, r3
 80086fa:	d0b6      	beq.n	800866a <_malloc_r+0x22>
 80086fc:	1b9b      	subs	r3, r3, r6
 80086fe:	50a3      	str	r3, [r4, r2]
 8008700:	e7b3      	b.n	800866a <_malloc_r+0x22>
 8008702:	6862      	ldr	r2, [r4, #4]
 8008704:	42a3      	cmp	r3, r4
 8008706:	bf0c      	ite	eq
 8008708:	6032      	streq	r2, [r6, #0]
 800870a:	605a      	strne	r2, [r3, #4]
 800870c:	e7ec      	b.n	80086e8 <_malloc_r+0xa0>
 800870e:	4623      	mov	r3, r4
 8008710:	6864      	ldr	r4, [r4, #4]
 8008712:	e7b2      	b.n	800867a <_malloc_r+0x32>
 8008714:	4634      	mov	r4, r6
 8008716:	6876      	ldr	r6, [r6, #4]
 8008718:	e7b9      	b.n	800868e <_malloc_r+0x46>
 800871a:	230c      	movs	r3, #12
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	4638      	mov	r0, r7
 8008720:	f003 f812 	bl	800b748 <__malloc_unlock>
 8008724:	e7a1      	b.n	800866a <_malloc_r+0x22>
 8008726:	6025      	str	r5, [r4, #0]
 8008728:	e7de      	b.n	80086e8 <_malloc_r+0xa0>
 800872a:	bf00      	nop
 800872c:	20004fa8 	.word	0x20004fa8

08008730 <__cvt>:
 8008730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008734:	ec55 4b10 	vmov	r4, r5, d0
 8008738:	2d00      	cmp	r5, #0
 800873a:	460e      	mov	r6, r1
 800873c:	4619      	mov	r1, r3
 800873e:	462b      	mov	r3, r5
 8008740:	bfbb      	ittet	lt
 8008742:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008746:	461d      	movlt	r5, r3
 8008748:	2300      	movge	r3, #0
 800874a:	232d      	movlt	r3, #45	; 0x2d
 800874c:	700b      	strb	r3, [r1, #0]
 800874e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008750:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008754:	4691      	mov	r9, r2
 8008756:	f023 0820 	bic.w	r8, r3, #32
 800875a:	bfbc      	itt	lt
 800875c:	4622      	movlt	r2, r4
 800875e:	4614      	movlt	r4, r2
 8008760:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008764:	d005      	beq.n	8008772 <__cvt+0x42>
 8008766:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800876a:	d100      	bne.n	800876e <__cvt+0x3e>
 800876c:	3601      	adds	r6, #1
 800876e:	2102      	movs	r1, #2
 8008770:	e000      	b.n	8008774 <__cvt+0x44>
 8008772:	2103      	movs	r1, #3
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	ab02      	add	r3, sp, #8
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	ec45 4b10 	vmov	d0, r4, r5
 8008780:	4653      	mov	r3, sl
 8008782:	4632      	mov	r2, r6
 8008784:	f001 fe54 	bl	800a430 <_dtoa_r>
 8008788:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800878c:	4607      	mov	r7, r0
 800878e:	d102      	bne.n	8008796 <__cvt+0x66>
 8008790:	f019 0f01 	tst.w	r9, #1
 8008794:	d022      	beq.n	80087dc <__cvt+0xac>
 8008796:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800879a:	eb07 0906 	add.w	r9, r7, r6
 800879e:	d110      	bne.n	80087c2 <__cvt+0x92>
 80087a0:	783b      	ldrb	r3, [r7, #0]
 80087a2:	2b30      	cmp	r3, #48	; 0x30
 80087a4:	d10a      	bne.n	80087bc <__cvt+0x8c>
 80087a6:	2200      	movs	r2, #0
 80087a8:	2300      	movs	r3, #0
 80087aa:	4620      	mov	r0, r4
 80087ac:	4629      	mov	r1, r5
 80087ae:	f7f8 f993 	bl	8000ad8 <__aeabi_dcmpeq>
 80087b2:	b918      	cbnz	r0, 80087bc <__cvt+0x8c>
 80087b4:	f1c6 0601 	rsb	r6, r6, #1
 80087b8:	f8ca 6000 	str.w	r6, [sl]
 80087bc:	f8da 3000 	ldr.w	r3, [sl]
 80087c0:	4499      	add	r9, r3
 80087c2:	2200      	movs	r2, #0
 80087c4:	2300      	movs	r3, #0
 80087c6:	4620      	mov	r0, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	f7f8 f985 	bl	8000ad8 <__aeabi_dcmpeq>
 80087ce:	b108      	cbz	r0, 80087d4 <__cvt+0xa4>
 80087d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80087d4:	2230      	movs	r2, #48	; 0x30
 80087d6:	9b03      	ldr	r3, [sp, #12]
 80087d8:	454b      	cmp	r3, r9
 80087da:	d307      	bcc.n	80087ec <__cvt+0xbc>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087e0:	1bdb      	subs	r3, r3, r7
 80087e2:	4638      	mov	r0, r7
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	b004      	add	sp, #16
 80087e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ec:	1c59      	adds	r1, r3, #1
 80087ee:	9103      	str	r1, [sp, #12]
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	e7f0      	b.n	80087d6 <__cvt+0xa6>

080087f4 <__exponent>:
 80087f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087f6:	4603      	mov	r3, r0
 80087f8:	2900      	cmp	r1, #0
 80087fa:	bfb8      	it	lt
 80087fc:	4249      	neglt	r1, r1
 80087fe:	f803 2b02 	strb.w	r2, [r3], #2
 8008802:	bfb4      	ite	lt
 8008804:	222d      	movlt	r2, #45	; 0x2d
 8008806:	222b      	movge	r2, #43	; 0x2b
 8008808:	2909      	cmp	r1, #9
 800880a:	7042      	strb	r2, [r0, #1]
 800880c:	dd2a      	ble.n	8008864 <__exponent+0x70>
 800880e:	f10d 0407 	add.w	r4, sp, #7
 8008812:	46a4      	mov	ip, r4
 8008814:	270a      	movs	r7, #10
 8008816:	46a6      	mov	lr, r4
 8008818:	460a      	mov	r2, r1
 800881a:	fb91 f6f7 	sdiv	r6, r1, r7
 800881e:	fb07 1516 	mls	r5, r7, r6, r1
 8008822:	3530      	adds	r5, #48	; 0x30
 8008824:	2a63      	cmp	r2, #99	; 0x63
 8008826:	f104 34ff 	add.w	r4, r4, #4294967295
 800882a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800882e:	4631      	mov	r1, r6
 8008830:	dcf1      	bgt.n	8008816 <__exponent+0x22>
 8008832:	3130      	adds	r1, #48	; 0x30
 8008834:	f1ae 0502 	sub.w	r5, lr, #2
 8008838:	f804 1c01 	strb.w	r1, [r4, #-1]
 800883c:	1c44      	adds	r4, r0, #1
 800883e:	4629      	mov	r1, r5
 8008840:	4561      	cmp	r1, ip
 8008842:	d30a      	bcc.n	800885a <__exponent+0x66>
 8008844:	f10d 0209 	add.w	r2, sp, #9
 8008848:	eba2 020e 	sub.w	r2, r2, lr
 800884c:	4565      	cmp	r5, ip
 800884e:	bf88      	it	hi
 8008850:	2200      	movhi	r2, #0
 8008852:	4413      	add	r3, r2
 8008854:	1a18      	subs	r0, r3, r0
 8008856:	b003      	add	sp, #12
 8008858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800885e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008862:	e7ed      	b.n	8008840 <__exponent+0x4c>
 8008864:	2330      	movs	r3, #48	; 0x30
 8008866:	3130      	adds	r1, #48	; 0x30
 8008868:	7083      	strb	r3, [r0, #2]
 800886a:	70c1      	strb	r1, [r0, #3]
 800886c:	1d03      	adds	r3, r0, #4
 800886e:	e7f1      	b.n	8008854 <__exponent+0x60>

08008870 <_printf_float>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	ed2d 8b02 	vpush	{d8}
 8008878:	b08d      	sub	sp, #52	; 0x34
 800887a:	460c      	mov	r4, r1
 800887c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008880:	4616      	mov	r6, r2
 8008882:	461f      	mov	r7, r3
 8008884:	4605      	mov	r5, r0
 8008886:	f002 ff31 	bl	800b6ec <_localeconv_r>
 800888a:	f8d0 a000 	ldr.w	sl, [r0]
 800888e:	4650      	mov	r0, sl
 8008890:	f7f7 fca6 	bl	80001e0 <strlen>
 8008894:	2300      	movs	r3, #0
 8008896:	930a      	str	r3, [sp, #40]	; 0x28
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	f8d8 3000 	ldr.w	r3, [r8]
 80088a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80088a4:	3307      	adds	r3, #7
 80088a6:	f023 0307 	bic.w	r3, r3, #7
 80088aa:	f103 0208 	add.w	r2, r3, #8
 80088ae:	f8c8 2000 	str.w	r2, [r8]
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80088ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80088be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088c2:	9307      	str	r3, [sp, #28]
 80088c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80088c8:	ee08 0a10 	vmov	s16, r0
 80088cc:	4b9f      	ldr	r3, [pc, #636]	; (8008b4c <_printf_float+0x2dc>)
 80088ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	f7f8 f931 	bl	8000b3c <__aeabi_dcmpun>
 80088da:	bb88      	cbnz	r0, 8008940 <_printf_float+0xd0>
 80088dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088e0:	4b9a      	ldr	r3, [pc, #616]	; (8008b4c <_printf_float+0x2dc>)
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295
 80088e6:	f7f8 f90b 	bl	8000b00 <__aeabi_dcmple>
 80088ea:	bb48      	cbnz	r0, 8008940 <_printf_float+0xd0>
 80088ec:	2200      	movs	r2, #0
 80088ee:	2300      	movs	r3, #0
 80088f0:	4640      	mov	r0, r8
 80088f2:	4649      	mov	r1, r9
 80088f4:	f7f8 f8fa 	bl	8000aec <__aeabi_dcmplt>
 80088f8:	b110      	cbz	r0, 8008900 <_printf_float+0x90>
 80088fa:	232d      	movs	r3, #45	; 0x2d
 80088fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008900:	4b93      	ldr	r3, [pc, #588]	; (8008b50 <_printf_float+0x2e0>)
 8008902:	4894      	ldr	r0, [pc, #592]	; (8008b54 <_printf_float+0x2e4>)
 8008904:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008908:	bf94      	ite	ls
 800890a:	4698      	movls	r8, r3
 800890c:	4680      	movhi	r8, r0
 800890e:	2303      	movs	r3, #3
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	9b05      	ldr	r3, [sp, #20]
 8008914:	f023 0204 	bic.w	r2, r3, #4
 8008918:	6022      	str	r2, [r4, #0]
 800891a:	f04f 0900 	mov.w	r9, #0
 800891e:	9700      	str	r7, [sp, #0]
 8008920:	4633      	mov	r3, r6
 8008922:	aa0b      	add	r2, sp, #44	; 0x2c
 8008924:	4621      	mov	r1, r4
 8008926:	4628      	mov	r0, r5
 8008928:	f000 f9d8 	bl	8008cdc <_printf_common>
 800892c:	3001      	adds	r0, #1
 800892e:	f040 8090 	bne.w	8008a52 <_printf_float+0x1e2>
 8008932:	f04f 30ff 	mov.w	r0, #4294967295
 8008936:	b00d      	add	sp, #52	; 0x34
 8008938:	ecbd 8b02 	vpop	{d8}
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	4642      	mov	r2, r8
 8008942:	464b      	mov	r3, r9
 8008944:	4640      	mov	r0, r8
 8008946:	4649      	mov	r1, r9
 8008948:	f7f8 f8f8 	bl	8000b3c <__aeabi_dcmpun>
 800894c:	b140      	cbz	r0, 8008960 <_printf_float+0xf0>
 800894e:	464b      	mov	r3, r9
 8008950:	2b00      	cmp	r3, #0
 8008952:	bfbc      	itt	lt
 8008954:	232d      	movlt	r3, #45	; 0x2d
 8008956:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800895a:	487f      	ldr	r0, [pc, #508]	; (8008b58 <_printf_float+0x2e8>)
 800895c:	4b7f      	ldr	r3, [pc, #508]	; (8008b5c <_printf_float+0x2ec>)
 800895e:	e7d1      	b.n	8008904 <_printf_float+0x94>
 8008960:	6863      	ldr	r3, [r4, #4]
 8008962:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008966:	9206      	str	r2, [sp, #24]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	d13f      	bne.n	80089ec <_printf_float+0x17c>
 800896c:	2306      	movs	r3, #6
 800896e:	6063      	str	r3, [r4, #4]
 8008970:	9b05      	ldr	r3, [sp, #20]
 8008972:	6861      	ldr	r1, [r4, #4]
 8008974:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008978:	2300      	movs	r3, #0
 800897a:	9303      	str	r3, [sp, #12]
 800897c:	ab0a      	add	r3, sp, #40	; 0x28
 800897e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008982:	ab09      	add	r3, sp, #36	; 0x24
 8008984:	ec49 8b10 	vmov	d0, r8, r9
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	6022      	str	r2, [r4, #0]
 800898c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008990:	4628      	mov	r0, r5
 8008992:	f7ff fecd 	bl	8008730 <__cvt>
 8008996:	9b06      	ldr	r3, [sp, #24]
 8008998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800899a:	2b47      	cmp	r3, #71	; 0x47
 800899c:	4680      	mov	r8, r0
 800899e:	d108      	bne.n	80089b2 <_printf_float+0x142>
 80089a0:	1cc8      	adds	r0, r1, #3
 80089a2:	db02      	blt.n	80089aa <_printf_float+0x13a>
 80089a4:	6863      	ldr	r3, [r4, #4]
 80089a6:	4299      	cmp	r1, r3
 80089a8:	dd41      	ble.n	8008a2e <_printf_float+0x1be>
 80089aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80089ae:	fa5f fb8b 	uxtb.w	fp, fp
 80089b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089b6:	d820      	bhi.n	80089fa <_printf_float+0x18a>
 80089b8:	3901      	subs	r1, #1
 80089ba:	465a      	mov	r2, fp
 80089bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089c0:	9109      	str	r1, [sp, #36]	; 0x24
 80089c2:	f7ff ff17 	bl	80087f4 <__exponent>
 80089c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089c8:	1813      	adds	r3, r2, r0
 80089ca:	2a01      	cmp	r2, #1
 80089cc:	4681      	mov	r9, r0
 80089ce:	6123      	str	r3, [r4, #16]
 80089d0:	dc02      	bgt.n	80089d8 <_printf_float+0x168>
 80089d2:	6822      	ldr	r2, [r4, #0]
 80089d4:	07d2      	lsls	r2, r2, #31
 80089d6:	d501      	bpl.n	80089dc <_printf_float+0x16c>
 80089d8:	3301      	adds	r3, #1
 80089da:	6123      	str	r3, [r4, #16]
 80089dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d09c      	beq.n	800891e <_printf_float+0xae>
 80089e4:	232d      	movs	r3, #45	; 0x2d
 80089e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ea:	e798      	b.n	800891e <_printf_float+0xae>
 80089ec:	9a06      	ldr	r2, [sp, #24]
 80089ee:	2a47      	cmp	r2, #71	; 0x47
 80089f0:	d1be      	bne.n	8008970 <_printf_float+0x100>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1bc      	bne.n	8008970 <_printf_float+0x100>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e7b9      	b.n	800896e <_printf_float+0xfe>
 80089fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80089fe:	d118      	bne.n	8008a32 <_printf_float+0x1c2>
 8008a00:	2900      	cmp	r1, #0
 8008a02:	6863      	ldr	r3, [r4, #4]
 8008a04:	dd0b      	ble.n	8008a1e <_printf_float+0x1ae>
 8008a06:	6121      	str	r1, [r4, #16]
 8008a08:	b913      	cbnz	r3, 8008a10 <_printf_float+0x1a0>
 8008a0a:	6822      	ldr	r2, [r4, #0]
 8008a0c:	07d0      	lsls	r0, r2, #31
 8008a0e:	d502      	bpl.n	8008a16 <_printf_float+0x1a6>
 8008a10:	3301      	adds	r3, #1
 8008a12:	440b      	add	r3, r1
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a18:	f04f 0900 	mov.w	r9, #0
 8008a1c:	e7de      	b.n	80089dc <_printf_float+0x16c>
 8008a1e:	b913      	cbnz	r3, 8008a26 <_printf_float+0x1b6>
 8008a20:	6822      	ldr	r2, [r4, #0]
 8008a22:	07d2      	lsls	r2, r2, #31
 8008a24:	d501      	bpl.n	8008a2a <_printf_float+0x1ba>
 8008a26:	3302      	adds	r3, #2
 8008a28:	e7f4      	b.n	8008a14 <_printf_float+0x1a4>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e7f2      	b.n	8008a14 <_printf_float+0x1a4>
 8008a2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a34:	4299      	cmp	r1, r3
 8008a36:	db05      	blt.n	8008a44 <_printf_float+0x1d4>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	6121      	str	r1, [r4, #16]
 8008a3c:	07d8      	lsls	r0, r3, #31
 8008a3e:	d5ea      	bpl.n	8008a16 <_printf_float+0x1a6>
 8008a40:	1c4b      	adds	r3, r1, #1
 8008a42:	e7e7      	b.n	8008a14 <_printf_float+0x1a4>
 8008a44:	2900      	cmp	r1, #0
 8008a46:	bfd4      	ite	le
 8008a48:	f1c1 0202 	rsble	r2, r1, #2
 8008a4c:	2201      	movgt	r2, #1
 8008a4e:	4413      	add	r3, r2
 8008a50:	e7e0      	b.n	8008a14 <_printf_float+0x1a4>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	055a      	lsls	r2, r3, #21
 8008a56:	d407      	bmi.n	8008a68 <_printf_float+0x1f8>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	4642      	mov	r2, r8
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b8      	blx	r7
 8008a62:	3001      	adds	r0, #1
 8008a64:	d12c      	bne.n	8008ac0 <_printf_float+0x250>
 8008a66:	e764      	b.n	8008932 <_printf_float+0xc2>
 8008a68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a6c:	f240 80e0 	bls.w	8008c30 <_printf_float+0x3c0>
 8008a70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a74:	2200      	movs	r2, #0
 8008a76:	2300      	movs	r3, #0
 8008a78:	f7f8 f82e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d034      	beq.n	8008aea <_printf_float+0x27a>
 8008a80:	4a37      	ldr	r2, [pc, #220]	; (8008b60 <_printf_float+0x2f0>)
 8008a82:	2301      	movs	r3, #1
 8008a84:	4631      	mov	r1, r6
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f43f af51 	beq.w	8008932 <_printf_float+0xc2>
 8008a90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a94:	429a      	cmp	r2, r3
 8008a96:	db02      	blt.n	8008a9e <_printf_float+0x22e>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	07d8      	lsls	r0, r3, #31
 8008a9c:	d510      	bpl.n	8008ac0 <_printf_float+0x250>
 8008a9e:	ee18 3a10 	vmov	r3, s16
 8008aa2:	4652      	mov	r2, sl
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b8      	blx	r7
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f43f af41 	beq.w	8008932 <_printf_float+0xc2>
 8008ab0:	f04f 0800 	mov.w	r8, #0
 8008ab4:	f104 091a 	add.w	r9, r4, #26
 8008ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aba:	3b01      	subs	r3, #1
 8008abc:	4543      	cmp	r3, r8
 8008abe:	dc09      	bgt.n	8008ad4 <_printf_float+0x264>
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	079b      	lsls	r3, r3, #30
 8008ac4:	f100 8105 	bmi.w	8008cd2 <_printf_float+0x462>
 8008ac8:	68e0      	ldr	r0, [r4, #12]
 8008aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008acc:	4298      	cmp	r0, r3
 8008ace:	bfb8      	it	lt
 8008ad0:	4618      	movlt	r0, r3
 8008ad2:	e730      	b.n	8008936 <_printf_float+0xc6>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	464a      	mov	r2, r9
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4628      	mov	r0, r5
 8008adc:	47b8      	blx	r7
 8008ade:	3001      	adds	r0, #1
 8008ae0:	f43f af27 	beq.w	8008932 <_printf_float+0xc2>
 8008ae4:	f108 0801 	add.w	r8, r8, #1
 8008ae8:	e7e6      	b.n	8008ab8 <_printf_float+0x248>
 8008aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dc39      	bgt.n	8008b64 <_printf_float+0x2f4>
 8008af0:	4a1b      	ldr	r2, [pc, #108]	; (8008b60 <_printf_float+0x2f0>)
 8008af2:	2301      	movs	r3, #1
 8008af4:	4631      	mov	r1, r6
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	f43f af19 	beq.w	8008932 <_printf_float+0xc2>
 8008b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b04:	4313      	orrs	r3, r2
 8008b06:	d102      	bne.n	8008b0e <_printf_float+0x29e>
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	07d9      	lsls	r1, r3, #31
 8008b0c:	d5d8      	bpl.n	8008ac0 <_printf_float+0x250>
 8008b0e:	ee18 3a10 	vmov	r3, s16
 8008b12:	4652      	mov	r2, sl
 8008b14:	4631      	mov	r1, r6
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b8      	blx	r7
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f43f af09 	beq.w	8008932 <_printf_float+0xc2>
 8008b20:	f04f 0900 	mov.w	r9, #0
 8008b24:	f104 0a1a 	add.w	sl, r4, #26
 8008b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2a:	425b      	negs	r3, r3
 8008b2c:	454b      	cmp	r3, r9
 8008b2e:	dc01      	bgt.n	8008b34 <_printf_float+0x2c4>
 8008b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b32:	e792      	b.n	8008a5a <_printf_float+0x1ea>
 8008b34:	2301      	movs	r3, #1
 8008b36:	4652      	mov	r2, sl
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f aef7 	beq.w	8008932 <_printf_float+0xc2>
 8008b44:	f109 0901 	add.w	r9, r9, #1
 8008b48:	e7ee      	b.n	8008b28 <_printf_float+0x2b8>
 8008b4a:	bf00      	nop
 8008b4c:	7fefffff 	.word	0x7fefffff
 8008b50:	0800e070 	.word	0x0800e070
 8008b54:	0800e074 	.word	0x0800e074
 8008b58:	0800e07c 	.word	0x0800e07c
 8008b5c:	0800e078 	.word	0x0800e078
 8008b60:	0800e471 	.word	0x0800e471
 8008b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	bfa8      	it	ge
 8008b6c:	461a      	movge	r2, r3
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	4691      	mov	r9, r2
 8008b72:	dc37      	bgt.n	8008be4 <_printf_float+0x374>
 8008b74:	f04f 0b00 	mov.w	fp, #0
 8008b78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b7c:	f104 021a 	add.w	r2, r4, #26
 8008b80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b82:	9305      	str	r3, [sp, #20]
 8008b84:	eba3 0309 	sub.w	r3, r3, r9
 8008b88:	455b      	cmp	r3, fp
 8008b8a:	dc33      	bgt.n	8008bf4 <_printf_float+0x384>
 8008b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b90:	429a      	cmp	r2, r3
 8008b92:	db3b      	blt.n	8008c0c <_printf_float+0x39c>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	07da      	lsls	r2, r3, #31
 8008b98:	d438      	bmi.n	8008c0c <_printf_float+0x39c>
 8008b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9c:	9a05      	ldr	r2, [sp, #20]
 8008b9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ba0:	1a9a      	subs	r2, r3, r2
 8008ba2:	eba3 0901 	sub.w	r9, r3, r1
 8008ba6:	4591      	cmp	r9, r2
 8008ba8:	bfa8      	it	ge
 8008baa:	4691      	movge	r9, r2
 8008bac:	f1b9 0f00 	cmp.w	r9, #0
 8008bb0:	dc35      	bgt.n	8008c1e <_printf_float+0x3ae>
 8008bb2:	f04f 0800 	mov.w	r8, #0
 8008bb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bba:	f104 0a1a 	add.w	sl, r4, #26
 8008bbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bc2:	1a9b      	subs	r3, r3, r2
 8008bc4:	eba3 0309 	sub.w	r3, r3, r9
 8008bc8:	4543      	cmp	r3, r8
 8008bca:	f77f af79 	ble.w	8008ac0 <_printf_float+0x250>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4652      	mov	r2, sl
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	47b8      	blx	r7
 8008bd8:	3001      	adds	r0, #1
 8008bda:	f43f aeaa 	beq.w	8008932 <_printf_float+0xc2>
 8008bde:	f108 0801 	add.w	r8, r8, #1
 8008be2:	e7ec      	b.n	8008bbe <_printf_float+0x34e>
 8008be4:	4613      	mov	r3, r2
 8008be6:	4631      	mov	r1, r6
 8008be8:	4642      	mov	r2, r8
 8008bea:	4628      	mov	r0, r5
 8008bec:	47b8      	blx	r7
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d1c0      	bne.n	8008b74 <_printf_float+0x304>
 8008bf2:	e69e      	b.n	8008932 <_printf_float+0xc2>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	9205      	str	r2, [sp, #20]
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f ae97 	beq.w	8008932 <_printf_float+0xc2>
 8008c04:	9a05      	ldr	r2, [sp, #20]
 8008c06:	f10b 0b01 	add.w	fp, fp, #1
 8008c0a:	e7b9      	b.n	8008b80 <_printf_float+0x310>
 8008c0c:	ee18 3a10 	vmov	r3, s16
 8008c10:	4652      	mov	r2, sl
 8008c12:	4631      	mov	r1, r6
 8008c14:	4628      	mov	r0, r5
 8008c16:	47b8      	blx	r7
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d1be      	bne.n	8008b9a <_printf_float+0x32a>
 8008c1c:	e689      	b.n	8008932 <_printf_float+0xc2>
 8008c1e:	9a05      	ldr	r2, [sp, #20]
 8008c20:	464b      	mov	r3, r9
 8008c22:	4442      	add	r2, r8
 8008c24:	4631      	mov	r1, r6
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b8      	blx	r7
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	d1c1      	bne.n	8008bb2 <_printf_float+0x342>
 8008c2e:	e680      	b.n	8008932 <_printf_float+0xc2>
 8008c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c32:	2a01      	cmp	r2, #1
 8008c34:	dc01      	bgt.n	8008c3a <_printf_float+0x3ca>
 8008c36:	07db      	lsls	r3, r3, #31
 8008c38:	d538      	bpl.n	8008cac <_printf_float+0x43c>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	4631      	mov	r1, r6
 8008c40:	4628      	mov	r0, r5
 8008c42:	47b8      	blx	r7
 8008c44:	3001      	adds	r0, #1
 8008c46:	f43f ae74 	beq.w	8008932 <_printf_float+0xc2>
 8008c4a:	ee18 3a10 	vmov	r3, s16
 8008c4e:	4652      	mov	r2, sl
 8008c50:	4631      	mov	r1, r6
 8008c52:	4628      	mov	r0, r5
 8008c54:	47b8      	blx	r7
 8008c56:	3001      	adds	r0, #1
 8008c58:	f43f ae6b 	beq.w	8008932 <_printf_float+0xc2>
 8008c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c60:	2200      	movs	r2, #0
 8008c62:	2300      	movs	r3, #0
 8008c64:	f7f7 ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c68:	b9d8      	cbnz	r0, 8008ca2 <_printf_float+0x432>
 8008c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c6c:	f108 0201 	add.w	r2, r8, #1
 8008c70:	3b01      	subs	r3, #1
 8008c72:	4631      	mov	r1, r6
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d10e      	bne.n	8008c9a <_printf_float+0x42a>
 8008c7c:	e659      	b.n	8008932 <_printf_float+0xc2>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4652      	mov	r2, sl
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	f43f ae52 	beq.w	8008932 <_printf_float+0xc2>
 8008c8e:	f108 0801 	add.w	r8, r8, #1
 8008c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c94:	3b01      	subs	r3, #1
 8008c96:	4543      	cmp	r3, r8
 8008c98:	dcf1      	bgt.n	8008c7e <_printf_float+0x40e>
 8008c9a:	464b      	mov	r3, r9
 8008c9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ca0:	e6dc      	b.n	8008a5c <_printf_float+0x1ec>
 8008ca2:	f04f 0800 	mov.w	r8, #0
 8008ca6:	f104 0a1a 	add.w	sl, r4, #26
 8008caa:	e7f2      	b.n	8008c92 <_printf_float+0x422>
 8008cac:	2301      	movs	r3, #1
 8008cae:	4642      	mov	r2, r8
 8008cb0:	e7df      	b.n	8008c72 <_printf_float+0x402>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	464a      	mov	r2, r9
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4628      	mov	r0, r5
 8008cba:	47b8      	blx	r7
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	f43f ae38 	beq.w	8008932 <_printf_float+0xc2>
 8008cc2:	f108 0801 	add.w	r8, r8, #1
 8008cc6:	68e3      	ldr	r3, [r4, #12]
 8008cc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cca:	1a5b      	subs	r3, r3, r1
 8008ccc:	4543      	cmp	r3, r8
 8008cce:	dcf0      	bgt.n	8008cb2 <_printf_float+0x442>
 8008cd0:	e6fa      	b.n	8008ac8 <_printf_float+0x258>
 8008cd2:	f04f 0800 	mov.w	r8, #0
 8008cd6:	f104 0919 	add.w	r9, r4, #25
 8008cda:	e7f4      	b.n	8008cc6 <_printf_float+0x456>

08008cdc <_printf_common>:
 8008cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	4699      	mov	r9, r3
 8008ce4:	688a      	ldr	r2, [r1, #8]
 8008ce6:	690b      	ldr	r3, [r1, #16]
 8008ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cec:	4293      	cmp	r3, r2
 8008cee:	bfb8      	it	lt
 8008cf0:	4613      	movlt	r3, r2
 8008cf2:	6033      	str	r3, [r6, #0]
 8008cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cf8:	4607      	mov	r7, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	b10a      	cbz	r2, 8008d02 <_printf_common+0x26>
 8008cfe:	3301      	adds	r3, #1
 8008d00:	6033      	str	r3, [r6, #0]
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	0699      	lsls	r1, r3, #26
 8008d06:	bf42      	ittt	mi
 8008d08:	6833      	ldrmi	r3, [r6, #0]
 8008d0a:	3302      	addmi	r3, #2
 8008d0c:	6033      	strmi	r3, [r6, #0]
 8008d0e:	6825      	ldr	r5, [r4, #0]
 8008d10:	f015 0506 	ands.w	r5, r5, #6
 8008d14:	d106      	bne.n	8008d24 <_printf_common+0x48>
 8008d16:	f104 0a19 	add.w	sl, r4, #25
 8008d1a:	68e3      	ldr	r3, [r4, #12]
 8008d1c:	6832      	ldr	r2, [r6, #0]
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	42ab      	cmp	r3, r5
 8008d22:	dc26      	bgt.n	8008d72 <_printf_common+0x96>
 8008d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d28:	1e13      	subs	r3, r2, #0
 8008d2a:	6822      	ldr	r2, [r4, #0]
 8008d2c:	bf18      	it	ne
 8008d2e:	2301      	movne	r3, #1
 8008d30:	0692      	lsls	r2, r2, #26
 8008d32:	d42b      	bmi.n	8008d8c <_printf_common+0xb0>
 8008d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d38:	4649      	mov	r1, r9
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	47c0      	blx	r8
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d01e      	beq.n	8008d80 <_printf_common+0xa4>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	68e5      	ldr	r5, [r4, #12]
 8008d46:	6832      	ldr	r2, [r6, #0]
 8008d48:	f003 0306 	and.w	r3, r3, #6
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	bf08      	it	eq
 8008d50:	1aad      	subeq	r5, r5, r2
 8008d52:	68a3      	ldr	r3, [r4, #8]
 8008d54:	6922      	ldr	r2, [r4, #16]
 8008d56:	bf0c      	ite	eq
 8008d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d5c:	2500      	movne	r5, #0
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	bfc4      	itt	gt
 8008d62:	1a9b      	subgt	r3, r3, r2
 8008d64:	18ed      	addgt	r5, r5, r3
 8008d66:	2600      	movs	r6, #0
 8008d68:	341a      	adds	r4, #26
 8008d6a:	42b5      	cmp	r5, r6
 8008d6c:	d11a      	bne.n	8008da4 <_printf_common+0xc8>
 8008d6e:	2000      	movs	r0, #0
 8008d70:	e008      	b.n	8008d84 <_printf_common+0xa8>
 8008d72:	2301      	movs	r3, #1
 8008d74:	4652      	mov	r2, sl
 8008d76:	4649      	mov	r1, r9
 8008d78:	4638      	mov	r0, r7
 8008d7a:	47c0      	blx	r8
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d103      	bne.n	8008d88 <_printf_common+0xac>
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	3501      	adds	r5, #1
 8008d8a:	e7c6      	b.n	8008d1a <_printf_common+0x3e>
 8008d8c:	18e1      	adds	r1, r4, r3
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	2030      	movs	r0, #48	; 0x30
 8008d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d96:	4422      	add	r2, r4
 8008d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008da0:	3302      	adds	r3, #2
 8008da2:	e7c7      	b.n	8008d34 <_printf_common+0x58>
 8008da4:	2301      	movs	r3, #1
 8008da6:	4622      	mov	r2, r4
 8008da8:	4649      	mov	r1, r9
 8008daa:	4638      	mov	r0, r7
 8008dac:	47c0      	blx	r8
 8008dae:	3001      	adds	r0, #1
 8008db0:	d0e6      	beq.n	8008d80 <_printf_common+0xa4>
 8008db2:	3601      	adds	r6, #1
 8008db4:	e7d9      	b.n	8008d6a <_printf_common+0x8e>
	...

08008db8 <_printf_i>:
 8008db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dbc:	7e0f      	ldrb	r7, [r1, #24]
 8008dbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dc0:	2f78      	cmp	r7, #120	; 0x78
 8008dc2:	4691      	mov	r9, r2
 8008dc4:	4680      	mov	r8, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	469a      	mov	sl, r3
 8008dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dce:	d807      	bhi.n	8008de0 <_printf_i+0x28>
 8008dd0:	2f62      	cmp	r7, #98	; 0x62
 8008dd2:	d80a      	bhi.n	8008dea <_printf_i+0x32>
 8008dd4:	2f00      	cmp	r7, #0
 8008dd6:	f000 80d8 	beq.w	8008f8a <_printf_i+0x1d2>
 8008dda:	2f58      	cmp	r7, #88	; 0x58
 8008ddc:	f000 80a3 	beq.w	8008f26 <_printf_i+0x16e>
 8008de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008de8:	e03a      	b.n	8008e60 <_printf_i+0xa8>
 8008dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dee:	2b15      	cmp	r3, #21
 8008df0:	d8f6      	bhi.n	8008de0 <_printf_i+0x28>
 8008df2:	a101      	add	r1, pc, #4	; (adr r1, 8008df8 <_printf_i+0x40>)
 8008df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008df8:	08008e51 	.word	0x08008e51
 8008dfc:	08008e65 	.word	0x08008e65
 8008e00:	08008de1 	.word	0x08008de1
 8008e04:	08008de1 	.word	0x08008de1
 8008e08:	08008de1 	.word	0x08008de1
 8008e0c:	08008de1 	.word	0x08008de1
 8008e10:	08008e65 	.word	0x08008e65
 8008e14:	08008de1 	.word	0x08008de1
 8008e18:	08008de1 	.word	0x08008de1
 8008e1c:	08008de1 	.word	0x08008de1
 8008e20:	08008de1 	.word	0x08008de1
 8008e24:	08008f71 	.word	0x08008f71
 8008e28:	08008e95 	.word	0x08008e95
 8008e2c:	08008f53 	.word	0x08008f53
 8008e30:	08008de1 	.word	0x08008de1
 8008e34:	08008de1 	.word	0x08008de1
 8008e38:	08008f93 	.word	0x08008f93
 8008e3c:	08008de1 	.word	0x08008de1
 8008e40:	08008e95 	.word	0x08008e95
 8008e44:	08008de1 	.word	0x08008de1
 8008e48:	08008de1 	.word	0x08008de1
 8008e4c:	08008f5b 	.word	0x08008f5b
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	1d1a      	adds	r2, r3, #4
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	602a      	str	r2, [r5, #0]
 8008e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e60:	2301      	movs	r3, #1
 8008e62:	e0a3      	b.n	8008fac <_printf_i+0x1f4>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	6829      	ldr	r1, [r5, #0]
 8008e68:	0606      	lsls	r6, r0, #24
 8008e6a:	f101 0304 	add.w	r3, r1, #4
 8008e6e:	d50a      	bpl.n	8008e86 <_printf_i+0xce>
 8008e70:	680e      	ldr	r6, [r1, #0]
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	2e00      	cmp	r6, #0
 8008e76:	da03      	bge.n	8008e80 <_printf_i+0xc8>
 8008e78:	232d      	movs	r3, #45	; 0x2d
 8008e7a:	4276      	negs	r6, r6
 8008e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e80:	485e      	ldr	r0, [pc, #376]	; (8008ffc <_printf_i+0x244>)
 8008e82:	230a      	movs	r3, #10
 8008e84:	e019      	b.n	8008eba <_printf_i+0x102>
 8008e86:	680e      	ldr	r6, [r1, #0]
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e8e:	bf18      	it	ne
 8008e90:	b236      	sxthne	r6, r6
 8008e92:	e7ef      	b.n	8008e74 <_printf_i+0xbc>
 8008e94:	682b      	ldr	r3, [r5, #0]
 8008e96:	6820      	ldr	r0, [r4, #0]
 8008e98:	1d19      	adds	r1, r3, #4
 8008e9a:	6029      	str	r1, [r5, #0]
 8008e9c:	0601      	lsls	r1, r0, #24
 8008e9e:	d501      	bpl.n	8008ea4 <_printf_i+0xec>
 8008ea0:	681e      	ldr	r6, [r3, #0]
 8008ea2:	e002      	b.n	8008eaa <_printf_i+0xf2>
 8008ea4:	0646      	lsls	r6, r0, #25
 8008ea6:	d5fb      	bpl.n	8008ea0 <_printf_i+0xe8>
 8008ea8:	881e      	ldrh	r6, [r3, #0]
 8008eaa:	4854      	ldr	r0, [pc, #336]	; (8008ffc <_printf_i+0x244>)
 8008eac:	2f6f      	cmp	r7, #111	; 0x6f
 8008eae:	bf0c      	ite	eq
 8008eb0:	2308      	moveq	r3, #8
 8008eb2:	230a      	movne	r3, #10
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008eba:	6865      	ldr	r5, [r4, #4]
 8008ebc:	60a5      	str	r5, [r4, #8]
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	bfa2      	ittt	ge
 8008ec2:	6821      	ldrge	r1, [r4, #0]
 8008ec4:	f021 0104 	bicge.w	r1, r1, #4
 8008ec8:	6021      	strge	r1, [r4, #0]
 8008eca:	b90e      	cbnz	r6, 8008ed0 <_printf_i+0x118>
 8008ecc:	2d00      	cmp	r5, #0
 8008ece:	d04d      	beq.n	8008f6c <_printf_i+0x1b4>
 8008ed0:	4615      	mov	r5, r2
 8008ed2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ed6:	fb03 6711 	mls	r7, r3, r1, r6
 8008eda:	5dc7      	ldrb	r7, [r0, r7]
 8008edc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ee0:	4637      	mov	r7, r6
 8008ee2:	42bb      	cmp	r3, r7
 8008ee4:	460e      	mov	r6, r1
 8008ee6:	d9f4      	bls.n	8008ed2 <_printf_i+0x11a>
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d10b      	bne.n	8008f04 <_printf_i+0x14c>
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	07de      	lsls	r6, r3, #31
 8008ef0:	d508      	bpl.n	8008f04 <_printf_i+0x14c>
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	6861      	ldr	r1, [r4, #4]
 8008ef6:	4299      	cmp	r1, r3
 8008ef8:	bfde      	ittt	le
 8008efa:	2330      	movle	r3, #48	; 0x30
 8008efc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f04:	1b52      	subs	r2, r2, r5
 8008f06:	6122      	str	r2, [r4, #16]
 8008f08:	f8cd a000 	str.w	sl, [sp]
 8008f0c:	464b      	mov	r3, r9
 8008f0e:	aa03      	add	r2, sp, #12
 8008f10:	4621      	mov	r1, r4
 8008f12:	4640      	mov	r0, r8
 8008f14:	f7ff fee2 	bl	8008cdc <_printf_common>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d14c      	bne.n	8008fb6 <_printf_i+0x1fe>
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f20:	b004      	add	sp, #16
 8008f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f26:	4835      	ldr	r0, [pc, #212]	; (8008ffc <_printf_i+0x244>)
 8008f28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f2c:	6829      	ldr	r1, [r5, #0]
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f34:	6029      	str	r1, [r5, #0]
 8008f36:	061d      	lsls	r5, r3, #24
 8008f38:	d514      	bpl.n	8008f64 <_printf_i+0x1ac>
 8008f3a:	07df      	lsls	r7, r3, #31
 8008f3c:	bf44      	itt	mi
 8008f3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f42:	6023      	strmi	r3, [r4, #0]
 8008f44:	b91e      	cbnz	r6, 8008f4e <_printf_i+0x196>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	f023 0320 	bic.w	r3, r3, #32
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	2310      	movs	r3, #16
 8008f50:	e7b0      	b.n	8008eb4 <_printf_i+0xfc>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	f043 0320 	orr.w	r3, r3, #32
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	2378      	movs	r3, #120	; 0x78
 8008f5c:	4828      	ldr	r0, [pc, #160]	; (8009000 <_printf_i+0x248>)
 8008f5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f62:	e7e3      	b.n	8008f2c <_printf_i+0x174>
 8008f64:	0659      	lsls	r1, r3, #25
 8008f66:	bf48      	it	mi
 8008f68:	b2b6      	uxthmi	r6, r6
 8008f6a:	e7e6      	b.n	8008f3a <_printf_i+0x182>
 8008f6c:	4615      	mov	r5, r2
 8008f6e:	e7bb      	b.n	8008ee8 <_printf_i+0x130>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	6826      	ldr	r6, [r4, #0]
 8008f74:	6961      	ldr	r1, [r4, #20]
 8008f76:	1d18      	adds	r0, r3, #4
 8008f78:	6028      	str	r0, [r5, #0]
 8008f7a:	0635      	lsls	r5, r6, #24
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	d501      	bpl.n	8008f84 <_printf_i+0x1cc>
 8008f80:	6019      	str	r1, [r3, #0]
 8008f82:	e002      	b.n	8008f8a <_printf_i+0x1d2>
 8008f84:	0670      	lsls	r0, r6, #25
 8008f86:	d5fb      	bpl.n	8008f80 <_printf_i+0x1c8>
 8008f88:	8019      	strh	r1, [r3, #0]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6123      	str	r3, [r4, #16]
 8008f8e:	4615      	mov	r5, r2
 8008f90:	e7ba      	b.n	8008f08 <_printf_i+0x150>
 8008f92:	682b      	ldr	r3, [r5, #0]
 8008f94:	1d1a      	adds	r2, r3, #4
 8008f96:	602a      	str	r2, [r5, #0]
 8008f98:	681d      	ldr	r5, [r3, #0]
 8008f9a:	6862      	ldr	r2, [r4, #4]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f7f7 f926 	bl	80001f0 <memchr>
 8008fa4:	b108      	cbz	r0, 8008faa <_printf_i+0x1f2>
 8008fa6:	1b40      	subs	r0, r0, r5
 8008fa8:	6060      	str	r0, [r4, #4]
 8008faa:	6863      	ldr	r3, [r4, #4]
 8008fac:	6123      	str	r3, [r4, #16]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fb4:	e7a8      	b.n	8008f08 <_printf_i+0x150>
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	462a      	mov	r2, r5
 8008fba:	4649      	mov	r1, r9
 8008fbc:	4640      	mov	r0, r8
 8008fbe:	47d0      	blx	sl
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d0ab      	beq.n	8008f1c <_printf_i+0x164>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	079b      	lsls	r3, r3, #30
 8008fc8:	d413      	bmi.n	8008ff2 <_printf_i+0x23a>
 8008fca:	68e0      	ldr	r0, [r4, #12]
 8008fcc:	9b03      	ldr	r3, [sp, #12]
 8008fce:	4298      	cmp	r0, r3
 8008fd0:	bfb8      	it	lt
 8008fd2:	4618      	movlt	r0, r3
 8008fd4:	e7a4      	b.n	8008f20 <_printf_i+0x168>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	4632      	mov	r2, r6
 8008fda:	4649      	mov	r1, r9
 8008fdc:	4640      	mov	r0, r8
 8008fde:	47d0      	blx	sl
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d09b      	beq.n	8008f1c <_printf_i+0x164>
 8008fe4:	3501      	adds	r5, #1
 8008fe6:	68e3      	ldr	r3, [r4, #12]
 8008fe8:	9903      	ldr	r1, [sp, #12]
 8008fea:	1a5b      	subs	r3, r3, r1
 8008fec:	42ab      	cmp	r3, r5
 8008fee:	dcf2      	bgt.n	8008fd6 <_printf_i+0x21e>
 8008ff0:	e7eb      	b.n	8008fca <_printf_i+0x212>
 8008ff2:	2500      	movs	r5, #0
 8008ff4:	f104 0619 	add.w	r6, r4, #25
 8008ff8:	e7f5      	b.n	8008fe6 <_printf_i+0x22e>
 8008ffa:	bf00      	nop
 8008ffc:	0800e080 	.word	0x0800e080
 8009000:	0800e091 	.word	0x0800e091

08009004 <_scanf_float>:
 8009004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009008:	b087      	sub	sp, #28
 800900a:	4617      	mov	r7, r2
 800900c:	9303      	str	r3, [sp, #12]
 800900e:	688b      	ldr	r3, [r1, #8]
 8009010:	1e5a      	subs	r2, r3, #1
 8009012:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009016:	bf83      	ittte	hi
 8009018:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800901c:	195b      	addhi	r3, r3, r5
 800901e:	9302      	strhi	r3, [sp, #8]
 8009020:	2300      	movls	r3, #0
 8009022:	bf86      	itte	hi
 8009024:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009028:	608b      	strhi	r3, [r1, #8]
 800902a:	9302      	strls	r3, [sp, #8]
 800902c:	680b      	ldr	r3, [r1, #0]
 800902e:	468b      	mov	fp, r1
 8009030:	2500      	movs	r5, #0
 8009032:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009036:	f84b 3b1c 	str.w	r3, [fp], #28
 800903a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800903e:	4680      	mov	r8, r0
 8009040:	460c      	mov	r4, r1
 8009042:	465e      	mov	r6, fp
 8009044:	46aa      	mov	sl, r5
 8009046:	46a9      	mov	r9, r5
 8009048:	9501      	str	r5, [sp, #4]
 800904a:	68a2      	ldr	r2, [r4, #8]
 800904c:	b152      	cbz	r2, 8009064 <_scanf_float+0x60>
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b4e      	cmp	r3, #78	; 0x4e
 8009054:	d864      	bhi.n	8009120 <_scanf_float+0x11c>
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d83c      	bhi.n	80090d4 <_scanf_float+0xd0>
 800905a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800905e:	b2c8      	uxtb	r0, r1
 8009060:	280e      	cmp	r0, #14
 8009062:	d93a      	bls.n	80090da <_scanf_float+0xd6>
 8009064:	f1b9 0f00 	cmp.w	r9, #0
 8009068:	d003      	beq.n	8009072 <_scanf_float+0x6e>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009076:	f1ba 0f01 	cmp.w	sl, #1
 800907a:	f200 8113 	bhi.w	80092a4 <_scanf_float+0x2a0>
 800907e:	455e      	cmp	r6, fp
 8009080:	f200 8105 	bhi.w	800928e <_scanf_float+0x28a>
 8009084:	2501      	movs	r5, #1
 8009086:	4628      	mov	r0, r5
 8009088:	b007      	add	sp, #28
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009092:	2a0d      	cmp	r2, #13
 8009094:	d8e6      	bhi.n	8009064 <_scanf_float+0x60>
 8009096:	a101      	add	r1, pc, #4	; (adr r1, 800909c <_scanf_float+0x98>)
 8009098:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800909c:	080091db 	.word	0x080091db
 80090a0:	08009065 	.word	0x08009065
 80090a4:	08009065 	.word	0x08009065
 80090a8:	08009065 	.word	0x08009065
 80090ac:	0800923b 	.word	0x0800923b
 80090b0:	08009213 	.word	0x08009213
 80090b4:	08009065 	.word	0x08009065
 80090b8:	08009065 	.word	0x08009065
 80090bc:	080091e9 	.word	0x080091e9
 80090c0:	08009065 	.word	0x08009065
 80090c4:	08009065 	.word	0x08009065
 80090c8:	08009065 	.word	0x08009065
 80090cc:	08009065 	.word	0x08009065
 80090d0:	080091a1 	.word	0x080091a1
 80090d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80090d8:	e7db      	b.n	8009092 <_scanf_float+0x8e>
 80090da:	290e      	cmp	r1, #14
 80090dc:	d8c2      	bhi.n	8009064 <_scanf_float+0x60>
 80090de:	a001      	add	r0, pc, #4	; (adr r0, 80090e4 <_scanf_float+0xe0>)
 80090e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80090e4:	08009193 	.word	0x08009193
 80090e8:	08009065 	.word	0x08009065
 80090ec:	08009193 	.word	0x08009193
 80090f0:	08009227 	.word	0x08009227
 80090f4:	08009065 	.word	0x08009065
 80090f8:	08009141 	.word	0x08009141
 80090fc:	0800917d 	.word	0x0800917d
 8009100:	0800917d 	.word	0x0800917d
 8009104:	0800917d 	.word	0x0800917d
 8009108:	0800917d 	.word	0x0800917d
 800910c:	0800917d 	.word	0x0800917d
 8009110:	0800917d 	.word	0x0800917d
 8009114:	0800917d 	.word	0x0800917d
 8009118:	0800917d 	.word	0x0800917d
 800911c:	0800917d 	.word	0x0800917d
 8009120:	2b6e      	cmp	r3, #110	; 0x6e
 8009122:	d809      	bhi.n	8009138 <_scanf_float+0x134>
 8009124:	2b60      	cmp	r3, #96	; 0x60
 8009126:	d8b2      	bhi.n	800908e <_scanf_float+0x8a>
 8009128:	2b54      	cmp	r3, #84	; 0x54
 800912a:	d077      	beq.n	800921c <_scanf_float+0x218>
 800912c:	2b59      	cmp	r3, #89	; 0x59
 800912e:	d199      	bne.n	8009064 <_scanf_float+0x60>
 8009130:	2d07      	cmp	r5, #7
 8009132:	d197      	bne.n	8009064 <_scanf_float+0x60>
 8009134:	2508      	movs	r5, #8
 8009136:	e029      	b.n	800918c <_scanf_float+0x188>
 8009138:	2b74      	cmp	r3, #116	; 0x74
 800913a:	d06f      	beq.n	800921c <_scanf_float+0x218>
 800913c:	2b79      	cmp	r3, #121	; 0x79
 800913e:	e7f6      	b.n	800912e <_scanf_float+0x12a>
 8009140:	6821      	ldr	r1, [r4, #0]
 8009142:	05c8      	lsls	r0, r1, #23
 8009144:	d51a      	bpl.n	800917c <_scanf_float+0x178>
 8009146:	9b02      	ldr	r3, [sp, #8]
 8009148:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800914c:	6021      	str	r1, [r4, #0]
 800914e:	f109 0901 	add.w	r9, r9, #1
 8009152:	b11b      	cbz	r3, 800915c <_scanf_float+0x158>
 8009154:	3b01      	subs	r3, #1
 8009156:	3201      	adds	r2, #1
 8009158:	9302      	str	r3, [sp, #8]
 800915a:	60a2      	str	r2, [r4, #8]
 800915c:	68a3      	ldr	r3, [r4, #8]
 800915e:	3b01      	subs	r3, #1
 8009160:	60a3      	str	r3, [r4, #8]
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	3301      	adds	r3, #1
 8009166:	6123      	str	r3, [r4, #16]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3b01      	subs	r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	607b      	str	r3, [r7, #4]
 8009170:	f340 8084 	ble.w	800927c <_scanf_float+0x278>
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	603b      	str	r3, [r7, #0]
 800917a:	e766      	b.n	800904a <_scanf_float+0x46>
 800917c:	eb1a 0f05 	cmn.w	sl, r5
 8009180:	f47f af70 	bne.w	8009064 <_scanf_float+0x60>
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800918a:	6022      	str	r2, [r4, #0]
 800918c:	f806 3b01 	strb.w	r3, [r6], #1
 8009190:	e7e4      	b.n	800915c <_scanf_float+0x158>
 8009192:	6822      	ldr	r2, [r4, #0]
 8009194:	0610      	lsls	r0, r2, #24
 8009196:	f57f af65 	bpl.w	8009064 <_scanf_float+0x60>
 800919a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800919e:	e7f4      	b.n	800918a <_scanf_float+0x186>
 80091a0:	f1ba 0f00 	cmp.w	sl, #0
 80091a4:	d10e      	bne.n	80091c4 <_scanf_float+0x1c0>
 80091a6:	f1b9 0f00 	cmp.w	r9, #0
 80091aa:	d10e      	bne.n	80091ca <_scanf_float+0x1c6>
 80091ac:	6822      	ldr	r2, [r4, #0]
 80091ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80091b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80091b6:	d108      	bne.n	80091ca <_scanf_float+0x1c6>
 80091b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091bc:	6022      	str	r2, [r4, #0]
 80091be:	f04f 0a01 	mov.w	sl, #1
 80091c2:	e7e3      	b.n	800918c <_scanf_float+0x188>
 80091c4:	f1ba 0f02 	cmp.w	sl, #2
 80091c8:	d055      	beq.n	8009276 <_scanf_float+0x272>
 80091ca:	2d01      	cmp	r5, #1
 80091cc:	d002      	beq.n	80091d4 <_scanf_float+0x1d0>
 80091ce:	2d04      	cmp	r5, #4
 80091d0:	f47f af48 	bne.w	8009064 <_scanf_float+0x60>
 80091d4:	3501      	adds	r5, #1
 80091d6:	b2ed      	uxtb	r5, r5
 80091d8:	e7d8      	b.n	800918c <_scanf_float+0x188>
 80091da:	f1ba 0f01 	cmp.w	sl, #1
 80091de:	f47f af41 	bne.w	8009064 <_scanf_float+0x60>
 80091e2:	f04f 0a02 	mov.w	sl, #2
 80091e6:	e7d1      	b.n	800918c <_scanf_float+0x188>
 80091e8:	b97d      	cbnz	r5, 800920a <_scanf_float+0x206>
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	f47f af3c 	bne.w	800906a <_scanf_float+0x66>
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80091f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80091fc:	f47f af39 	bne.w	8009072 <_scanf_float+0x6e>
 8009200:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009204:	6022      	str	r2, [r4, #0]
 8009206:	2501      	movs	r5, #1
 8009208:	e7c0      	b.n	800918c <_scanf_float+0x188>
 800920a:	2d03      	cmp	r5, #3
 800920c:	d0e2      	beq.n	80091d4 <_scanf_float+0x1d0>
 800920e:	2d05      	cmp	r5, #5
 8009210:	e7de      	b.n	80091d0 <_scanf_float+0x1cc>
 8009212:	2d02      	cmp	r5, #2
 8009214:	f47f af26 	bne.w	8009064 <_scanf_float+0x60>
 8009218:	2503      	movs	r5, #3
 800921a:	e7b7      	b.n	800918c <_scanf_float+0x188>
 800921c:	2d06      	cmp	r5, #6
 800921e:	f47f af21 	bne.w	8009064 <_scanf_float+0x60>
 8009222:	2507      	movs	r5, #7
 8009224:	e7b2      	b.n	800918c <_scanf_float+0x188>
 8009226:	6822      	ldr	r2, [r4, #0]
 8009228:	0591      	lsls	r1, r2, #22
 800922a:	f57f af1b 	bpl.w	8009064 <_scanf_float+0x60>
 800922e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009232:	6022      	str	r2, [r4, #0]
 8009234:	f8cd 9004 	str.w	r9, [sp, #4]
 8009238:	e7a8      	b.n	800918c <_scanf_float+0x188>
 800923a:	6822      	ldr	r2, [r4, #0]
 800923c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009240:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009244:	d006      	beq.n	8009254 <_scanf_float+0x250>
 8009246:	0550      	lsls	r0, r2, #21
 8009248:	f57f af0c 	bpl.w	8009064 <_scanf_float+0x60>
 800924c:	f1b9 0f00 	cmp.w	r9, #0
 8009250:	f43f af0f 	beq.w	8009072 <_scanf_float+0x6e>
 8009254:	0591      	lsls	r1, r2, #22
 8009256:	bf58      	it	pl
 8009258:	9901      	ldrpl	r1, [sp, #4]
 800925a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800925e:	bf58      	it	pl
 8009260:	eba9 0101 	subpl.w	r1, r9, r1
 8009264:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009268:	bf58      	it	pl
 800926a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800926e:	6022      	str	r2, [r4, #0]
 8009270:	f04f 0900 	mov.w	r9, #0
 8009274:	e78a      	b.n	800918c <_scanf_float+0x188>
 8009276:	f04f 0a03 	mov.w	sl, #3
 800927a:	e787      	b.n	800918c <_scanf_float+0x188>
 800927c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009280:	4639      	mov	r1, r7
 8009282:	4640      	mov	r0, r8
 8009284:	4798      	blx	r3
 8009286:	2800      	cmp	r0, #0
 8009288:	f43f aedf 	beq.w	800904a <_scanf_float+0x46>
 800928c:	e6ea      	b.n	8009064 <_scanf_float+0x60>
 800928e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009296:	463a      	mov	r2, r7
 8009298:	4640      	mov	r0, r8
 800929a:	4798      	blx	r3
 800929c:	6923      	ldr	r3, [r4, #16]
 800929e:	3b01      	subs	r3, #1
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	e6ec      	b.n	800907e <_scanf_float+0x7a>
 80092a4:	1e6b      	subs	r3, r5, #1
 80092a6:	2b06      	cmp	r3, #6
 80092a8:	d825      	bhi.n	80092f6 <_scanf_float+0x2f2>
 80092aa:	2d02      	cmp	r5, #2
 80092ac:	d836      	bhi.n	800931c <_scanf_float+0x318>
 80092ae:	455e      	cmp	r6, fp
 80092b0:	f67f aee8 	bls.w	8009084 <_scanf_float+0x80>
 80092b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092bc:	463a      	mov	r2, r7
 80092be:	4640      	mov	r0, r8
 80092c0:	4798      	blx	r3
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	e7f1      	b.n	80092ae <_scanf_float+0x2aa>
 80092ca:	9802      	ldr	r0, [sp, #8]
 80092cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80092d4:	9002      	str	r0, [sp, #8]
 80092d6:	463a      	mov	r2, r7
 80092d8:	4640      	mov	r0, r8
 80092da:	4798      	blx	r3
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	3b01      	subs	r3, #1
 80092e0:	6123      	str	r3, [r4, #16]
 80092e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092e6:	fa5f fa8a 	uxtb.w	sl, sl
 80092ea:	f1ba 0f02 	cmp.w	sl, #2
 80092ee:	d1ec      	bne.n	80092ca <_scanf_float+0x2c6>
 80092f0:	3d03      	subs	r5, #3
 80092f2:	b2ed      	uxtb	r5, r5
 80092f4:	1b76      	subs	r6, r6, r5
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	05da      	lsls	r2, r3, #23
 80092fa:	d52f      	bpl.n	800935c <_scanf_float+0x358>
 80092fc:	055b      	lsls	r3, r3, #21
 80092fe:	d510      	bpl.n	8009322 <_scanf_float+0x31e>
 8009300:	455e      	cmp	r6, fp
 8009302:	f67f aebf 	bls.w	8009084 <_scanf_float+0x80>
 8009306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800930a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800930e:	463a      	mov	r2, r7
 8009310:	4640      	mov	r0, r8
 8009312:	4798      	blx	r3
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	3b01      	subs	r3, #1
 8009318:	6123      	str	r3, [r4, #16]
 800931a:	e7f1      	b.n	8009300 <_scanf_float+0x2fc>
 800931c:	46aa      	mov	sl, r5
 800931e:	9602      	str	r6, [sp, #8]
 8009320:	e7df      	b.n	80092e2 <_scanf_float+0x2de>
 8009322:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	2965      	cmp	r1, #101	; 0x65
 800932a:	f103 33ff 	add.w	r3, r3, #4294967295
 800932e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009332:	6123      	str	r3, [r4, #16]
 8009334:	d00c      	beq.n	8009350 <_scanf_float+0x34c>
 8009336:	2945      	cmp	r1, #69	; 0x45
 8009338:	d00a      	beq.n	8009350 <_scanf_float+0x34c>
 800933a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800933e:	463a      	mov	r2, r7
 8009340:	4640      	mov	r0, r8
 8009342:	4798      	blx	r3
 8009344:	6923      	ldr	r3, [r4, #16]
 8009346:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800934a:	3b01      	subs	r3, #1
 800934c:	1eb5      	subs	r5, r6, #2
 800934e:	6123      	str	r3, [r4, #16]
 8009350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009354:	463a      	mov	r2, r7
 8009356:	4640      	mov	r0, r8
 8009358:	4798      	blx	r3
 800935a:	462e      	mov	r6, r5
 800935c:	6825      	ldr	r5, [r4, #0]
 800935e:	f015 0510 	ands.w	r5, r5, #16
 8009362:	d159      	bne.n	8009418 <_scanf_float+0x414>
 8009364:	7035      	strb	r5, [r6, #0]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800936c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009370:	d11b      	bne.n	80093aa <_scanf_float+0x3a6>
 8009372:	9b01      	ldr	r3, [sp, #4]
 8009374:	454b      	cmp	r3, r9
 8009376:	eba3 0209 	sub.w	r2, r3, r9
 800937a:	d123      	bne.n	80093c4 <_scanf_float+0x3c0>
 800937c:	2200      	movs	r2, #0
 800937e:	4659      	mov	r1, fp
 8009380:	4640      	mov	r0, r8
 8009382:	f000 ff1b 	bl	800a1bc <_strtod_r>
 8009386:	6822      	ldr	r2, [r4, #0]
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	f012 0f02 	tst.w	r2, #2
 800938e:	ec57 6b10 	vmov	r6, r7, d0
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	d021      	beq.n	80093da <_scanf_float+0x3d6>
 8009396:	9903      	ldr	r1, [sp, #12]
 8009398:	1d1a      	adds	r2, r3, #4
 800939a:	600a      	str	r2, [r1, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	e9c3 6700 	strd	r6, r7, [r3]
 80093a2:	68e3      	ldr	r3, [r4, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	60e3      	str	r3, [r4, #12]
 80093a8:	e66d      	b.n	8009086 <_scanf_float+0x82>
 80093aa:	9b04      	ldr	r3, [sp, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0e5      	beq.n	800937c <_scanf_float+0x378>
 80093b0:	9905      	ldr	r1, [sp, #20]
 80093b2:	230a      	movs	r3, #10
 80093b4:	462a      	mov	r2, r5
 80093b6:	3101      	adds	r1, #1
 80093b8:	4640      	mov	r0, r8
 80093ba:	f000 ff87 	bl	800a2cc <_strtol_r>
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	9e05      	ldr	r6, [sp, #20]
 80093c2:	1ac2      	subs	r2, r0, r3
 80093c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80093c8:	429e      	cmp	r6, r3
 80093ca:	bf28      	it	cs
 80093cc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80093d0:	4912      	ldr	r1, [pc, #72]	; (800941c <_scanf_float+0x418>)
 80093d2:	4630      	mov	r0, r6
 80093d4:	f000 f83c 	bl	8009450 <siprintf>
 80093d8:	e7d0      	b.n	800937c <_scanf_float+0x378>
 80093da:	9903      	ldr	r1, [sp, #12]
 80093dc:	f012 0f04 	tst.w	r2, #4
 80093e0:	f103 0204 	add.w	r2, r3, #4
 80093e4:	600a      	str	r2, [r1, #0]
 80093e6:	d1d9      	bne.n	800939c <_scanf_float+0x398>
 80093e8:	f8d3 8000 	ldr.w	r8, [r3]
 80093ec:	ee10 2a10 	vmov	r2, s0
 80093f0:	ee10 0a10 	vmov	r0, s0
 80093f4:	463b      	mov	r3, r7
 80093f6:	4639      	mov	r1, r7
 80093f8:	f7f7 fba0 	bl	8000b3c <__aeabi_dcmpun>
 80093fc:	b128      	cbz	r0, 800940a <_scanf_float+0x406>
 80093fe:	4808      	ldr	r0, [pc, #32]	; (8009420 <_scanf_float+0x41c>)
 8009400:	f000 f820 	bl	8009444 <nanf>
 8009404:	ed88 0a00 	vstr	s0, [r8]
 8009408:	e7cb      	b.n	80093a2 <_scanf_float+0x39e>
 800940a:	4630      	mov	r0, r6
 800940c:	4639      	mov	r1, r7
 800940e:	f7f7 fbf3 	bl	8000bf8 <__aeabi_d2f>
 8009412:	f8c8 0000 	str.w	r0, [r8]
 8009416:	e7c4      	b.n	80093a2 <_scanf_float+0x39e>
 8009418:	2500      	movs	r5, #0
 800941a:	e634      	b.n	8009086 <_scanf_float+0x82>
 800941c:	0800e0a2 	.word	0x0800e0a2
 8009420:	0800e4c3 	.word	0x0800e4c3

08009424 <_sbrk_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	; (8009440 <_sbrk_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7f9 f9a2 	bl	8002778 <_sbrk>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_sbrk_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_sbrk_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20004fb0 	.word	0x20004fb0

08009444 <nanf>:
 8009444:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800944c <nanf+0x8>
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	7fc00000 	.word	0x7fc00000

08009450 <siprintf>:
 8009450:	b40e      	push	{r1, r2, r3}
 8009452:	b500      	push	{lr}
 8009454:	b09c      	sub	sp, #112	; 0x70
 8009456:	ab1d      	add	r3, sp, #116	; 0x74
 8009458:	9002      	str	r0, [sp, #8]
 800945a:	9006      	str	r0, [sp, #24]
 800945c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009460:	4809      	ldr	r0, [pc, #36]	; (8009488 <siprintf+0x38>)
 8009462:	9107      	str	r1, [sp, #28]
 8009464:	9104      	str	r1, [sp, #16]
 8009466:	4909      	ldr	r1, [pc, #36]	; (800948c <siprintf+0x3c>)
 8009468:	f853 2b04 	ldr.w	r2, [r3], #4
 800946c:	9105      	str	r1, [sp, #20]
 800946e:	6800      	ldr	r0, [r0, #0]
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	a902      	add	r1, sp, #8
 8009474:	f002 fea0 	bl	800c1b8 <_svfiprintf_r>
 8009478:	9b02      	ldr	r3, [sp, #8]
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	b01c      	add	sp, #112	; 0x70
 8009480:	f85d eb04 	ldr.w	lr, [sp], #4
 8009484:	b003      	add	sp, #12
 8009486:	4770      	bx	lr
 8009488:	2000001c 	.word	0x2000001c
 800948c:	ffff0208 	.word	0xffff0208

08009490 <siscanf>:
 8009490:	b40e      	push	{r1, r2, r3}
 8009492:	b510      	push	{r4, lr}
 8009494:	b09f      	sub	sp, #124	; 0x7c
 8009496:	ac21      	add	r4, sp, #132	; 0x84
 8009498:	f44f 7101 	mov.w	r1, #516	; 0x204
 800949c:	f854 2b04 	ldr.w	r2, [r4], #4
 80094a0:	9201      	str	r2, [sp, #4]
 80094a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80094a6:	9004      	str	r0, [sp, #16]
 80094a8:	9008      	str	r0, [sp, #32]
 80094aa:	f7f6 fe99 	bl	80001e0 <strlen>
 80094ae:	4b0c      	ldr	r3, [pc, #48]	; (80094e0 <siscanf+0x50>)
 80094b0:	9005      	str	r0, [sp, #20]
 80094b2:	9009      	str	r0, [sp, #36]	; 0x24
 80094b4:	930d      	str	r3, [sp, #52]	; 0x34
 80094b6:	480b      	ldr	r0, [pc, #44]	; (80094e4 <siscanf+0x54>)
 80094b8:	9a01      	ldr	r2, [sp, #4]
 80094ba:	6800      	ldr	r0, [r0, #0]
 80094bc:	9403      	str	r4, [sp, #12]
 80094be:	2300      	movs	r3, #0
 80094c0:	9311      	str	r3, [sp, #68]	; 0x44
 80094c2:	9316      	str	r3, [sp, #88]	; 0x58
 80094c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80094cc:	a904      	add	r1, sp, #16
 80094ce:	4623      	mov	r3, r4
 80094d0:	f002 ffcc 	bl	800c46c <__ssvfiscanf_r>
 80094d4:	b01f      	add	sp, #124	; 0x7c
 80094d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094da:	b003      	add	sp, #12
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	0800950b 	.word	0x0800950b
 80094e4:	2000001c 	.word	0x2000001c

080094e8 <__sread>:
 80094e8:	b510      	push	{r4, lr}
 80094ea:	460c      	mov	r4, r1
 80094ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f0:	f003 fa86 	bl	800ca00 <_read_r>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	bfab      	itete	ge
 80094f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094fa:	89a3      	ldrhlt	r3, [r4, #12]
 80094fc:	181b      	addge	r3, r3, r0
 80094fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009502:	bfac      	ite	ge
 8009504:	6563      	strge	r3, [r4, #84]	; 0x54
 8009506:	81a3      	strhlt	r3, [r4, #12]
 8009508:	bd10      	pop	{r4, pc}

0800950a <__seofread>:
 800950a:	2000      	movs	r0, #0
 800950c:	4770      	bx	lr

0800950e <__swrite>:
 800950e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009512:	461f      	mov	r7, r3
 8009514:	898b      	ldrh	r3, [r1, #12]
 8009516:	05db      	lsls	r3, r3, #23
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	4616      	mov	r6, r2
 800951e:	d505      	bpl.n	800952c <__swrite+0x1e>
 8009520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009524:	2302      	movs	r3, #2
 8009526:	2200      	movs	r2, #0
 8009528:	f002 f8e4 	bl	800b6f4 <_lseek_r>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	4632      	mov	r2, r6
 800953a:	463b      	mov	r3, r7
 800953c:	4628      	mov	r0, r5
 800953e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009542:	f000 bec5 	b.w	800a2d0 <_write_r>

08009546 <__sseek>:
 8009546:	b510      	push	{r4, lr}
 8009548:	460c      	mov	r4, r1
 800954a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954e:	f002 f8d1 	bl	800b6f4 <_lseek_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	bf15      	itete	ne
 8009558:	6560      	strne	r0, [r4, #84]	; 0x54
 800955a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800955e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009562:	81a3      	strheq	r3, [r4, #12]
 8009564:	bf18      	it	ne
 8009566:	81a3      	strhne	r3, [r4, #12]
 8009568:	bd10      	pop	{r4, pc}

0800956a <__sclose>:
 800956a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956e:	f000 bec1 	b.w	800a2f4 <_close_r>

08009572 <sulp>:
 8009572:	b570      	push	{r4, r5, r6, lr}
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	ec45 4b10 	vmov	d0, r4, r5
 800957c:	4616      	mov	r6, r2
 800957e:	f002 fc5b 	bl	800be38 <__ulp>
 8009582:	ec51 0b10 	vmov	r0, r1, d0
 8009586:	b17e      	cbz	r6, 80095a8 <sulp+0x36>
 8009588:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800958c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009590:	2b00      	cmp	r3, #0
 8009592:	dd09      	ble.n	80095a8 <sulp+0x36>
 8009594:	051b      	lsls	r3, r3, #20
 8009596:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800959a:	2400      	movs	r4, #0
 800959c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80095a0:	4622      	mov	r2, r4
 80095a2:	462b      	mov	r3, r5
 80095a4:	f7f7 f830 	bl	8000608 <__aeabi_dmul>
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	0000      	movs	r0, r0
 80095ac:	0000      	movs	r0, r0
	...

080095b0 <_strtod_l>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	ed2d 8b02 	vpush	{d8}
 80095b8:	b09d      	sub	sp, #116	; 0x74
 80095ba:	461f      	mov	r7, r3
 80095bc:	2300      	movs	r3, #0
 80095be:	9318      	str	r3, [sp, #96]	; 0x60
 80095c0:	4ba2      	ldr	r3, [pc, #648]	; (800984c <_strtod_l+0x29c>)
 80095c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	9305      	str	r3, [sp, #20]
 80095c8:	4604      	mov	r4, r0
 80095ca:	4618      	mov	r0, r3
 80095cc:	4688      	mov	r8, r1
 80095ce:	f7f6 fe07 	bl	80001e0 <strlen>
 80095d2:	f04f 0a00 	mov.w	sl, #0
 80095d6:	4605      	mov	r5, r0
 80095d8:	f04f 0b00 	mov.w	fp, #0
 80095dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80095e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095e2:	781a      	ldrb	r2, [r3, #0]
 80095e4:	2a2b      	cmp	r2, #43	; 0x2b
 80095e6:	d04e      	beq.n	8009686 <_strtod_l+0xd6>
 80095e8:	d83b      	bhi.n	8009662 <_strtod_l+0xb2>
 80095ea:	2a0d      	cmp	r2, #13
 80095ec:	d834      	bhi.n	8009658 <_strtod_l+0xa8>
 80095ee:	2a08      	cmp	r2, #8
 80095f0:	d834      	bhi.n	800965c <_strtod_l+0xac>
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	d03e      	beq.n	8009674 <_strtod_l+0xc4>
 80095f6:	2300      	movs	r3, #0
 80095f8:	930a      	str	r3, [sp, #40]	; 0x28
 80095fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80095fc:	7833      	ldrb	r3, [r6, #0]
 80095fe:	2b30      	cmp	r3, #48	; 0x30
 8009600:	f040 80b0 	bne.w	8009764 <_strtod_l+0x1b4>
 8009604:	7873      	ldrb	r3, [r6, #1]
 8009606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800960a:	2b58      	cmp	r3, #88	; 0x58
 800960c:	d168      	bne.n	80096e0 <_strtod_l+0x130>
 800960e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009610:	9301      	str	r3, [sp, #4]
 8009612:	ab18      	add	r3, sp, #96	; 0x60
 8009614:	9702      	str	r7, [sp, #8]
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	4a8d      	ldr	r2, [pc, #564]	; (8009850 <_strtod_l+0x2a0>)
 800961a:	ab19      	add	r3, sp, #100	; 0x64
 800961c:	a917      	add	r1, sp, #92	; 0x5c
 800961e:	4620      	mov	r0, r4
 8009620:	f001 fd5c 	bl	800b0dc <__gethex>
 8009624:	f010 0707 	ands.w	r7, r0, #7
 8009628:	4605      	mov	r5, r0
 800962a:	d005      	beq.n	8009638 <_strtod_l+0x88>
 800962c:	2f06      	cmp	r7, #6
 800962e:	d12c      	bne.n	800968a <_strtod_l+0xda>
 8009630:	3601      	adds	r6, #1
 8009632:	2300      	movs	r3, #0
 8009634:	9617      	str	r6, [sp, #92]	; 0x5c
 8009636:	930a      	str	r3, [sp, #40]	; 0x28
 8009638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800963a:	2b00      	cmp	r3, #0
 800963c:	f040 8590 	bne.w	800a160 <_strtod_l+0xbb0>
 8009640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009642:	b1eb      	cbz	r3, 8009680 <_strtod_l+0xd0>
 8009644:	4652      	mov	r2, sl
 8009646:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800964a:	ec43 2b10 	vmov	d0, r2, r3
 800964e:	b01d      	add	sp, #116	; 0x74
 8009650:	ecbd 8b02 	vpop	{d8}
 8009654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009658:	2a20      	cmp	r2, #32
 800965a:	d1cc      	bne.n	80095f6 <_strtod_l+0x46>
 800965c:	3301      	adds	r3, #1
 800965e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009660:	e7be      	b.n	80095e0 <_strtod_l+0x30>
 8009662:	2a2d      	cmp	r2, #45	; 0x2d
 8009664:	d1c7      	bne.n	80095f6 <_strtod_l+0x46>
 8009666:	2201      	movs	r2, #1
 8009668:	920a      	str	r2, [sp, #40]	; 0x28
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	9217      	str	r2, [sp, #92]	; 0x5c
 800966e:	785b      	ldrb	r3, [r3, #1]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1c2      	bne.n	80095fa <_strtod_l+0x4a>
 8009674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009676:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800967a:	2b00      	cmp	r3, #0
 800967c:	f040 856e 	bne.w	800a15c <_strtod_l+0xbac>
 8009680:	4652      	mov	r2, sl
 8009682:	465b      	mov	r3, fp
 8009684:	e7e1      	b.n	800964a <_strtod_l+0x9a>
 8009686:	2200      	movs	r2, #0
 8009688:	e7ee      	b.n	8009668 <_strtod_l+0xb8>
 800968a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800968c:	b13a      	cbz	r2, 800969e <_strtod_l+0xee>
 800968e:	2135      	movs	r1, #53	; 0x35
 8009690:	a81a      	add	r0, sp, #104	; 0x68
 8009692:	f002 fcdc 	bl	800c04e <__copybits>
 8009696:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009698:	4620      	mov	r0, r4
 800969a:	f002 f89b 	bl	800b7d4 <_Bfree>
 800969e:	3f01      	subs	r7, #1
 80096a0:	2f04      	cmp	r7, #4
 80096a2:	d806      	bhi.n	80096b2 <_strtod_l+0x102>
 80096a4:	e8df f007 	tbb	[pc, r7]
 80096a8:	1714030a 	.word	0x1714030a
 80096ac:	0a          	.byte	0x0a
 80096ad:	00          	.byte	0x00
 80096ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80096b2:	0728      	lsls	r0, r5, #28
 80096b4:	d5c0      	bpl.n	8009638 <_strtod_l+0x88>
 80096b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80096ba:	e7bd      	b.n	8009638 <_strtod_l+0x88>
 80096bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80096c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80096c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80096ce:	e7f0      	b.n	80096b2 <_strtod_l+0x102>
 80096d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009854 <_strtod_l+0x2a4>
 80096d4:	e7ed      	b.n	80096b2 <_strtod_l+0x102>
 80096d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80096da:	f04f 3aff 	mov.w	sl, #4294967295
 80096de:	e7e8      	b.n	80096b2 <_strtod_l+0x102>
 80096e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	2b30      	cmp	r3, #48	; 0x30
 80096ea:	d0f9      	beq.n	80096e0 <_strtod_l+0x130>
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0a3      	beq.n	8009638 <_strtod_l+0x88>
 80096f0:	2301      	movs	r3, #1
 80096f2:	f04f 0900 	mov.w	r9, #0
 80096f6:	9304      	str	r3, [sp, #16]
 80096f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096fa:	9308      	str	r3, [sp, #32]
 80096fc:	f8cd 901c 	str.w	r9, [sp, #28]
 8009700:	464f      	mov	r7, r9
 8009702:	220a      	movs	r2, #10
 8009704:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009706:	7806      	ldrb	r6, [r0, #0]
 8009708:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800970c:	b2d9      	uxtb	r1, r3
 800970e:	2909      	cmp	r1, #9
 8009710:	d92a      	bls.n	8009768 <_strtod_l+0x1b8>
 8009712:	9905      	ldr	r1, [sp, #20]
 8009714:	462a      	mov	r2, r5
 8009716:	f003 f9c7 	bl	800caa8 <strncmp>
 800971a:	b398      	cbz	r0, 8009784 <_strtod_l+0x1d4>
 800971c:	2000      	movs	r0, #0
 800971e:	4632      	mov	r2, r6
 8009720:	463d      	mov	r5, r7
 8009722:	9005      	str	r0, [sp, #20]
 8009724:	4603      	mov	r3, r0
 8009726:	2a65      	cmp	r2, #101	; 0x65
 8009728:	d001      	beq.n	800972e <_strtod_l+0x17e>
 800972a:	2a45      	cmp	r2, #69	; 0x45
 800972c:	d118      	bne.n	8009760 <_strtod_l+0x1b0>
 800972e:	b91d      	cbnz	r5, 8009738 <_strtod_l+0x188>
 8009730:	9a04      	ldr	r2, [sp, #16]
 8009732:	4302      	orrs	r2, r0
 8009734:	d09e      	beq.n	8009674 <_strtod_l+0xc4>
 8009736:	2500      	movs	r5, #0
 8009738:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800973c:	f108 0201 	add.w	r2, r8, #1
 8009740:	9217      	str	r2, [sp, #92]	; 0x5c
 8009742:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009746:	2a2b      	cmp	r2, #43	; 0x2b
 8009748:	d075      	beq.n	8009836 <_strtod_l+0x286>
 800974a:	2a2d      	cmp	r2, #45	; 0x2d
 800974c:	d07b      	beq.n	8009846 <_strtod_l+0x296>
 800974e:	f04f 0c00 	mov.w	ip, #0
 8009752:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009756:	2909      	cmp	r1, #9
 8009758:	f240 8082 	bls.w	8009860 <_strtod_l+0x2b0>
 800975c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009760:	2600      	movs	r6, #0
 8009762:	e09d      	b.n	80098a0 <_strtod_l+0x2f0>
 8009764:	2300      	movs	r3, #0
 8009766:	e7c4      	b.n	80096f2 <_strtod_l+0x142>
 8009768:	2f08      	cmp	r7, #8
 800976a:	bfd8      	it	le
 800976c:	9907      	ldrle	r1, [sp, #28]
 800976e:	f100 0001 	add.w	r0, r0, #1
 8009772:	bfda      	itte	le
 8009774:	fb02 3301 	mlale	r3, r2, r1, r3
 8009778:	9307      	strle	r3, [sp, #28]
 800977a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800977e:	3701      	adds	r7, #1
 8009780:	9017      	str	r0, [sp, #92]	; 0x5c
 8009782:	e7bf      	b.n	8009704 <_strtod_l+0x154>
 8009784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009786:	195a      	adds	r2, r3, r5
 8009788:	9217      	str	r2, [sp, #92]	; 0x5c
 800978a:	5d5a      	ldrb	r2, [r3, r5]
 800978c:	2f00      	cmp	r7, #0
 800978e:	d037      	beq.n	8009800 <_strtod_l+0x250>
 8009790:	9005      	str	r0, [sp, #20]
 8009792:	463d      	mov	r5, r7
 8009794:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009798:	2b09      	cmp	r3, #9
 800979a:	d912      	bls.n	80097c2 <_strtod_l+0x212>
 800979c:	2301      	movs	r3, #1
 800979e:	e7c2      	b.n	8009726 <_strtod_l+0x176>
 80097a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80097a6:	785a      	ldrb	r2, [r3, #1]
 80097a8:	3001      	adds	r0, #1
 80097aa:	2a30      	cmp	r2, #48	; 0x30
 80097ac:	d0f8      	beq.n	80097a0 <_strtod_l+0x1f0>
 80097ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80097b2:	2b08      	cmp	r3, #8
 80097b4:	f200 84d9 	bhi.w	800a16a <_strtod_l+0xbba>
 80097b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ba:	9005      	str	r0, [sp, #20]
 80097bc:	2000      	movs	r0, #0
 80097be:	9308      	str	r3, [sp, #32]
 80097c0:	4605      	mov	r5, r0
 80097c2:	3a30      	subs	r2, #48	; 0x30
 80097c4:	f100 0301 	add.w	r3, r0, #1
 80097c8:	d014      	beq.n	80097f4 <_strtod_l+0x244>
 80097ca:	9905      	ldr	r1, [sp, #20]
 80097cc:	4419      	add	r1, r3
 80097ce:	9105      	str	r1, [sp, #20]
 80097d0:	462b      	mov	r3, r5
 80097d2:	eb00 0e05 	add.w	lr, r0, r5
 80097d6:	210a      	movs	r1, #10
 80097d8:	4573      	cmp	r3, lr
 80097da:	d113      	bne.n	8009804 <_strtod_l+0x254>
 80097dc:	182b      	adds	r3, r5, r0
 80097de:	2b08      	cmp	r3, #8
 80097e0:	f105 0501 	add.w	r5, r5, #1
 80097e4:	4405      	add	r5, r0
 80097e6:	dc1c      	bgt.n	8009822 <_strtod_l+0x272>
 80097e8:	9907      	ldr	r1, [sp, #28]
 80097ea:	230a      	movs	r3, #10
 80097ec:	fb03 2301 	mla	r3, r3, r1, r2
 80097f0:	9307      	str	r3, [sp, #28]
 80097f2:	2300      	movs	r3, #0
 80097f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80097f6:	1c51      	adds	r1, r2, #1
 80097f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80097fa:	7852      	ldrb	r2, [r2, #1]
 80097fc:	4618      	mov	r0, r3
 80097fe:	e7c9      	b.n	8009794 <_strtod_l+0x1e4>
 8009800:	4638      	mov	r0, r7
 8009802:	e7d2      	b.n	80097aa <_strtod_l+0x1fa>
 8009804:	2b08      	cmp	r3, #8
 8009806:	dc04      	bgt.n	8009812 <_strtod_l+0x262>
 8009808:	9e07      	ldr	r6, [sp, #28]
 800980a:	434e      	muls	r6, r1
 800980c:	9607      	str	r6, [sp, #28]
 800980e:	3301      	adds	r3, #1
 8009810:	e7e2      	b.n	80097d8 <_strtod_l+0x228>
 8009812:	f103 0c01 	add.w	ip, r3, #1
 8009816:	f1bc 0f10 	cmp.w	ip, #16
 800981a:	bfd8      	it	le
 800981c:	fb01 f909 	mulle.w	r9, r1, r9
 8009820:	e7f5      	b.n	800980e <_strtod_l+0x25e>
 8009822:	2d10      	cmp	r5, #16
 8009824:	bfdc      	itt	le
 8009826:	230a      	movle	r3, #10
 8009828:	fb03 2909 	mlale	r9, r3, r9, r2
 800982c:	e7e1      	b.n	80097f2 <_strtod_l+0x242>
 800982e:	2300      	movs	r3, #0
 8009830:	9305      	str	r3, [sp, #20]
 8009832:	2301      	movs	r3, #1
 8009834:	e77c      	b.n	8009730 <_strtod_l+0x180>
 8009836:	f04f 0c00 	mov.w	ip, #0
 800983a:	f108 0202 	add.w	r2, r8, #2
 800983e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009840:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009844:	e785      	b.n	8009752 <_strtod_l+0x1a2>
 8009846:	f04f 0c01 	mov.w	ip, #1
 800984a:	e7f6      	b.n	800983a <_strtod_l+0x28a>
 800984c:	0800e2f0 	.word	0x0800e2f0
 8009850:	0800e0a8 	.word	0x0800e0a8
 8009854:	7ff00000 	.word	0x7ff00000
 8009858:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800985a:	1c51      	adds	r1, r2, #1
 800985c:	9117      	str	r1, [sp, #92]	; 0x5c
 800985e:	7852      	ldrb	r2, [r2, #1]
 8009860:	2a30      	cmp	r2, #48	; 0x30
 8009862:	d0f9      	beq.n	8009858 <_strtod_l+0x2a8>
 8009864:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009868:	2908      	cmp	r1, #8
 800986a:	f63f af79 	bhi.w	8009760 <_strtod_l+0x1b0>
 800986e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009872:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009874:	9206      	str	r2, [sp, #24]
 8009876:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009878:	1c51      	adds	r1, r2, #1
 800987a:	9117      	str	r1, [sp, #92]	; 0x5c
 800987c:	7852      	ldrb	r2, [r2, #1]
 800987e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009882:	2e09      	cmp	r6, #9
 8009884:	d937      	bls.n	80098f6 <_strtod_l+0x346>
 8009886:	9e06      	ldr	r6, [sp, #24]
 8009888:	1b89      	subs	r1, r1, r6
 800988a:	2908      	cmp	r1, #8
 800988c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009890:	dc02      	bgt.n	8009898 <_strtod_l+0x2e8>
 8009892:	4576      	cmp	r6, lr
 8009894:	bfa8      	it	ge
 8009896:	4676      	movge	r6, lr
 8009898:	f1bc 0f00 	cmp.w	ip, #0
 800989c:	d000      	beq.n	80098a0 <_strtod_l+0x2f0>
 800989e:	4276      	negs	r6, r6
 80098a0:	2d00      	cmp	r5, #0
 80098a2:	d14d      	bne.n	8009940 <_strtod_l+0x390>
 80098a4:	9904      	ldr	r1, [sp, #16]
 80098a6:	4301      	orrs	r1, r0
 80098a8:	f47f aec6 	bne.w	8009638 <_strtod_l+0x88>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f47f aee1 	bne.w	8009674 <_strtod_l+0xc4>
 80098b2:	2a69      	cmp	r2, #105	; 0x69
 80098b4:	d027      	beq.n	8009906 <_strtod_l+0x356>
 80098b6:	dc24      	bgt.n	8009902 <_strtod_l+0x352>
 80098b8:	2a49      	cmp	r2, #73	; 0x49
 80098ba:	d024      	beq.n	8009906 <_strtod_l+0x356>
 80098bc:	2a4e      	cmp	r2, #78	; 0x4e
 80098be:	f47f aed9 	bne.w	8009674 <_strtod_l+0xc4>
 80098c2:	499f      	ldr	r1, [pc, #636]	; (8009b40 <_strtod_l+0x590>)
 80098c4:	a817      	add	r0, sp, #92	; 0x5c
 80098c6:	f001 fe61 	bl	800b58c <__match>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	f43f aed2 	beq.w	8009674 <_strtod_l+0xc4>
 80098d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b28      	cmp	r3, #40	; 0x28
 80098d6:	d12d      	bne.n	8009934 <_strtod_l+0x384>
 80098d8:	499a      	ldr	r1, [pc, #616]	; (8009b44 <_strtod_l+0x594>)
 80098da:	aa1a      	add	r2, sp, #104	; 0x68
 80098dc:	a817      	add	r0, sp, #92	; 0x5c
 80098de:	f001 fe69 	bl	800b5b4 <__hexnan>
 80098e2:	2805      	cmp	r0, #5
 80098e4:	d126      	bne.n	8009934 <_strtod_l+0x384>
 80098e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80098ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80098f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80098f4:	e6a0      	b.n	8009638 <_strtod_l+0x88>
 80098f6:	210a      	movs	r1, #10
 80098f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80098fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009900:	e7b9      	b.n	8009876 <_strtod_l+0x2c6>
 8009902:	2a6e      	cmp	r2, #110	; 0x6e
 8009904:	e7db      	b.n	80098be <_strtod_l+0x30e>
 8009906:	4990      	ldr	r1, [pc, #576]	; (8009b48 <_strtod_l+0x598>)
 8009908:	a817      	add	r0, sp, #92	; 0x5c
 800990a:	f001 fe3f 	bl	800b58c <__match>
 800990e:	2800      	cmp	r0, #0
 8009910:	f43f aeb0 	beq.w	8009674 <_strtod_l+0xc4>
 8009914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009916:	498d      	ldr	r1, [pc, #564]	; (8009b4c <_strtod_l+0x59c>)
 8009918:	3b01      	subs	r3, #1
 800991a:	a817      	add	r0, sp, #92	; 0x5c
 800991c:	9317      	str	r3, [sp, #92]	; 0x5c
 800991e:	f001 fe35 	bl	800b58c <__match>
 8009922:	b910      	cbnz	r0, 800992a <_strtod_l+0x37a>
 8009924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009926:	3301      	adds	r3, #1
 8009928:	9317      	str	r3, [sp, #92]	; 0x5c
 800992a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009b5c <_strtod_l+0x5ac>
 800992e:	f04f 0a00 	mov.w	sl, #0
 8009932:	e681      	b.n	8009638 <_strtod_l+0x88>
 8009934:	4886      	ldr	r0, [pc, #536]	; (8009b50 <_strtod_l+0x5a0>)
 8009936:	f003 f877 	bl	800ca28 <nan>
 800993a:	ec5b ab10 	vmov	sl, fp, d0
 800993e:	e67b      	b.n	8009638 <_strtod_l+0x88>
 8009940:	9b05      	ldr	r3, [sp, #20]
 8009942:	9807      	ldr	r0, [sp, #28]
 8009944:	1af3      	subs	r3, r6, r3
 8009946:	2f00      	cmp	r7, #0
 8009948:	bf08      	it	eq
 800994a:	462f      	moveq	r7, r5
 800994c:	2d10      	cmp	r5, #16
 800994e:	9306      	str	r3, [sp, #24]
 8009950:	46a8      	mov	r8, r5
 8009952:	bfa8      	it	ge
 8009954:	f04f 0810 	movge.w	r8, #16
 8009958:	f7f6 fddc 	bl	8000514 <__aeabi_ui2d>
 800995c:	2d09      	cmp	r5, #9
 800995e:	4682      	mov	sl, r0
 8009960:	468b      	mov	fp, r1
 8009962:	dd13      	ble.n	800998c <_strtod_l+0x3dc>
 8009964:	4b7b      	ldr	r3, [pc, #492]	; (8009b54 <_strtod_l+0x5a4>)
 8009966:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800996a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800996e:	f7f6 fe4b 	bl	8000608 <__aeabi_dmul>
 8009972:	4682      	mov	sl, r0
 8009974:	4648      	mov	r0, r9
 8009976:	468b      	mov	fp, r1
 8009978:	f7f6 fdcc 	bl	8000514 <__aeabi_ui2d>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4650      	mov	r0, sl
 8009982:	4659      	mov	r1, fp
 8009984:	f7f6 fc8a 	bl	800029c <__adddf3>
 8009988:	4682      	mov	sl, r0
 800998a:	468b      	mov	fp, r1
 800998c:	2d0f      	cmp	r5, #15
 800998e:	dc38      	bgt.n	8009a02 <_strtod_l+0x452>
 8009990:	9b06      	ldr	r3, [sp, #24]
 8009992:	2b00      	cmp	r3, #0
 8009994:	f43f ae50 	beq.w	8009638 <_strtod_l+0x88>
 8009998:	dd24      	ble.n	80099e4 <_strtod_l+0x434>
 800999a:	2b16      	cmp	r3, #22
 800999c:	dc0b      	bgt.n	80099b6 <_strtod_l+0x406>
 800999e:	496d      	ldr	r1, [pc, #436]	; (8009b54 <_strtod_l+0x5a4>)
 80099a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099a8:	4652      	mov	r2, sl
 80099aa:	465b      	mov	r3, fp
 80099ac:	f7f6 fe2c 	bl	8000608 <__aeabi_dmul>
 80099b0:	4682      	mov	sl, r0
 80099b2:	468b      	mov	fp, r1
 80099b4:	e640      	b.n	8009638 <_strtod_l+0x88>
 80099b6:	9a06      	ldr	r2, [sp, #24]
 80099b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80099bc:	4293      	cmp	r3, r2
 80099be:	db20      	blt.n	8009a02 <_strtod_l+0x452>
 80099c0:	4c64      	ldr	r4, [pc, #400]	; (8009b54 <_strtod_l+0x5a4>)
 80099c2:	f1c5 050f 	rsb	r5, r5, #15
 80099c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099ca:	4652      	mov	r2, sl
 80099cc:	465b      	mov	r3, fp
 80099ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d2:	f7f6 fe19 	bl	8000608 <__aeabi_dmul>
 80099d6:	9b06      	ldr	r3, [sp, #24]
 80099d8:	1b5d      	subs	r5, r3, r5
 80099da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80099de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099e2:	e7e3      	b.n	80099ac <_strtod_l+0x3fc>
 80099e4:	9b06      	ldr	r3, [sp, #24]
 80099e6:	3316      	adds	r3, #22
 80099e8:	db0b      	blt.n	8009a02 <_strtod_l+0x452>
 80099ea:	9b05      	ldr	r3, [sp, #20]
 80099ec:	1b9e      	subs	r6, r3, r6
 80099ee:	4b59      	ldr	r3, [pc, #356]	; (8009b54 <_strtod_l+0x5a4>)
 80099f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80099f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099f8:	4650      	mov	r0, sl
 80099fa:	4659      	mov	r1, fp
 80099fc:	f7f6 ff2e 	bl	800085c <__aeabi_ddiv>
 8009a00:	e7d6      	b.n	80099b0 <_strtod_l+0x400>
 8009a02:	9b06      	ldr	r3, [sp, #24]
 8009a04:	eba5 0808 	sub.w	r8, r5, r8
 8009a08:	4498      	add	r8, r3
 8009a0a:	f1b8 0f00 	cmp.w	r8, #0
 8009a0e:	dd74      	ble.n	8009afa <_strtod_l+0x54a>
 8009a10:	f018 030f 	ands.w	r3, r8, #15
 8009a14:	d00a      	beq.n	8009a2c <_strtod_l+0x47c>
 8009a16:	494f      	ldr	r1, [pc, #316]	; (8009b54 <_strtod_l+0x5a4>)
 8009a18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a1c:	4652      	mov	r2, sl
 8009a1e:	465b      	mov	r3, fp
 8009a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a24:	f7f6 fdf0 	bl	8000608 <__aeabi_dmul>
 8009a28:	4682      	mov	sl, r0
 8009a2a:	468b      	mov	fp, r1
 8009a2c:	f038 080f 	bics.w	r8, r8, #15
 8009a30:	d04f      	beq.n	8009ad2 <_strtod_l+0x522>
 8009a32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009a36:	dd22      	ble.n	8009a7e <_strtod_l+0x4ce>
 8009a38:	2500      	movs	r5, #0
 8009a3a:	462e      	mov	r6, r5
 8009a3c:	9507      	str	r5, [sp, #28]
 8009a3e:	9505      	str	r5, [sp, #20]
 8009a40:	2322      	movs	r3, #34	; 0x22
 8009a42:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009b5c <_strtod_l+0x5ac>
 8009a46:	6023      	str	r3, [r4, #0]
 8009a48:	f04f 0a00 	mov.w	sl, #0
 8009a4c:	9b07      	ldr	r3, [sp, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f43f adf2 	beq.w	8009638 <_strtod_l+0x88>
 8009a54:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a56:	4620      	mov	r0, r4
 8009a58:	f001 febc 	bl	800b7d4 <_Bfree>
 8009a5c:	9905      	ldr	r1, [sp, #20]
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f001 feb8 	bl	800b7d4 <_Bfree>
 8009a64:	4631      	mov	r1, r6
 8009a66:	4620      	mov	r0, r4
 8009a68:	f001 feb4 	bl	800b7d4 <_Bfree>
 8009a6c:	9907      	ldr	r1, [sp, #28]
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f001 feb0 	bl	800b7d4 <_Bfree>
 8009a74:	4629      	mov	r1, r5
 8009a76:	4620      	mov	r0, r4
 8009a78:	f001 feac 	bl	800b7d4 <_Bfree>
 8009a7c:	e5dc      	b.n	8009638 <_strtod_l+0x88>
 8009a7e:	4b36      	ldr	r3, [pc, #216]	; (8009b58 <_strtod_l+0x5a8>)
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	2300      	movs	r3, #0
 8009a84:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009a88:	4650      	mov	r0, sl
 8009a8a:	4659      	mov	r1, fp
 8009a8c:	4699      	mov	r9, r3
 8009a8e:	f1b8 0f01 	cmp.w	r8, #1
 8009a92:	dc21      	bgt.n	8009ad8 <_strtod_l+0x528>
 8009a94:	b10b      	cbz	r3, 8009a9a <_strtod_l+0x4ea>
 8009a96:	4682      	mov	sl, r0
 8009a98:	468b      	mov	fp, r1
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	; (8009b58 <_strtod_l+0x5a8>)
 8009a9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009aa0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	465b      	mov	r3, fp
 8009aa8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009aac:	f7f6 fdac 	bl	8000608 <__aeabi_dmul>
 8009ab0:	4b2a      	ldr	r3, [pc, #168]	; (8009b5c <_strtod_l+0x5ac>)
 8009ab2:	460a      	mov	r2, r1
 8009ab4:	400b      	ands	r3, r1
 8009ab6:	492a      	ldr	r1, [pc, #168]	; (8009b60 <_strtod_l+0x5b0>)
 8009ab8:	428b      	cmp	r3, r1
 8009aba:	4682      	mov	sl, r0
 8009abc:	d8bc      	bhi.n	8009a38 <_strtod_l+0x488>
 8009abe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ac2:	428b      	cmp	r3, r1
 8009ac4:	bf86      	itte	hi
 8009ac6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009b64 <_strtod_l+0x5b4>
 8009aca:	f04f 3aff 	movhi.w	sl, #4294967295
 8009ace:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	e084      	b.n	8009be2 <_strtod_l+0x632>
 8009ad8:	f018 0f01 	tst.w	r8, #1
 8009adc:	d005      	beq.n	8009aea <_strtod_l+0x53a>
 8009ade:	9b04      	ldr	r3, [sp, #16]
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	f7f6 fd90 	bl	8000608 <__aeabi_dmul>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	9a04      	ldr	r2, [sp, #16]
 8009aec:	3208      	adds	r2, #8
 8009aee:	f109 0901 	add.w	r9, r9, #1
 8009af2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009af6:	9204      	str	r2, [sp, #16]
 8009af8:	e7c9      	b.n	8009a8e <_strtod_l+0x4de>
 8009afa:	d0ea      	beq.n	8009ad2 <_strtod_l+0x522>
 8009afc:	f1c8 0800 	rsb	r8, r8, #0
 8009b00:	f018 020f 	ands.w	r2, r8, #15
 8009b04:	d00a      	beq.n	8009b1c <_strtod_l+0x56c>
 8009b06:	4b13      	ldr	r3, [pc, #76]	; (8009b54 <_strtod_l+0x5a4>)
 8009b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b0c:	4650      	mov	r0, sl
 8009b0e:	4659      	mov	r1, fp
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f7f6 fea2 	bl	800085c <__aeabi_ddiv>
 8009b18:	4682      	mov	sl, r0
 8009b1a:	468b      	mov	fp, r1
 8009b1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009b20:	d0d7      	beq.n	8009ad2 <_strtod_l+0x522>
 8009b22:	f1b8 0f1f 	cmp.w	r8, #31
 8009b26:	dd1f      	ble.n	8009b68 <_strtod_l+0x5b8>
 8009b28:	2500      	movs	r5, #0
 8009b2a:	462e      	mov	r6, r5
 8009b2c:	9507      	str	r5, [sp, #28]
 8009b2e:	9505      	str	r5, [sp, #20]
 8009b30:	2322      	movs	r3, #34	; 0x22
 8009b32:	f04f 0a00 	mov.w	sl, #0
 8009b36:	f04f 0b00 	mov.w	fp, #0
 8009b3a:	6023      	str	r3, [r4, #0]
 8009b3c:	e786      	b.n	8009a4c <_strtod_l+0x49c>
 8009b3e:	bf00      	nop
 8009b40:	0800e07d 	.word	0x0800e07d
 8009b44:	0800e0bc 	.word	0x0800e0bc
 8009b48:	0800e075 	.word	0x0800e075
 8009b4c:	0800e1fc 	.word	0x0800e1fc
 8009b50:	0800e4c3 	.word	0x0800e4c3
 8009b54:	0800e388 	.word	0x0800e388
 8009b58:	0800e360 	.word	0x0800e360
 8009b5c:	7ff00000 	.word	0x7ff00000
 8009b60:	7ca00000 	.word	0x7ca00000
 8009b64:	7fefffff 	.word	0x7fefffff
 8009b68:	f018 0310 	ands.w	r3, r8, #16
 8009b6c:	bf18      	it	ne
 8009b6e:	236a      	movne	r3, #106	; 0x6a
 8009b70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009f20 <_strtod_l+0x970>
 8009b74:	9304      	str	r3, [sp, #16]
 8009b76:	4650      	mov	r0, sl
 8009b78:	4659      	mov	r1, fp
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f018 0f01 	tst.w	r8, #1
 8009b80:	d004      	beq.n	8009b8c <_strtod_l+0x5dc>
 8009b82:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b86:	f7f6 fd3f 	bl	8000608 <__aeabi_dmul>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009b90:	f109 0908 	add.w	r9, r9, #8
 8009b94:	d1f2      	bne.n	8009b7c <_strtod_l+0x5cc>
 8009b96:	b10b      	cbz	r3, 8009b9c <_strtod_l+0x5ec>
 8009b98:	4682      	mov	sl, r0
 8009b9a:	468b      	mov	fp, r1
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	b1c3      	cbz	r3, 8009bd2 <_strtod_l+0x622>
 8009ba0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009ba4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	4659      	mov	r1, fp
 8009bac:	dd11      	ble.n	8009bd2 <_strtod_l+0x622>
 8009bae:	2b1f      	cmp	r3, #31
 8009bb0:	f340 8124 	ble.w	8009dfc <_strtod_l+0x84c>
 8009bb4:	2b34      	cmp	r3, #52	; 0x34
 8009bb6:	bfde      	ittt	le
 8009bb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009bbc:	f04f 33ff 	movle.w	r3, #4294967295
 8009bc0:	fa03 f202 	lslle.w	r2, r3, r2
 8009bc4:	f04f 0a00 	mov.w	sl, #0
 8009bc8:	bfcc      	ite	gt
 8009bca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009bce:	ea02 0b01 	andle.w	fp, r2, r1
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	4659      	mov	r1, fp
 8009bda:	f7f6 ff7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d1a2      	bne.n	8009b28 <_strtod_l+0x578>
 8009be2:	9b07      	ldr	r3, [sp, #28]
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	9908      	ldr	r1, [sp, #32]
 8009be8:	462b      	mov	r3, r5
 8009bea:	463a      	mov	r2, r7
 8009bec:	4620      	mov	r0, r4
 8009bee:	f001 fe59 	bl	800b8a4 <__s2b>
 8009bf2:	9007      	str	r0, [sp, #28]
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f43f af1f 	beq.w	8009a38 <_strtod_l+0x488>
 8009bfa:	9b05      	ldr	r3, [sp, #20]
 8009bfc:	1b9e      	subs	r6, r3, r6
 8009bfe:	9b06      	ldr	r3, [sp, #24]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfb4      	ite	lt
 8009c04:	4633      	movlt	r3, r6
 8009c06:	2300      	movge	r3, #0
 8009c08:	930c      	str	r3, [sp, #48]	; 0x30
 8009c0a:	9b06      	ldr	r3, [sp, #24]
 8009c0c:	2500      	movs	r5, #0
 8009c0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c12:	9312      	str	r3, [sp, #72]	; 0x48
 8009c14:	462e      	mov	r6, r5
 8009c16:	9b07      	ldr	r3, [sp, #28]
 8009c18:	4620      	mov	r0, r4
 8009c1a:	6859      	ldr	r1, [r3, #4]
 8009c1c:	f001 fd9a 	bl	800b754 <_Balloc>
 8009c20:	9005      	str	r0, [sp, #20]
 8009c22:	2800      	cmp	r0, #0
 8009c24:	f43f af0c 	beq.w	8009a40 <_strtod_l+0x490>
 8009c28:	9b07      	ldr	r3, [sp, #28]
 8009c2a:	691a      	ldr	r2, [r3, #16]
 8009c2c:	3202      	adds	r2, #2
 8009c2e:	f103 010c 	add.w	r1, r3, #12
 8009c32:	0092      	lsls	r2, r2, #2
 8009c34:	300c      	adds	r0, #12
 8009c36:	f7fe fc6b 	bl	8008510 <memcpy>
 8009c3a:	ec4b ab10 	vmov	d0, sl, fp
 8009c3e:	aa1a      	add	r2, sp, #104	; 0x68
 8009c40:	a919      	add	r1, sp, #100	; 0x64
 8009c42:	4620      	mov	r0, r4
 8009c44:	f002 f974 	bl	800bf30 <__d2b>
 8009c48:	ec4b ab18 	vmov	d8, sl, fp
 8009c4c:	9018      	str	r0, [sp, #96]	; 0x60
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f43f aef6 	beq.w	8009a40 <_strtod_l+0x490>
 8009c54:	2101      	movs	r1, #1
 8009c56:	4620      	mov	r0, r4
 8009c58:	f001 febe 	bl	800b9d8 <__i2b>
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	f43f aeee 	beq.w	8009a40 <_strtod_l+0x490>
 8009c64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c66:	9904      	ldr	r1, [sp, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bfab      	itete	ge
 8009c6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009c6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009c70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009c72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009c76:	bfac      	ite	ge
 8009c78:	eb03 0902 	addge.w	r9, r3, r2
 8009c7c:	1ad7      	sublt	r7, r2, r3
 8009c7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c80:	eba3 0801 	sub.w	r8, r3, r1
 8009c84:	4490      	add	r8, r2
 8009c86:	4ba1      	ldr	r3, [pc, #644]	; (8009f0c <_strtod_l+0x95c>)
 8009c88:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c8c:	4598      	cmp	r8, r3
 8009c8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c92:	f280 80c7 	bge.w	8009e24 <_strtod_l+0x874>
 8009c96:	eba3 0308 	sub.w	r3, r3, r8
 8009c9a:	2b1f      	cmp	r3, #31
 8009c9c:	eba2 0203 	sub.w	r2, r2, r3
 8009ca0:	f04f 0101 	mov.w	r1, #1
 8009ca4:	f300 80b1 	bgt.w	8009e0a <_strtod_l+0x85a>
 8009ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cac:	930d      	str	r3, [sp, #52]	; 0x34
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9308      	str	r3, [sp, #32]
 8009cb2:	eb09 0802 	add.w	r8, r9, r2
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	45c1      	cmp	r9, r8
 8009cba:	4417      	add	r7, r2
 8009cbc:	441f      	add	r7, r3
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	bfa8      	it	ge
 8009cc2:	4643      	movge	r3, r8
 8009cc4:	42bb      	cmp	r3, r7
 8009cc6:	bfa8      	it	ge
 8009cc8:	463b      	movge	r3, r7
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bfc2      	ittt	gt
 8009cce:	eba8 0803 	subgt.w	r8, r8, r3
 8009cd2:	1aff      	subgt	r7, r7, r3
 8009cd4:	eba9 0903 	subgt.w	r9, r9, r3
 8009cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dd17      	ble.n	8009d0e <_strtod_l+0x75e>
 8009cde:	4631      	mov	r1, r6
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f001 ff38 	bl	800bb58 <__pow5mult>
 8009ce8:	4606      	mov	r6, r0
 8009cea:	2800      	cmp	r0, #0
 8009cec:	f43f aea8 	beq.w	8009a40 <_strtod_l+0x490>
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f001 fe85 	bl	800ba04 <__multiply>
 8009cfa:	900b      	str	r0, [sp, #44]	; 0x2c
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f43f ae9f 	beq.w	8009a40 <_strtod_l+0x490>
 8009d02:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d04:	4620      	mov	r0, r4
 8009d06:	f001 fd65 	bl	800b7d4 <_Bfree>
 8009d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0c:	9318      	str	r3, [sp, #96]	; 0x60
 8009d0e:	f1b8 0f00 	cmp.w	r8, #0
 8009d12:	f300 808c 	bgt.w	8009e2e <_strtod_l+0x87e>
 8009d16:	9b06      	ldr	r3, [sp, #24]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	dd08      	ble.n	8009d2e <_strtod_l+0x77e>
 8009d1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d1e:	9905      	ldr	r1, [sp, #20]
 8009d20:	4620      	mov	r0, r4
 8009d22:	f001 ff19 	bl	800bb58 <__pow5mult>
 8009d26:	9005      	str	r0, [sp, #20]
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	f43f ae89 	beq.w	8009a40 <_strtod_l+0x490>
 8009d2e:	2f00      	cmp	r7, #0
 8009d30:	dd08      	ble.n	8009d44 <_strtod_l+0x794>
 8009d32:	9905      	ldr	r1, [sp, #20]
 8009d34:	463a      	mov	r2, r7
 8009d36:	4620      	mov	r0, r4
 8009d38:	f001 ff68 	bl	800bc0c <__lshift>
 8009d3c:	9005      	str	r0, [sp, #20]
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f43f ae7e 	beq.w	8009a40 <_strtod_l+0x490>
 8009d44:	f1b9 0f00 	cmp.w	r9, #0
 8009d48:	dd08      	ble.n	8009d5c <_strtod_l+0x7ac>
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	464a      	mov	r2, r9
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f001 ff5c 	bl	800bc0c <__lshift>
 8009d54:	4606      	mov	r6, r0
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f43f ae72 	beq.w	8009a40 <_strtod_l+0x490>
 8009d5c:	9a05      	ldr	r2, [sp, #20]
 8009d5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d60:	4620      	mov	r0, r4
 8009d62:	f001 ffdf 	bl	800bd24 <__mdiff>
 8009d66:	4605      	mov	r5, r0
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f43f ae69 	beq.w	8009a40 <_strtod_l+0x490>
 8009d6e:	68c3      	ldr	r3, [r0, #12]
 8009d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d72:	2300      	movs	r3, #0
 8009d74:	60c3      	str	r3, [r0, #12]
 8009d76:	4631      	mov	r1, r6
 8009d78:	f001 ffb8 	bl	800bcec <__mcmp>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	da60      	bge.n	8009e42 <_strtod_l+0x892>
 8009d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d82:	ea53 030a 	orrs.w	r3, r3, sl
 8009d86:	f040 8082 	bne.w	8009e8e <_strtod_l+0x8de>
 8009d8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d17d      	bne.n	8009e8e <_strtod_l+0x8de>
 8009d92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d96:	0d1b      	lsrs	r3, r3, #20
 8009d98:	051b      	lsls	r3, r3, #20
 8009d9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d9e:	d976      	bls.n	8009e8e <_strtod_l+0x8de>
 8009da0:	696b      	ldr	r3, [r5, #20]
 8009da2:	b913      	cbnz	r3, 8009daa <_strtod_l+0x7fa>
 8009da4:	692b      	ldr	r3, [r5, #16]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	dd71      	ble.n	8009e8e <_strtod_l+0x8de>
 8009daa:	4629      	mov	r1, r5
 8009dac:	2201      	movs	r2, #1
 8009dae:	4620      	mov	r0, r4
 8009db0:	f001 ff2c 	bl	800bc0c <__lshift>
 8009db4:	4631      	mov	r1, r6
 8009db6:	4605      	mov	r5, r0
 8009db8:	f001 ff98 	bl	800bcec <__mcmp>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	dd66      	ble.n	8009e8e <_strtod_l+0x8de>
 8009dc0:	9904      	ldr	r1, [sp, #16]
 8009dc2:	4a53      	ldr	r2, [pc, #332]	; (8009f10 <_strtod_l+0x960>)
 8009dc4:	465b      	mov	r3, fp
 8009dc6:	2900      	cmp	r1, #0
 8009dc8:	f000 8081 	beq.w	8009ece <_strtod_l+0x91e>
 8009dcc:	ea02 010b 	and.w	r1, r2, fp
 8009dd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009dd4:	dc7b      	bgt.n	8009ece <_strtod_l+0x91e>
 8009dd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009dda:	f77f aea9 	ble.w	8009b30 <_strtod_l+0x580>
 8009dde:	4b4d      	ldr	r3, [pc, #308]	; (8009f14 <_strtod_l+0x964>)
 8009de0:	4650      	mov	r0, sl
 8009de2:	4659      	mov	r1, fp
 8009de4:	2200      	movs	r2, #0
 8009de6:	f7f6 fc0f 	bl	8000608 <__aeabi_dmul>
 8009dea:	460b      	mov	r3, r1
 8009dec:	4303      	orrs	r3, r0
 8009dee:	bf08      	it	eq
 8009df0:	2322      	moveq	r3, #34	; 0x22
 8009df2:	4682      	mov	sl, r0
 8009df4:	468b      	mov	fp, r1
 8009df6:	bf08      	it	eq
 8009df8:	6023      	streq	r3, [r4, #0]
 8009dfa:	e62b      	b.n	8009a54 <_strtod_l+0x4a4>
 8009dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009e00:	fa02 f303 	lsl.w	r3, r2, r3
 8009e04:	ea03 0a0a 	and.w	sl, r3, sl
 8009e08:	e6e3      	b.n	8009bd2 <_strtod_l+0x622>
 8009e0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009e0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009e12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009e16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009e1a:	fa01 f308 	lsl.w	r3, r1, r8
 8009e1e:	9308      	str	r3, [sp, #32]
 8009e20:	910d      	str	r1, [sp, #52]	; 0x34
 8009e22:	e746      	b.n	8009cb2 <_strtod_l+0x702>
 8009e24:	2300      	movs	r3, #0
 8009e26:	9308      	str	r3, [sp, #32]
 8009e28:	2301      	movs	r3, #1
 8009e2a:	930d      	str	r3, [sp, #52]	; 0x34
 8009e2c:	e741      	b.n	8009cb2 <_strtod_l+0x702>
 8009e2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e30:	4642      	mov	r2, r8
 8009e32:	4620      	mov	r0, r4
 8009e34:	f001 feea 	bl	800bc0c <__lshift>
 8009e38:	9018      	str	r0, [sp, #96]	; 0x60
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f47f af6b 	bne.w	8009d16 <_strtod_l+0x766>
 8009e40:	e5fe      	b.n	8009a40 <_strtod_l+0x490>
 8009e42:	465f      	mov	r7, fp
 8009e44:	d16e      	bne.n	8009f24 <_strtod_l+0x974>
 8009e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e4c:	b342      	cbz	r2, 8009ea0 <_strtod_l+0x8f0>
 8009e4e:	4a32      	ldr	r2, [pc, #200]	; (8009f18 <_strtod_l+0x968>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d128      	bne.n	8009ea6 <_strtod_l+0x8f6>
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	4651      	mov	r1, sl
 8009e58:	b1eb      	cbz	r3, 8009e96 <_strtod_l+0x8e6>
 8009e5a:	4b2d      	ldr	r3, [pc, #180]	; (8009f10 <_strtod_l+0x960>)
 8009e5c:	403b      	ands	r3, r7
 8009e5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e62:	f04f 32ff 	mov.w	r2, #4294967295
 8009e66:	d819      	bhi.n	8009e9c <_strtod_l+0x8ec>
 8009e68:	0d1b      	lsrs	r3, r3, #20
 8009e6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e72:	4299      	cmp	r1, r3
 8009e74:	d117      	bne.n	8009ea6 <_strtod_l+0x8f6>
 8009e76:	4b29      	ldr	r3, [pc, #164]	; (8009f1c <_strtod_l+0x96c>)
 8009e78:	429f      	cmp	r7, r3
 8009e7a:	d102      	bne.n	8009e82 <_strtod_l+0x8d2>
 8009e7c:	3101      	adds	r1, #1
 8009e7e:	f43f addf 	beq.w	8009a40 <_strtod_l+0x490>
 8009e82:	4b23      	ldr	r3, [pc, #140]	; (8009f10 <_strtod_l+0x960>)
 8009e84:	403b      	ands	r3, r7
 8009e86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009e8a:	f04f 0a00 	mov.w	sl, #0
 8009e8e:	9b04      	ldr	r3, [sp, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1a4      	bne.n	8009dde <_strtod_l+0x82e>
 8009e94:	e5de      	b.n	8009a54 <_strtod_l+0x4a4>
 8009e96:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9a:	e7ea      	b.n	8009e72 <_strtod_l+0x8c2>
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	e7e8      	b.n	8009e72 <_strtod_l+0x8c2>
 8009ea0:	ea53 030a 	orrs.w	r3, r3, sl
 8009ea4:	d08c      	beq.n	8009dc0 <_strtod_l+0x810>
 8009ea6:	9b08      	ldr	r3, [sp, #32]
 8009ea8:	b1db      	cbz	r3, 8009ee2 <_strtod_l+0x932>
 8009eaa:	423b      	tst	r3, r7
 8009eac:	d0ef      	beq.n	8009e8e <_strtod_l+0x8de>
 8009eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eb0:	9a04      	ldr	r2, [sp, #16]
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	4659      	mov	r1, fp
 8009eb6:	b1c3      	cbz	r3, 8009eea <_strtod_l+0x93a>
 8009eb8:	f7ff fb5b 	bl	8009572 <sulp>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	ec51 0b18 	vmov	r0, r1, d8
 8009ec4:	f7f6 f9ea 	bl	800029c <__adddf3>
 8009ec8:	4682      	mov	sl, r0
 8009eca:	468b      	mov	fp, r1
 8009ecc:	e7df      	b.n	8009e8e <_strtod_l+0x8de>
 8009ece:	4013      	ands	r3, r2
 8009ed0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ed4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ed8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009edc:	f04f 3aff 	mov.w	sl, #4294967295
 8009ee0:	e7d5      	b.n	8009e8e <_strtod_l+0x8de>
 8009ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ee4:	ea13 0f0a 	tst.w	r3, sl
 8009ee8:	e7e0      	b.n	8009eac <_strtod_l+0x8fc>
 8009eea:	f7ff fb42 	bl	8009572 <sulp>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	ec51 0b18 	vmov	r0, r1, d8
 8009ef6:	f7f6 f9cf 	bl	8000298 <__aeabi_dsub>
 8009efa:	2200      	movs	r2, #0
 8009efc:	2300      	movs	r3, #0
 8009efe:	4682      	mov	sl, r0
 8009f00:	468b      	mov	fp, r1
 8009f02:	f7f6 fde9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d0c1      	beq.n	8009e8e <_strtod_l+0x8de>
 8009f0a:	e611      	b.n	8009b30 <_strtod_l+0x580>
 8009f0c:	fffffc02 	.word	0xfffffc02
 8009f10:	7ff00000 	.word	0x7ff00000
 8009f14:	39500000 	.word	0x39500000
 8009f18:	000fffff 	.word	0x000fffff
 8009f1c:	7fefffff 	.word	0x7fefffff
 8009f20:	0800e0d0 	.word	0x0800e0d0
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	f002 f85e 	bl	800bfe8 <__ratio>
 8009f2c:	ec59 8b10 	vmov	r8, r9, d0
 8009f30:	ee10 0a10 	vmov	r0, s0
 8009f34:	2200      	movs	r2, #0
 8009f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	f7f6 fde0 	bl	8000b00 <__aeabi_dcmple>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d07a      	beq.n	800a03a <_strtod_l+0xa8a>
 8009f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d04a      	beq.n	8009fe0 <_strtod_l+0xa30>
 8009f4a:	4b95      	ldr	r3, [pc, #596]	; (800a1a0 <_strtod_l+0xbf0>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a1a0 <_strtod_l+0xbf0>
 8009f56:	f04f 0800 	mov.w	r8, #0
 8009f5a:	4b92      	ldr	r3, [pc, #584]	; (800a1a4 <_strtod_l+0xbf4>)
 8009f5c:	403b      	ands	r3, r7
 8009f5e:	930d      	str	r3, [sp, #52]	; 0x34
 8009f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f62:	4b91      	ldr	r3, [pc, #580]	; (800a1a8 <_strtod_l+0xbf8>)
 8009f64:	429a      	cmp	r2, r3
 8009f66:	f040 80b0 	bne.w	800a0ca <_strtod_l+0xb1a>
 8009f6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009f72:	ec4b ab10 	vmov	d0, sl, fp
 8009f76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f7a:	f001 ff5d 	bl	800be38 <__ulp>
 8009f7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f82:	ec53 2b10 	vmov	r2, r3, d0
 8009f86:	f7f6 fb3f 	bl	8000608 <__aeabi_dmul>
 8009f8a:	4652      	mov	r2, sl
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	f7f6 f985 	bl	800029c <__adddf3>
 8009f92:	460b      	mov	r3, r1
 8009f94:	4983      	ldr	r1, [pc, #524]	; (800a1a4 <_strtod_l+0xbf4>)
 8009f96:	4a85      	ldr	r2, [pc, #532]	; (800a1ac <_strtod_l+0xbfc>)
 8009f98:	4019      	ands	r1, r3
 8009f9a:	4291      	cmp	r1, r2
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	d960      	bls.n	800a062 <_strtod_l+0xab2>
 8009fa0:	ee18 3a90 	vmov	r3, s17
 8009fa4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d104      	bne.n	8009fb6 <_strtod_l+0xa06>
 8009fac:	ee18 3a10 	vmov	r3, s16
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	f43f ad45 	beq.w	8009a40 <_strtod_l+0x490>
 8009fb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a1b8 <_strtod_l+0xc08>
 8009fba:	f04f 3aff 	mov.w	sl, #4294967295
 8009fbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f001 fc07 	bl	800b7d4 <_Bfree>
 8009fc6:	9905      	ldr	r1, [sp, #20]
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f001 fc03 	bl	800b7d4 <_Bfree>
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f001 fbff 	bl	800b7d4 <_Bfree>
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f001 fbfb 	bl	800b7d4 <_Bfree>
 8009fde:	e61a      	b.n	8009c16 <_strtod_l+0x666>
 8009fe0:	f1ba 0f00 	cmp.w	sl, #0
 8009fe4:	d11b      	bne.n	800a01e <_strtod_l+0xa6e>
 8009fe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fea:	b9f3      	cbnz	r3, 800a02a <_strtod_l+0xa7a>
 8009fec:	4b6c      	ldr	r3, [pc, #432]	; (800a1a0 <_strtod_l+0xbf0>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	4640      	mov	r0, r8
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	f7f6 fd7a 	bl	8000aec <__aeabi_dcmplt>
 8009ff8:	b9d0      	cbnz	r0, 800a030 <_strtod_l+0xa80>
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	4b6c      	ldr	r3, [pc, #432]	; (800a1b0 <_strtod_l+0xc00>)
 800a000:	2200      	movs	r2, #0
 800a002:	f7f6 fb01 	bl	8000608 <__aeabi_dmul>
 800a006:	4680      	mov	r8, r0
 800a008:	4689      	mov	r9, r1
 800a00a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a00e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a012:	9315      	str	r3, [sp, #84]	; 0x54
 800a014:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a01c:	e79d      	b.n	8009f5a <_strtod_l+0x9aa>
 800a01e:	f1ba 0f01 	cmp.w	sl, #1
 800a022:	d102      	bne.n	800a02a <_strtod_l+0xa7a>
 800a024:	2f00      	cmp	r7, #0
 800a026:	f43f ad83 	beq.w	8009b30 <_strtod_l+0x580>
 800a02a:	4b62      	ldr	r3, [pc, #392]	; (800a1b4 <_strtod_l+0xc04>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	e78e      	b.n	8009f4e <_strtod_l+0x99e>
 800a030:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a1b0 <_strtod_l+0xc00>
 800a034:	f04f 0800 	mov.w	r8, #0
 800a038:	e7e7      	b.n	800a00a <_strtod_l+0xa5a>
 800a03a:	4b5d      	ldr	r3, [pc, #372]	; (800a1b0 <_strtod_l+0xc00>)
 800a03c:	4640      	mov	r0, r8
 800a03e:	4649      	mov	r1, r9
 800a040:	2200      	movs	r2, #0
 800a042:	f7f6 fae1 	bl	8000608 <__aeabi_dmul>
 800a046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a048:	4680      	mov	r8, r0
 800a04a:	4689      	mov	r9, r1
 800a04c:	b933      	cbnz	r3, 800a05c <_strtod_l+0xaac>
 800a04e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a052:	900e      	str	r0, [sp, #56]	; 0x38
 800a054:	930f      	str	r3, [sp, #60]	; 0x3c
 800a056:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a05a:	e7dd      	b.n	800a018 <_strtod_l+0xa68>
 800a05c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a060:	e7f9      	b.n	800a056 <_strtod_l+0xaa6>
 800a062:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a066:	9b04      	ldr	r3, [sp, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1a8      	bne.n	8009fbe <_strtod_l+0xa0e>
 800a06c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a072:	0d1b      	lsrs	r3, r3, #20
 800a074:	051b      	lsls	r3, r3, #20
 800a076:	429a      	cmp	r2, r3
 800a078:	d1a1      	bne.n	8009fbe <_strtod_l+0xa0e>
 800a07a:	4640      	mov	r0, r8
 800a07c:	4649      	mov	r1, r9
 800a07e:	f7f6 fe23 	bl	8000cc8 <__aeabi_d2lz>
 800a082:	f7f6 fa93 	bl	80005ac <__aeabi_l2d>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	4640      	mov	r0, r8
 800a08c:	4649      	mov	r1, r9
 800a08e:	f7f6 f903 	bl	8000298 <__aeabi_dsub>
 800a092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a098:	ea43 030a 	orr.w	r3, r3, sl
 800a09c:	4313      	orrs	r3, r2
 800a09e:	4680      	mov	r8, r0
 800a0a0:	4689      	mov	r9, r1
 800a0a2:	d055      	beq.n	800a150 <_strtod_l+0xba0>
 800a0a4:	a336      	add	r3, pc, #216	; (adr r3, 800a180 <_strtod_l+0xbd0>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 fd1f 	bl	8000aec <__aeabi_dcmplt>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f47f acd0 	bne.w	8009a54 <_strtod_l+0x4a4>
 800a0b4:	a334      	add	r3, pc, #208	; (adr r3, 800a188 <_strtod_l+0xbd8>)
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	4649      	mov	r1, r9
 800a0be:	f7f6 fd33 	bl	8000b28 <__aeabi_dcmpgt>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	f43f af7b 	beq.w	8009fbe <_strtod_l+0xa0e>
 800a0c8:	e4c4      	b.n	8009a54 <_strtod_l+0x4a4>
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	b333      	cbz	r3, 800a11c <_strtod_l+0xb6c>
 800a0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0d4:	d822      	bhi.n	800a11c <_strtod_l+0xb6c>
 800a0d6:	a32e      	add	r3, pc, #184	; (adr r3, 800a190 <_strtod_l+0xbe0>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	4640      	mov	r0, r8
 800a0de:	4649      	mov	r1, r9
 800a0e0:	f7f6 fd0e 	bl	8000b00 <__aeabi_dcmple>
 800a0e4:	b1a0      	cbz	r0, 800a110 <_strtod_l+0xb60>
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	f7f6 fd65 	bl	8000bb8 <__aeabi_d2uiz>
 800a0ee:	2801      	cmp	r0, #1
 800a0f0:	bf38      	it	cc
 800a0f2:	2001      	movcc	r0, #1
 800a0f4:	f7f6 fa0e 	bl	8000514 <__aeabi_ui2d>
 800a0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	4689      	mov	r9, r1
 800a0fe:	bb23      	cbnz	r3, 800a14a <_strtod_l+0xb9a>
 800a100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a104:	9010      	str	r0, [sp, #64]	; 0x40
 800a106:	9311      	str	r3, [sp, #68]	; 0x44
 800a108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a10c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a114:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a118:	1a9b      	subs	r3, r3, r2
 800a11a:	9309      	str	r3, [sp, #36]	; 0x24
 800a11c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a120:	eeb0 0a48 	vmov.f32	s0, s16
 800a124:	eef0 0a68 	vmov.f32	s1, s17
 800a128:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a12c:	f001 fe84 	bl	800be38 <__ulp>
 800a130:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a134:	ec53 2b10 	vmov	r2, r3, d0
 800a138:	f7f6 fa66 	bl	8000608 <__aeabi_dmul>
 800a13c:	ec53 2b18 	vmov	r2, r3, d8
 800a140:	f7f6 f8ac 	bl	800029c <__adddf3>
 800a144:	4682      	mov	sl, r0
 800a146:	468b      	mov	fp, r1
 800a148:	e78d      	b.n	800a066 <_strtod_l+0xab6>
 800a14a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a14e:	e7db      	b.n	800a108 <_strtod_l+0xb58>
 800a150:	a311      	add	r3, pc, #68	; (adr r3, 800a198 <_strtod_l+0xbe8>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f7f6 fcc9 	bl	8000aec <__aeabi_dcmplt>
 800a15a:	e7b2      	b.n	800a0c2 <_strtod_l+0xb12>
 800a15c:	2300      	movs	r3, #0
 800a15e:	930a      	str	r3, [sp, #40]	; 0x28
 800a160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	f7ff ba6b 	b.w	8009640 <_strtod_l+0x90>
 800a16a:	2a65      	cmp	r2, #101	; 0x65
 800a16c:	f43f ab5f 	beq.w	800982e <_strtod_l+0x27e>
 800a170:	2a45      	cmp	r2, #69	; 0x45
 800a172:	f43f ab5c 	beq.w	800982e <_strtod_l+0x27e>
 800a176:	2301      	movs	r3, #1
 800a178:	f7ff bb94 	b.w	80098a4 <_strtod_l+0x2f4>
 800a17c:	f3af 8000 	nop.w
 800a180:	94a03595 	.word	0x94a03595
 800a184:	3fdfffff 	.word	0x3fdfffff
 800a188:	35afe535 	.word	0x35afe535
 800a18c:	3fe00000 	.word	0x3fe00000
 800a190:	ffc00000 	.word	0xffc00000
 800a194:	41dfffff 	.word	0x41dfffff
 800a198:	94a03595 	.word	0x94a03595
 800a19c:	3fcfffff 	.word	0x3fcfffff
 800a1a0:	3ff00000 	.word	0x3ff00000
 800a1a4:	7ff00000 	.word	0x7ff00000
 800a1a8:	7fe00000 	.word	0x7fe00000
 800a1ac:	7c9fffff 	.word	0x7c9fffff
 800a1b0:	3fe00000 	.word	0x3fe00000
 800a1b4:	bff00000 	.word	0xbff00000
 800a1b8:	7fefffff 	.word	0x7fefffff

0800a1bc <_strtod_r>:
 800a1bc:	4b01      	ldr	r3, [pc, #4]	; (800a1c4 <_strtod_r+0x8>)
 800a1be:	f7ff b9f7 	b.w	80095b0 <_strtod_l>
 800a1c2:	bf00      	nop
 800a1c4:	20000084 	.word	0x20000084

0800a1c8 <_strtol_l.constprop.0>:
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ce:	d001      	beq.n	800a1d4 <_strtol_l.constprop.0+0xc>
 800a1d0:	2b24      	cmp	r3, #36	; 0x24
 800a1d2:	d906      	bls.n	800a1e2 <_strtol_l.constprop.0+0x1a>
 800a1d4:	f7fe f962 	bl	800849c <__errno>
 800a1d8:	2316      	movs	r3, #22
 800a1da:	6003      	str	r3, [r0, #0]
 800a1dc:	2000      	movs	r0, #0
 800a1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a2c8 <_strtol_l.constprop.0+0x100>
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	462e      	mov	r6, r5
 800a1ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a1f2:	f017 0708 	ands.w	r7, r7, #8
 800a1f6:	d1f7      	bne.n	800a1e8 <_strtol_l.constprop.0+0x20>
 800a1f8:	2c2d      	cmp	r4, #45	; 0x2d
 800a1fa:	d132      	bne.n	800a262 <_strtol_l.constprop.0+0x9a>
 800a1fc:	782c      	ldrb	r4, [r5, #0]
 800a1fe:	2701      	movs	r7, #1
 800a200:	1cb5      	adds	r5, r6, #2
 800a202:	2b00      	cmp	r3, #0
 800a204:	d05b      	beq.n	800a2be <_strtol_l.constprop.0+0xf6>
 800a206:	2b10      	cmp	r3, #16
 800a208:	d109      	bne.n	800a21e <_strtol_l.constprop.0+0x56>
 800a20a:	2c30      	cmp	r4, #48	; 0x30
 800a20c:	d107      	bne.n	800a21e <_strtol_l.constprop.0+0x56>
 800a20e:	782c      	ldrb	r4, [r5, #0]
 800a210:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a214:	2c58      	cmp	r4, #88	; 0x58
 800a216:	d14d      	bne.n	800a2b4 <_strtol_l.constprop.0+0xec>
 800a218:	786c      	ldrb	r4, [r5, #1]
 800a21a:	2310      	movs	r3, #16
 800a21c:	3502      	adds	r5, #2
 800a21e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a222:	f108 38ff 	add.w	r8, r8, #4294967295
 800a226:	f04f 0c00 	mov.w	ip, #0
 800a22a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a22e:	4666      	mov	r6, ip
 800a230:	fb03 8a19 	mls	sl, r3, r9, r8
 800a234:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a238:	f1be 0f09 	cmp.w	lr, #9
 800a23c:	d816      	bhi.n	800a26c <_strtol_l.constprop.0+0xa4>
 800a23e:	4674      	mov	r4, lr
 800a240:	42a3      	cmp	r3, r4
 800a242:	dd24      	ble.n	800a28e <_strtol_l.constprop.0+0xc6>
 800a244:	f1bc 0f00 	cmp.w	ip, #0
 800a248:	db1e      	blt.n	800a288 <_strtol_l.constprop.0+0xc0>
 800a24a:	45b1      	cmp	r9, r6
 800a24c:	d31c      	bcc.n	800a288 <_strtol_l.constprop.0+0xc0>
 800a24e:	d101      	bne.n	800a254 <_strtol_l.constprop.0+0x8c>
 800a250:	45a2      	cmp	sl, r4
 800a252:	db19      	blt.n	800a288 <_strtol_l.constprop.0+0xc0>
 800a254:	fb06 4603 	mla	r6, r6, r3, r4
 800a258:	f04f 0c01 	mov.w	ip, #1
 800a25c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a260:	e7e8      	b.n	800a234 <_strtol_l.constprop.0+0x6c>
 800a262:	2c2b      	cmp	r4, #43	; 0x2b
 800a264:	bf04      	itt	eq
 800a266:	782c      	ldrbeq	r4, [r5, #0]
 800a268:	1cb5      	addeq	r5, r6, #2
 800a26a:	e7ca      	b.n	800a202 <_strtol_l.constprop.0+0x3a>
 800a26c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a270:	f1be 0f19 	cmp.w	lr, #25
 800a274:	d801      	bhi.n	800a27a <_strtol_l.constprop.0+0xb2>
 800a276:	3c37      	subs	r4, #55	; 0x37
 800a278:	e7e2      	b.n	800a240 <_strtol_l.constprop.0+0x78>
 800a27a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a27e:	f1be 0f19 	cmp.w	lr, #25
 800a282:	d804      	bhi.n	800a28e <_strtol_l.constprop.0+0xc6>
 800a284:	3c57      	subs	r4, #87	; 0x57
 800a286:	e7db      	b.n	800a240 <_strtol_l.constprop.0+0x78>
 800a288:	f04f 3cff 	mov.w	ip, #4294967295
 800a28c:	e7e6      	b.n	800a25c <_strtol_l.constprop.0+0x94>
 800a28e:	f1bc 0f00 	cmp.w	ip, #0
 800a292:	da05      	bge.n	800a2a0 <_strtol_l.constprop.0+0xd8>
 800a294:	2322      	movs	r3, #34	; 0x22
 800a296:	6003      	str	r3, [r0, #0]
 800a298:	4646      	mov	r6, r8
 800a29a:	b942      	cbnz	r2, 800a2ae <_strtol_l.constprop.0+0xe6>
 800a29c:	4630      	mov	r0, r6
 800a29e:	e79e      	b.n	800a1de <_strtol_l.constprop.0+0x16>
 800a2a0:	b107      	cbz	r7, 800a2a4 <_strtol_l.constprop.0+0xdc>
 800a2a2:	4276      	negs	r6, r6
 800a2a4:	2a00      	cmp	r2, #0
 800a2a6:	d0f9      	beq.n	800a29c <_strtol_l.constprop.0+0xd4>
 800a2a8:	f1bc 0f00 	cmp.w	ip, #0
 800a2ac:	d000      	beq.n	800a2b0 <_strtol_l.constprop.0+0xe8>
 800a2ae:	1e69      	subs	r1, r5, #1
 800a2b0:	6011      	str	r1, [r2, #0]
 800a2b2:	e7f3      	b.n	800a29c <_strtol_l.constprop.0+0xd4>
 800a2b4:	2430      	movs	r4, #48	; 0x30
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1b1      	bne.n	800a21e <_strtol_l.constprop.0+0x56>
 800a2ba:	2308      	movs	r3, #8
 800a2bc:	e7af      	b.n	800a21e <_strtol_l.constprop.0+0x56>
 800a2be:	2c30      	cmp	r4, #48	; 0x30
 800a2c0:	d0a5      	beq.n	800a20e <_strtol_l.constprop.0+0x46>
 800a2c2:	230a      	movs	r3, #10
 800a2c4:	e7ab      	b.n	800a21e <_strtol_l.constprop.0+0x56>
 800a2c6:	bf00      	nop
 800a2c8:	0800e0f9 	.word	0x0800e0f9

0800a2cc <_strtol_r>:
 800a2cc:	f7ff bf7c 	b.w	800a1c8 <_strtol_l.constprop.0>

0800a2d0 <_write_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d07      	ldr	r5, [pc, #28]	; (800a2f0 <_write_r+0x20>)
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	4608      	mov	r0, r1
 800a2d8:	4611      	mov	r1, r2
 800a2da:	2200      	movs	r2, #0
 800a2dc:	602a      	str	r2, [r5, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f7f8 f9f9 	bl	80026d6 <_write>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_write_r+0x1e>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_write_r+0x1e>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	20004fb0 	.word	0x20004fb0

0800a2f4 <_close_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d06      	ldr	r5, [pc, #24]	; (800a310 <_close_r+0x1c>)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	602b      	str	r3, [r5, #0]
 800a300:	f7f8 fa05 	bl	800270e <_close>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_close_r+0x1a>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_close_r+0x1a>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20004fb0 	.word	0x20004fb0

0800a314 <quorem>:
 800a314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a318:	6903      	ldr	r3, [r0, #16]
 800a31a:	690c      	ldr	r4, [r1, #16]
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	4607      	mov	r7, r0
 800a320:	f2c0 8081 	blt.w	800a426 <quorem+0x112>
 800a324:	3c01      	subs	r4, #1
 800a326:	f101 0814 	add.w	r8, r1, #20
 800a32a:	f100 0514 	add.w	r5, r0, #20
 800a32e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a332:	9301      	str	r3, [sp, #4]
 800a334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a33c:	3301      	adds	r3, #1
 800a33e:	429a      	cmp	r2, r3
 800a340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a348:	fbb2 f6f3 	udiv	r6, r2, r3
 800a34c:	d331      	bcc.n	800a3b2 <quorem+0x9e>
 800a34e:	f04f 0e00 	mov.w	lr, #0
 800a352:	4640      	mov	r0, r8
 800a354:	46ac      	mov	ip, r5
 800a356:	46f2      	mov	sl, lr
 800a358:	f850 2b04 	ldr.w	r2, [r0], #4
 800a35c:	b293      	uxth	r3, r2
 800a35e:	fb06 e303 	mla	r3, r6, r3, lr
 800a362:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a366:	b29b      	uxth	r3, r3
 800a368:	ebaa 0303 	sub.w	r3, sl, r3
 800a36c:	f8dc a000 	ldr.w	sl, [ip]
 800a370:	0c12      	lsrs	r2, r2, #16
 800a372:	fa13 f38a 	uxtah	r3, r3, sl
 800a376:	fb06 e202 	mla	r2, r6, r2, lr
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	9b00      	ldr	r3, [sp, #0]
 800a37e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a382:	b292      	uxth	r2, r2
 800a384:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a38c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a390:	4581      	cmp	r9, r0
 800a392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a396:	f84c 3b04 	str.w	r3, [ip], #4
 800a39a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a39e:	d2db      	bcs.n	800a358 <quorem+0x44>
 800a3a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3a4:	b92b      	cbnz	r3, 800a3b2 <quorem+0x9e>
 800a3a6:	9b01      	ldr	r3, [sp, #4]
 800a3a8:	3b04      	subs	r3, #4
 800a3aa:	429d      	cmp	r5, r3
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	d32e      	bcc.n	800a40e <quorem+0xfa>
 800a3b0:	613c      	str	r4, [r7, #16]
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	f001 fc9a 	bl	800bcec <__mcmp>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	db24      	blt.n	800a406 <quorem+0xf2>
 800a3bc:	3601      	adds	r6, #1
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f04f 0c00 	mov.w	ip, #0
 800a3c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3c8:	f8d0 e000 	ldr.w	lr, [r0]
 800a3cc:	b293      	uxth	r3, r2
 800a3ce:	ebac 0303 	sub.w	r3, ip, r3
 800a3d2:	0c12      	lsrs	r2, r2, #16
 800a3d4:	fa13 f38e 	uxtah	r3, r3, lr
 800a3d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3e6:	45c1      	cmp	r9, r8
 800a3e8:	f840 3b04 	str.w	r3, [r0], #4
 800a3ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3f0:	d2e8      	bcs.n	800a3c4 <quorem+0xb0>
 800a3f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3fa:	b922      	cbnz	r2, 800a406 <quorem+0xf2>
 800a3fc:	3b04      	subs	r3, #4
 800a3fe:	429d      	cmp	r5, r3
 800a400:	461a      	mov	r2, r3
 800a402:	d30a      	bcc.n	800a41a <quorem+0x106>
 800a404:	613c      	str	r4, [r7, #16]
 800a406:	4630      	mov	r0, r6
 800a408:	b003      	add	sp, #12
 800a40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40e:	6812      	ldr	r2, [r2, #0]
 800a410:	3b04      	subs	r3, #4
 800a412:	2a00      	cmp	r2, #0
 800a414:	d1cc      	bne.n	800a3b0 <quorem+0x9c>
 800a416:	3c01      	subs	r4, #1
 800a418:	e7c7      	b.n	800a3aa <quorem+0x96>
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	3b04      	subs	r3, #4
 800a41e:	2a00      	cmp	r2, #0
 800a420:	d1f0      	bne.n	800a404 <quorem+0xf0>
 800a422:	3c01      	subs	r4, #1
 800a424:	e7eb      	b.n	800a3fe <quorem+0xea>
 800a426:	2000      	movs	r0, #0
 800a428:	e7ee      	b.n	800a408 <quorem+0xf4>
 800a42a:	0000      	movs	r0, r0
 800a42c:	0000      	movs	r0, r0
	...

0800a430 <_dtoa_r>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	ed2d 8b04 	vpush	{d8-d9}
 800a438:	ec57 6b10 	vmov	r6, r7, d0
 800a43c:	b093      	sub	sp, #76	; 0x4c
 800a43e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a444:	9106      	str	r1, [sp, #24]
 800a446:	ee10 aa10 	vmov	sl, s0
 800a44a:	4604      	mov	r4, r0
 800a44c:	9209      	str	r2, [sp, #36]	; 0x24
 800a44e:	930c      	str	r3, [sp, #48]	; 0x30
 800a450:	46bb      	mov	fp, r7
 800a452:	b975      	cbnz	r5, 800a472 <_dtoa_r+0x42>
 800a454:	2010      	movs	r0, #16
 800a456:	f7fe f84b 	bl	80084f0 <malloc>
 800a45a:	4602      	mov	r2, r0
 800a45c:	6260      	str	r0, [r4, #36]	; 0x24
 800a45e:	b920      	cbnz	r0, 800a46a <_dtoa_r+0x3a>
 800a460:	4ba7      	ldr	r3, [pc, #668]	; (800a700 <_dtoa_r+0x2d0>)
 800a462:	21ea      	movs	r1, #234	; 0xea
 800a464:	48a7      	ldr	r0, [pc, #668]	; (800a704 <_dtoa_r+0x2d4>)
 800a466:	f002 fbef 	bl	800cc48 <__assert_func>
 800a46a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a46e:	6005      	str	r5, [r0, #0]
 800a470:	60c5      	str	r5, [r0, #12]
 800a472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a474:	6819      	ldr	r1, [r3, #0]
 800a476:	b151      	cbz	r1, 800a48e <_dtoa_r+0x5e>
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	604a      	str	r2, [r1, #4]
 800a47c:	2301      	movs	r3, #1
 800a47e:	4093      	lsls	r3, r2
 800a480:	608b      	str	r3, [r1, #8]
 800a482:	4620      	mov	r0, r4
 800a484:	f001 f9a6 	bl	800b7d4 <_Bfree>
 800a488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	1e3b      	subs	r3, r7, #0
 800a490:	bfaa      	itet	ge
 800a492:	2300      	movge	r3, #0
 800a494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a498:	f8c8 3000 	strge.w	r3, [r8]
 800a49c:	4b9a      	ldr	r3, [pc, #616]	; (800a708 <_dtoa_r+0x2d8>)
 800a49e:	bfbc      	itt	lt
 800a4a0:	2201      	movlt	r2, #1
 800a4a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a4a6:	ea33 030b 	bics.w	r3, r3, fp
 800a4aa:	d11b      	bne.n	800a4e4 <_dtoa_r+0xb4>
 800a4ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4b8:	4333      	orrs	r3, r6
 800a4ba:	f000 8592 	beq.w	800afe2 <_dtoa_r+0xbb2>
 800a4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4c0:	b963      	cbnz	r3, 800a4dc <_dtoa_r+0xac>
 800a4c2:	4b92      	ldr	r3, [pc, #584]	; (800a70c <_dtoa_r+0x2dc>)
 800a4c4:	e022      	b.n	800a50c <_dtoa_r+0xdc>
 800a4c6:	4b92      	ldr	r3, [pc, #584]	; (800a710 <_dtoa_r+0x2e0>)
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	9801      	ldr	r0, [sp, #4]
 800a4d2:	b013      	add	sp, #76	; 0x4c
 800a4d4:	ecbd 8b04 	vpop	{d8-d9}
 800a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4dc:	4b8b      	ldr	r3, [pc, #556]	; (800a70c <_dtoa_r+0x2dc>)
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	3303      	adds	r3, #3
 800a4e2:	e7f3      	b.n	800a4cc <_dtoa_r+0x9c>
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	4650      	mov	r0, sl
 800a4ea:	4659      	mov	r1, fp
 800a4ec:	f7f6 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4f0:	ec4b ab19 	vmov	d9, sl, fp
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	b158      	cbz	r0, 800a510 <_dtoa_r+0xe0>
 800a4f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 856b 	beq.w	800afdc <_dtoa_r+0xbac>
 800a506:	4883      	ldr	r0, [pc, #524]	; (800a714 <_dtoa_r+0x2e4>)
 800a508:	6018      	str	r0, [r3, #0]
 800a50a:	1e43      	subs	r3, r0, #1
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	e7df      	b.n	800a4d0 <_dtoa_r+0xa0>
 800a510:	ec4b ab10 	vmov	d0, sl, fp
 800a514:	aa10      	add	r2, sp, #64	; 0x40
 800a516:	a911      	add	r1, sp, #68	; 0x44
 800a518:	4620      	mov	r0, r4
 800a51a:	f001 fd09 	bl	800bf30 <__d2b>
 800a51e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a522:	ee08 0a10 	vmov	s16, r0
 800a526:	2d00      	cmp	r5, #0
 800a528:	f000 8084 	beq.w	800a634 <_dtoa_r+0x204>
 800a52c:	ee19 3a90 	vmov	r3, s19
 800a530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a538:	4656      	mov	r6, sl
 800a53a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a53e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a546:	4b74      	ldr	r3, [pc, #464]	; (800a718 <_dtoa_r+0x2e8>)
 800a548:	2200      	movs	r2, #0
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f5 fea3 	bl	8000298 <__aeabi_dsub>
 800a552:	a365      	add	r3, pc, #404	; (adr r3, 800a6e8 <_dtoa_r+0x2b8>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f7f6 f856 	bl	8000608 <__aeabi_dmul>
 800a55c:	a364      	add	r3, pc, #400	; (adr r3, 800a6f0 <_dtoa_r+0x2c0>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f5 fe9b 	bl	800029c <__adddf3>
 800a566:	4606      	mov	r6, r0
 800a568:	4628      	mov	r0, r5
 800a56a:	460f      	mov	r7, r1
 800a56c:	f7f5 ffe2 	bl	8000534 <__aeabi_i2d>
 800a570:	a361      	add	r3, pc, #388	; (adr r3, 800a6f8 <_dtoa_r+0x2c8>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f7f6 f847 	bl	8000608 <__aeabi_dmul>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4630      	mov	r0, r6
 800a580:	4639      	mov	r1, r7
 800a582:	f7f5 fe8b 	bl	800029c <__adddf3>
 800a586:	4606      	mov	r6, r0
 800a588:	460f      	mov	r7, r1
 800a58a:	f7f6 faed 	bl	8000b68 <__aeabi_d2iz>
 800a58e:	2200      	movs	r2, #0
 800a590:	9000      	str	r0, [sp, #0]
 800a592:	2300      	movs	r3, #0
 800a594:	4630      	mov	r0, r6
 800a596:	4639      	mov	r1, r7
 800a598:	f7f6 faa8 	bl	8000aec <__aeabi_dcmplt>
 800a59c:	b150      	cbz	r0, 800a5b4 <_dtoa_r+0x184>
 800a59e:	9800      	ldr	r0, [sp, #0]
 800a5a0:	f7f5 ffc8 	bl	8000534 <__aeabi_i2d>
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	f7f6 fa96 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5ac:	b910      	cbnz	r0, 800a5b4 <_dtoa_r+0x184>
 800a5ae:	9b00      	ldr	r3, [sp, #0]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	9b00      	ldr	r3, [sp, #0]
 800a5b6:	2b16      	cmp	r3, #22
 800a5b8:	d85a      	bhi.n	800a670 <_dtoa_r+0x240>
 800a5ba:	9a00      	ldr	r2, [sp, #0]
 800a5bc:	4b57      	ldr	r3, [pc, #348]	; (800a71c <_dtoa_r+0x2ec>)
 800a5be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	ec51 0b19 	vmov	r0, r1, d9
 800a5ca:	f7f6 fa8f 	bl	8000aec <__aeabi_dcmplt>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d050      	beq.n	800a674 <_dtoa_r+0x244>
 800a5d2:	9b00      	ldr	r3, [sp, #0]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5de:	1b5d      	subs	r5, r3, r5
 800a5e0:	1e6b      	subs	r3, r5, #1
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	bf45      	ittet	mi
 800a5e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a5ea:	9304      	strmi	r3, [sp, #16]
 800a5ec:	2300      	movpl	r3, #0
 800a5ee:	2300      	movmi	r3, #0
 800a5f0:	bf4c      	ite	mi
 800a5f2:	9305      	strmi	r3, [sp, #20]
 800a5f4:	9304      	strpl	r3, [sp, #16]
 800a5f6:	9b00      	ldr	r3, [sp, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	db3d      	blt.n	800a678 <_dtoa_r+0x248>
 800a5fc:	9b05      	ldr	r3, [sp, #20]
 800a5fe:	9a00      	ldr	r2, [sp, #0]
 800a600:	920a      	str	r2, [sp, #40]	; 0x28
 800a602:	4413      	add	r3, r2
 800a604:	9305      	str	r3, [sp, #20]
 800a606:	2300      	movs	r3, #0
 800a608:	9307      	str	r3, [sp, #28]
 800a60a:	9b06      	ldr	r3, [sp, #24]
 800a60c:	2b09      	cmp	r3, #9
 800a60e:	f200 8089 	bhi.w	800a724 <_dtoa_r+0x2f4>
 800a612:	2b05      	cmp	r3, #5
 800a614:	bfc4      	itt	gt
 800a616:	3b04      	subgt	r3, #4
 800a618:	9306      	strgt	r3, [sp, #24]
 800a61a:	9b06      	ldr	r3, [sp, #24]
 800a61c:	f1a3 0302 	sub.w	r3, r3, #2
 800a620:	bfcc      	ite	gt
 800a622:	2500      	movgt	r5, #0
 800a624:	2501      	movle	r5, #1
 800a626:	2b03      	cmp	r3, #3
 800a628:	f200 8087 	bhi.w	800a73a <_dtoa_r+0x30a>
 800a62c:	e8df f003 	tbb	[pc, r3]
 800a630:	59383a2d 	.word	0x59383a2d
 800a634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a638:	441d      	add	r5, r3
 800a63a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a63e:	2b20      	cmp	r3, #32
 800a640:	bfc1      	itttt	gt
 800a642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a64a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a64e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a652:	bfda      	itte	le
 800a654:	f1c3 0320 	rsble	r3, r3, #32
 800a658:	fa06 f003 	lslle.w	r0, r6, r3
 800a65c:	4318      	orrgt	r0, r3
 800a65e:	f7f5 ff59 	bl	8000514 <__aeabi_ui2d>
 800a662:	2301      	movs	r3, #1
 800a664:	4606      	mov	r6, r0
 800a666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a66a:	3d01      	subs	r5, #1
 800a66c:	930e      	str	r3, [sp, #56]	; 0x38
 800a66e:	e76a      	b.n	800a546 <_dtoa_r+0x116>
 800a670:	2301      	movs	r3, #1
 800a672:	e7b2      	b.n	800a5da <_dtoa_r+0x1aa>
 800a674:	900b      	str	r0, [sp, #44]	; 0x2c
 800a676:	e7b1      	b.n	800a5dc <_dtoa_r+0x1ac>
 800a678:	9b04      	ldr	r3, [sp, #16]
 800a67a:	9a00      	ldr	r2, [sp, #0]
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	4253      	negs	r3, r2
 800a682:	9307      	str	r3, [sp, #28]
 800a684:	2300      	movs	r3, #0
 800a686:	930a      	str	r3, [sp, #40]	; 0x28
 800a688:	e7bf      	b.n	800a60a <_dtoa_r+0x1da>
 800a68a:	2300      	movs	r3, #0
 800a68c:	9308      	str	r3, [sp, #32]
 800a68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a690:	2b00      	cmp	r3, #0
 800a692:	dc55      	bgt.n	800a740 <_dtoa_r+0x310>
 800a694:	2301      	movs	r3, #1
 800a696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a69a:	461a      	mov	r2, r3
 800a69c:	9209      	str	r2, [sp, #36]	; 0x24
 800a69e:	e00c      	b.n	800a6ba <_dtoa_r+0x28a>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e7f3      	b.n	800a68c <_dtoa_r+0x25c>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6a8:	9308      	str	r3, [sp, #32]
 800a6aa:	9b00      	ldr	r3, [sp, #0]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	9302      	str	r3, [sp, #8]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	9303      	str	r3, [sp, #12]
 800a6b6:	bfb8      	it	lt
 800a6b8:	2301      	movlt	r3, #1
 800a6ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a6bc:	2200      	movs	r2, #0
 800a6be:	6042      	str	r2, [r0, #4]
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	f102 0614 	add.w	r6, r2, #20
 800a6c6:	429e      	cmp	r6, r3
 800a6c8:	6841      	ldr	r1, [r0, #4]
 800a6ca:	d93d      	bls.n	800a748 <_dtoa_r+0x318>
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f001 f841 	bl	800b754 <_Balloc>
 800a6d2:	9001      	str	r0, [sp, #4]
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d13b      	bne.n	800a750 <_dtoa_r+0x320>
 800a6d8:	4b11      	ldr	r3, [pc, #68]	; (800a720 <_dtoa_r+0x2f0>)
 800a6da:	4602      	mov	r2, r0
 800a6dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6e0:	e6c0      	b.n	800a464 <_dtoa_r+0x34>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e7df      	b.n	800a6a6 <_dtoa_r+0x276>
 800a6e6:	bf00      	nop
 800a6e8:	636f4361 	.word	0x636f4361
 800a6ec:	3fd287a7 	.word	0x3fd287a7
 800a6f0:	8b60c8b3 	.word	0x8b60c8b3
 800a6f4:	3fc68a28 	.word	0x3fc68a28
 800a6f8:	509f79fb 	.word	0x509f79fb
 800a6fc:	3fd34413 	.word	0x3fd34413
 800a700:	0800e206 	.word	0x0800e206
 800a704:	0800e21d 	.word	0x0800e21d
 800a708:	7ff00000 	.word	0x7ff00000
 800a70c:	0800e202 	.word	0x0800e202
 800a710:	0800e1f9 	.word	0x0800e1f9
 800a714:	0800e472 	.word	0x0800e472
 800a718:	3ff80000 	.word	0x3ff80000
 800a71c:	0800e388 	.word	0x0800e388
 800a720:	0800e278 	.word	0x0800e278
 800a724:	2501      	movs	r5, #1
 800a726:	2300      	movs	r3, #0
 800a728:	9306      	str	r3, [sp, #24]
 800a72a:	9508      	str	r5, [sp, #32]
 800a72c:	f04f 33ff 	mov.w	r3, #4294967295
 800a730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a734:	2200      	movs	r2, #0
 800a736:	2312      	movs	r3, #18
 800a738:	e7b0      	b.n	800a69c <_dtoa_r+0x26c>
 800a73a:	2301      	movs	r3, #1
 800a73c:	9308      	str	r3, [sp, #32]
 800a73e:	e7f5      	b.n	800a72c <_dtoa_r+0x2fc>
 800a740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a746:	e7b8      	b.n	800a6ba <_dtoa_r+0x28a>
 800a748:	3101      	adds	r1, #1
 800a74a:	6041      	str	r1, [r0, #4]
 800a74c:	0052      	lsls	r2, r2, #1
 800a74e:	e7b8      	b.n	800a6c2 <_dtoa_r+0x292>
 800a750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a752:	9a01      	ldr	r2, [sp, #4]
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	2b0e      	cmp	r3, #14
 800a75a:	f200 809d 	bhi.w	800a898 <_dtoa_r+0x468>
 800a75e:	2d00      	cmp	r5, #0
 800a760:	f000 809a 	beq.w	800a898 <_dtoa_r+0x468>
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	dd32      	ble.n	800a7d0 <_dtoa_r+0x3a0>
 800a76a:	4ab7      	ldr	r2, [pc, #732]	; (800aa48 <_dtoa_r+0x618>)
 800a76c:	f003 030f 	and.w	r3, r3, #15
 800a770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a774:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a778:	9b00      	ldr	r3, [sp, #0]
 800a77a:	05d8      	lsls	r0, r3, #23
 800a77c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a780:	d516      	bpl.n	800a7b0 <_dtoa_r+0x380>
 800a782:	4bb2      	ldr	r3, [pc, #712]	; (800aa4c <_dtoa_r+0x61c>)
 800a784:	ec51 0b19 	vmov	r0, r1, d9
 800a788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a78c:	f7f6 f866 	bl	800085c <__aeabi_ddiv>
 800a790:	f007 070f 	and.w	r7, r7, #15
 800a794:	4682      	mov	sl, r0
 800a796:	468b      	mov	fp, r1
 800a798:	2503      	movs	r5, #3
 800a79a:	4eac      	ldr	r6, [pc, #688]	; (800aa4c <_dtoa_r+0x61c>)
 800a79c:	b957      	cbnz	r7, 800a7b4 <_dtoa_r+0x384>
 800a79e:	4642      	mov	r2, r8
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	4650      	mov	r0, sl
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	f7f6 f859 	bl	800085c <__aeabi_ddiv>
 800a7aa:	4682      	mov	sl, r0
 800a7ac:	468b      	mov	fp, r1
 800a7ae:	e028      	b.n	800a802 <_dtoa_r+0x3d2>
 800a7b0:	2502      	movs	r5, #2
 800a7b2:	e7f2      	b.n	800a79a <_dtoa_r+0x36a>
 800a7b4:	07f9      	lsls	r1, r7, #31
 800a7b6:	d508      	bpl.n	800a7ca <_dtoa_r+0x39a>
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7c0:	f7f5 ff22 	bl	8000608 <__aeabi_dmul>
 800a7c4:	3501      	adds	r5, #1
 800a7c6:	4680      	mov	r8, r0
 800a7c8:	4689      	mov	r9, r1
 800a7ca:	107f      	asrs	r7, r7, #1
 800a7cc:	3608      	adds	r6, #8
 800a7ce:	e7e5      	b.n	800a79c <_dtoa_r+0x36c>
 800a7d0:	f000 809b 	beq.w	800a90a <_dtoa_r+0x4da>
 800a7d4:	9b00      	ldr	r3, [sp, #0]
 800a7d6:	4f9d      	ldr	r7, [pc, #628]	; (800aa4c <_dtoa_r+0x61c>)
 800a7d8:	425e      	negs	r6, r3
 800a7da:	4b9b      	ldr	r3, [pc, #620]	; (800aa48 <_dtoa_r+0x618>)
 800a7dc:	f006 020f 	and.w	r2, r6, #15
 800a7e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	ec51 0b19 	vmov	r0, r1, d9
 800a7ec:	f7f5 ff0c 	bl	8000608 <__aeabi_dmul>
 800a7f0:	1136      	asrs	r6, r6, #4
 800a7f2:	4682      	mov	sl, r0
 800a7f4:	468b      	mov	fp, r1
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2502      	movs	r5, #2
 800a7fa:	2e00      	cmp	r6, #0
 800a7fc:	d17a      	bne.n	800a8f4 <_dtoa_r+0x4c4>
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1d3      	bne.n	800a7aa <_dtoa_r+0x37a>
 800a802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 8082 	beq.w	800a90e <_dtoa_r+0x4de>
 800a80a:	4b91      	ldr	r3, [pc, #580]	; (800aa50 <_dtoa_r+0x620>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	4650      	mov	r0, sl
 800a810:	4659      	mov	r1, fp
 800a812:	f7f6 f96b 	bl	8000aec <__aeabi_dcmplt>
 800a816:	2800      	cmp	r0, #0
 800a818:	d079      	beq.n	800a90e <_dtoa_r+0x4de>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d076      	beq.n	800a90e <_dtoa_r+0x4de>
 800a820:	9b02      	ldr	r3, [sp, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	dd36      	ble.n	800a894 <_dtoa_r+0x464>
 800a826:	9b00      	ldr	r3, [sp, #0]
 800a828:	4650      	mov	r0, sl
 800a82a:	4659      	mov	r1, fp
 800a82c:	1e5f      	subs	r7, r3, #1
 800a82e:	2200      	movs	r2, #0
 800a830:	4b88      	ldr	r3, [pc, #544]	; (800aa54 <_dtoa_r+0x624>)
 800a832:	f7f5 fee9 	bl	8000608 <__aeabi_dmul>
 800a836:	9e02      	ldr	r6, [sp, #8]
 800a838:	4682      	mov	sl, r0
 800a83a:	468b      	mov	fp, r1
 800a83c:	3501      	adds	r5, #1
 800a83e:	4628      	mov	r0, r5
 800a840:	f7f5 fe78 	bl	8000534 <__aeabi_i2d>
 800a844:	4652      	mov	r2, sl
 800a846:	465b      	mov	r3, fp
 800a848:	f7f5 fede 	bl	8000608 <__aeabi_dmul>
 800a84c:	4b82      	ldr	r3, [pc, #520]	; (800aa58 <_dtoa_r+0x628>)
 800a84e:	2200      	movs	r2, #0
 800a850:	f7f5 fd24 	bl	800029c <__adddf3>
 800a854:	46d0      	mov	r8, sl
 800a856:	46d9      	mov	r9, fp
 800a858:	4682      	mov	sl, r0
 800a85a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a85e:	2e00      	cmp	r6, #0
 800a860:	d158      	bne.n	800a914 <_dtoa_r+0x4e4>
 800a862:	4b7e      	ldr	r3, [pc, #504]	; (800aa5c <_dtoa_r+0x62c>)
 800a864:	2200      	movs	r2, #0
 800a866:	4640      	mov	r0, r8
 800a868:	4649      	mov	r1, r9
 800a86a:	f7f5 fd15 	bl	8000298 <__aeabi_dsub>
 800a86e:	4652      	mov	r2, sl
 800a870:	465b      	mov	r3, fp
 800a872:	4680      	mov	r8, r0
 800a874:	4689      	mov	r9, r1
 800a876:	f7f6 f957 	bl	8000b28 <__aeabi_dcmpgt>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	f040 8295 	bne.w	800adaa <_dtoa_r+0x97a>
 800a880:	4652      	mov	r2, sl
 800a882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a886:	4640      	mov	r0, r8
 800a888:	4649      	mov	r1, r9
 800a88a:	f7f6 f92f 	bl	8000aec <__aeabi_dcmplt>
 800a88e:	2800      	cmp	r0, #0
 800a890:	f040 8289 	bne.w	800ada6 <_dtoa_r+0x976>
 800a894:	ec5b ab19 	vmov	sl, fp, d9
 800a898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f2c0 8148 	blt.w	800ab30 <_dtoa_r+0x700>
 800a8a0:	9a00      	ldr	r2, [sp, #0]
 800a8a2:	2a0e      	cmp	r2, #14
 800a8a4:	f300 8144 	bgt.w	800ab30 <_dtoa_r+0x700>
 800a8a8:	4b67      	ldr	r3, [pc, #412]	; (800aa48 <_dtoa_r+0x618>)
 800a8aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f280 80d5 	bge.w	800aa64 <_dtoa_r+0x634>
 800a8ba:	9b03      	ldr	r3, [sp, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f300 80d1 	bgt.w	800aa64 <_dtoa_r+0x634>
 800a8c2:	f040 826f 	bne.w	800ada4 <_dtoa_r+0x974>
 800a8c6:	4b65      	ldr	r3, [pc, #404]	; (800aa5c <_dtoa_r+0x62c>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f5 fe9b 	bl	8000608 <__aeabi_dmul>
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	465b      	mov	r3, fp
 800a8d6:	f7f6 f91d 	bl	8000b14 <__aeabi_dcmpge>
 800a8da:	9e03      	ldr	r6, [sp, #12]
 800a8dc:	4637      	mov	r7, r6
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f040 8245 	bne.w	800ad6e <_dtoa_r+0x93e>
 800a8e4:	9d01      	ldr	r5, [sp, #4]
 800a8e6:	2331      	movs	r3, #49	; 0x31
 800a8e8:	f805 3b01 	strb.w	r3, [r5], #1
 800a8ec:	9b00      	ldr	r3, [sp, #0]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	e240      	b.n	800ad76 <_dtoa_r+0x946>
 800a8f4:	07f2      	lsls	r2, r6, #31
 800a8f6:	d505      	bpl.n	800a904 <_dtoa_r+0x4d4>
 800a8f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8fc:	f7f5 fe84 	bl	8000608 <__aeabi_dmul>
 800a900:	3501      	adds	r5, #1
 800a902:	2301      	movs	r3, #1
 800a904:	1076      	asrs	r6, r6, #1
 800a906:	3708      	adds	r7, #8
 800a908:	e777      	b.n	800a7fa <_dtoa_r+0x3ca>
 800a90a:	2502      	movs	r5, #2
 800a90c:	e779      	b.n	800a802 <_dtoa_r+0x3d2>
 800a90e:	9f00      	ldr	r7, [sp, #0]
 800a910:	9e03      	ldr	r6, [sp, #12]
 800a912:	e794      	b.n	800a83e <_dtoa_r+0x40e>
 800a914:	9901      	ldr	r1, [sp, #4]
 800a916:	4b4c      	ldr	r3, [pc, #304]	; (800aa48 <_dtoa_r+0x618>)
 800a918:	4431      	add	r1, r6
 800a91a:	910d      	str	r1, [sp, #52]	; 0x34
 800a91c:	9908      	ldr	r1, [sp, #32]
 800a91e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a926:	2900      	cmp	r1, #0
 800a928:	d043      	beq.n	800a9b2 <_dtoa_r+0x582>
 800a92a:	494d      	ldr	r1, [pc, #308]	; (800aa60 <_dtoa_r+0x630>)
 800a92c:	2000      	movs	r0, #0
 800a92e:	f7f5 ff95 	bl	800085c <__aeabi_ddiv>
 800a932:	4652      	mov	r2, sl
 800a934:	465b      	mov	r3, fp
 800a936:	f7f5 fcaf 	bl	8000298 <__aeabi_dsub>
 800a93a:	9d01      	ldr	r5, [sp, #4]
 800a93c:	4682      	mov	sl, r0
 800a93e:	468b      	mov	fp, r1
 800a940:	4649      	mov	r1, r9
 800a942:	4640      	mov	r0, r8
 800a944:	f7f6 f910 	bl	8000b68 <__aeabi_d2iz>
 800a948:	4606      	mov	r6, r0
 800a94a:	f7f5 fdf3 	bl	8000534 <__aeabi_i2d>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4640      	mov	r0, r8
 800a954:	4649      	mov	r1, r9
 800a956:	f7f5 fc9f 	bl	8000298 <__aeabi_dsub>
 800a95a:	3630      	adds	r6, #48	; 0x30
 800a95c:	f805 6b01 	strb.w	r6, [r5], #1
 800a960:	4652      	mov	r2, sl
 800a962:	465b      	mov	r3, fp
 800a964:	4680      	mov	r8, r0
 800a966:	4689      	mov	r9, r1
 800a968:	f7f6 f8c0 	bl	8000aec <__aeabi_dcmplt>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d163      	bne.n	800aa38 <_dtoa_r+0x608>
 800a970:	4642      	mov	r2, r8
 800a972:	464b      	mov	r3, r9
 800a974:	4936      	ldr	r1, [pc, #216]	; (800aa50 <_dtoa_r+0x620>)
 800a976:	2000      	movs	r0, #0
 800a978:	f7f5 fc8e 	bl	8000298 <__aeabi_dsub>
 800a97c:	4652      	mov	r2, sl
 800a97e:	465b      	mov	r3, fp
 800a980:	f7f6 f8b4 	bl	8000aec <__aeabi_dcmplt>
 800a984:	2800      	cmp	r0, #0
 800a986:	f040 80b5 	bne.w	800aaf4 <_dtoa_r+0x6c4>
 800a98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a98c:	429d      	cmp	r5, r3
 800a98e:	d081      	beq.n	800a894 <_dtoa_r+0x464>
 800a990:	4b30      	ldr	r3, [pc, #192]	; (800aa54 <_dtoa_r+0x624>)
 800a992:	2200      	movs	r2, #0
 800a994:	4650      	mov	r0, sl
 800a996:	4659      	mov	r1, fp
 800a998:	f7f5 fe36 	bl	8000608 <__aeabi_dmul>
 800a99c:	4b2d      	ldr	r3, [pc, #180]	; (800aa54 <_dtoa_r+0x624>)
 800a99e:	4682      	mov	sl, r0
 800a9a0:	468b      	mov	fp, r1
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f7f5 fe2e 	bl	8000608 <__aeabi_dmul>
 800a9ac:	4680      	mov	r8, r0
 800a9ae:	4689      	mov	r9, r1
 800a9b0:	e7c6      	b.n	800a940 <_dtoa_r+0x510>
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	f7f5 fe27 	bl	8000608 <__aeabi_dmul>
 800a9ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9bc:	9d01      	ldr	r5, [sp, #4]
 800a9be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9c0:	4682      	mov	sl, r0
 800a9c2:	468b      	mov	fp, r1
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	4640      	mov	r0, r8
 800a9c8:	f7f6 f8ce 	bl	8000b68 <__aeabi_d2iz>
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	f7f5 fdb1 	bl	8000534 <__aeabi_i2d>
 800a9d2:	3630      	adds	r6, #48	; 0x30
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4640      	mov	r0, r8
 800a9da:	4649      	mov	r1, r9
 800a9dc:	f7f5 fc5c 	bl	8000298 <__aeabi_dsub>
 800a9e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9e6:	429d      	cmp	r5, r3
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	4689      	mov	r9, r1
 800a9ec:	f04f 0200 	mov.w	r2, #0
 800a9f0:	d124      	bne.n	800aa3c <_dtoa_r+0x60c>
 800a9f2:	4b1b      	ldr	r3, [pc, #108]	; (800aa60 <_dtoa_r+0x630>)
 800a9f4:	4650      	mov	r0, sl
 800a9f6:	4659      	mov	r1, fp
 800a9f8:	f7f5 fc50 	bl	800029c <__adddf3>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4640      	mov	r0, r8
 800aa02:	4649      	mov	r1, r9
 800aa04:	f7f6 f890 	bl	8000b28 <__aeabi_dcmpgt>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d173      	bne.n	800aaf4 <_dtoa_r+0x6c4>
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	465b      	mov	r3, fp
 800aa10:	4913      	ldr	r1, [pc, #76]	; (800aa60 <_dtoa_r+0x630>)
 800aa12:	2000      	movs	r0, #0
 800aa14:	f7f5 fc40 	bl	8000298 <__aeabi_dsub>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f6 f864 	bl	8000aec <__aeabi_dcmplt>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	f43f af35 	beq.w	800a894 <_dtoa_r+0x464>
 800aa2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa2c:	1e6b      	subs	r3, r5, #1
 800aa2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa34:	2b30      	cmp	r3, #48	; 0x30
 800aa36:	d0f8      	beq.n	800aa2a <_dtoa_r+0x5fa>
 800aa38:	9700      	str	r7, [sp, #0]
 800aa3a:	e049      	b.n	800aad0 <_dtoa_r+0x6a0>
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <_dtoa_r+0x624>)
 800aa3e:	f7f5 fde3 	bl	8000608 <__aeabi_dmul>
 800aa42:	4680      	mov	r8, r0
 800aa44:	4689      	mov	r9, r1
 800aa46:	e7bd      	b.n	800a9c4 <_dtoa_r+0x594>
 800aa48:	0800e388 	.word	0x0800e388
 800aa4c:	0800e360 	.word	0x0800e360
 800aa50:	3ff00000 	.word	0x3ff00000
 800aa54:	40240000 	.word	0x40240000
 800aa58:	401c0000 	.word	0x401c0000
 800aa5c:	40140000 	.word	0x40140000
 800aa60:	3fe00000 	.word	0x3fe00000
 800aa64:	9d01      	ldr	r5, [sp, #4]
 800aa66:	4656      	mov	r6, sl
 800aa68:	465f      	mov	r7, fp
 800aa6a:	4642      	mov	r2, r8
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	4630      	mov	r0, r6
 800aa70:	4639      	mov	r1, r7
 800aa72:	f7f5 fef3 	bl	800085c <__aeabi_ddiv>
 800aa76:	f7f6 f877 	bl	8000b68 <__aeabi_d2iz>
 800aa7a:	4682      	mov	sl, r0
 800aa7c:	f7f5 fd5a 	bl	8000534 <__aeabi_i2d>
 800aa80:	4642      	mov	r2, r8
 800aa82:	464b      	mov	r3, r9
 800aa84:	f7f5 fdc0 	bl	8000608 <__aeabi_dmul>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aa94:	f7f5 fc00 	bl	8000298 <__aeabi_dsub>
 800aa98:	f805 6b01 	strb.w	r6, [r5], #1
 800aa9c:	9e01      	ldr	r6, [sp, #4]
 800aa9e:	9f03      	ldr	r7, [sp, #12]
 800aaa0:	1bae      	subs	r6, r5, r6
 800aaa2:	42b7      	cmp	r7, r6
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	d135      	bne.n	800ab16 <_dtoa_r+0x6e6>
 800aaaa:	f7f5 fbf7 	bl	800029c <__adddf3>
 800aaae:	4642      	mov	r2, r8
 800aab0:	464b      	mov	r3, r9
 800aab2:	4606      	mov	r6, r0
 800aab4:	460f      	mov	r7, r1
 800aab6:	f7f6 f837 	bl	8000b28 <__aeabi_dcmpgt>
 800aaba:	b9d0      	cbnz	r0, 800aaf2 <_dtoa_r+0x6c2>
 800aabc:	4642      	mov	r2, r8
 800aabe:	464b      	mov	r3, r9
 800aac0:	4630      	mov	r0, r6
 800aac2:	4639      	mov	r1, r7
 800aac4:	f7f6 f808 	bl	8000ad8 <__aeabi_dcmpeq>
 800aac8:	b110      	cbz	r0, 800aad0 <_dtoa_r+0x6a0>
 800aaca:	f01a 0f01 	tst.w	sl, #1
 800aace:	d110      	bne.n	800aaf2 <_dtoa_r+0x6c2>
 800aad0:	4620      	mov	r0, r4
 800aad2:	ee18 1a10 	vmov	r1, s16
 800aad6:	f000 fe7d 	bl	800b7d4 <_Bfree>
 800aada:	2300      	movs	r3, #0
 800aadc:	9800      	ldr	r0, [sp, #0]
 800aade:	702b      	strb	r3, [r5, #0]
 800aae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aae2:	3001      	adds	r0, #1
 800aae4:	6018      	str	r0, [r3, #0]
 800aae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f43f acf1 	beq.w	800a4d0 <_dtoa_r+0xa0>
 800aaee:	601d      	str	r5, [r3, #0]
 800aaf0:	e4ee      	b.n	800a4d0 <_dtoa_r+0xa0>
 800aaf2:	9f00      	ldr	r7, [sp, #0]
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	461d      	mov	r5, r3
 800aaf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aafc:	2a39      	cmp	r2, #57	; 0x39
 800aafe:	d106      	bne.n	800ab0e <_dtoa_r+0x6de>
 800ab00:	9a01      	ldr	r2, [sp, #4]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d1f7      	bne.n	800aaf6 <_dtoa_r+0x6c6>
 800ab06:	9901      	ldr	r1, [sp, #4]
 800ab08:	2230      	movs	r2, #48	; 0x30
 800ab0a:	3701      	adds	r7, #1
 800ab0c:	700a      	strb	r2, [r1, #0]
 800ab0e:	781a      	ldrb	r2, [r3, #0]
 800ab10:	3201      	adds	r2, #1
 800ab12:	701a      	strb	r2, [r3, #0]
 800ab14:	e790      	b.n	800aa38 <_dtoa_r+0x608>
 800ab16:	4ba6      	ldr	r3, [pc, #664]	; (800adb0 <_dtoa_r+0x980>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f7f5 fd75 	bl	8000608 <__aeabi_dmul>
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2300      	movs	r3, #0
 800ab22:	4606      	mov	r6, r0
 800ab24:	460f      	mov	r7, r1
 800ab26:	f7f5 ffd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d09d      	beq.n	800aa6a <_dtoa_r+0x63a>
 800ab2e:	e7cf      	b.n	800aad0 <_dtoa_r+0x6a0>
 800ab30:	9a08      	ldr	r2, [sp, #32]
 800ab32:	2a00      	cmp	r2, #0
 800ab34:	f000 80d7 	beq.w	800ace6 <_dtoa_r+0x8b6>
 800ab38:	9a06      	ldr	r2, [sp, #24]
 800ab3a:	2a01      	cmp	r2, #1
 800ab3c:	f300 80ba 	bgt.w	800acb4 <_dtoa_r+0x884>
 800ab40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	f000 80b2 	beq.w	800acac <_dtoa_r+0x87c>
 800ab48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab4c:	9e07      	ldr	r6, [sp, #28]
 800ab4e:	9d04      	ldr	r5, [sp, #16]
 800ab50:	9a04      	ldr	r2, [sp, #16]
 800ab52:	441a      	add	r2, r3
 800ab54:	9204      	str	r2, [sp, #16]
 800ab56:	9a05      	ldr	r2, [sp, #20]
 800ab58:	2101      	movs	r1, #1
 800ab5a:	441a      	add	r2, r3
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	9205      	str	r2, [sp, #20]
 800ab60:	f000 ff3a 	bl	800b9d8 <__i2b>
 800ab64:	4607      	mov	r7, r0
 800ab66:	2d00      	cmp	r5, #0
 800ab68:	dd0c      	ble.n	800ab84 <_dtoa_r+0x754>
 800ab6a:	9b05      	ldr	r3, [sp, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dd09      	ble.n	800ab84 <_dtoa_r+0x754>
 800ab70:	42ab      	cmp	r3, r5
 800ab72:	9a04      	ldr	r2, [sp, #16]
 800ab74:	bfa8      	it	ge
 800ab76:	462b      	movge	r3, r5
 800ab78:	1ad2      	subs	r2, r2, r3
 800ab7a:	9204      	str	r2, [sp, #16]
 800ab7c:	9a05      	ldr	r2, [sp, #20]
 800ab7e:	1aed      	subs	r5, r5, r3
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	9305      	str	r3, [sp, #20]
 800ab84:	9b07      	ldr	r3, [sp, #28]
 800ab86:	b31b      	cbz	r3, 800abd0 <_dtoa_r+0x7a0>
 800ab88:	9b08      	ldr	r3, [sp, #32]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 80af 	beq.w	800acee <_dtoa_r+0x8be>
 800ab90:	2e00      	cmp	r6, #0
 800ab92:	dd13      	ble.n	800abbc <_dtoa_r+0x78c>
 800ab94:	4639      	mov	r1, r7
 800ab96:	4632      	mov	r2, r6
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f000 ffdd 	bl	800bb58 <__pow5mult>
 800ab9e:	ee18 2a10 	vmov	r2, s16
 800aba2:	4601      	mov	r1, r0
 800aba4:	4607      	mov	r7, r0
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 ff2c 	bl	800ba04 <__multiply>
 800abac:	ee18 1a10 	vmov	r1, s16
 800abb0:	4680      	mov	r8, r0
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fe0e 	bl	800b7d4 <_Bfree>
 800abb8:	ee08 8a10 	vmov	s16, r8
 800abbc:	9b07      	ldr	r3, [sp, #28]
 800abbe:	1b9a      	subs	r2, r3, r6
 800abc0:	d006      	beq.n	800abd0 <_dtoa_r+0x7a0>
 800abc2:	ee18 1a10 	vmov	r1, s16
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 ffc6 	bl	800bb58 <__pow5mult>
 800abcc:	ee08 0a10 	vmov	s16, r0
 800abd0:	2101      	movs	r1, #1
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 ff00 	bl	800b9d8 <__i2b>
 800abd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	4606      	mov	r6, r0
 800abde:	f340 8088 	ble.w	800acf2 <_dtoa_r+0x8c2>
 800abe2:	461a      	mov	r2, r3
 800abe4:	4601      	mov	r1, r0
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 ffb6 	bl	800bb58 <__pow5mult>
 800abec:	9b06      	ldr	r3, [sp, #24]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	4606      	mov	r6, r0
 800abf2:	f340 8081 	ble.w	800acf8 <_dtoa_r+0x8c8>
 800abf6:	f04f 0800 	mov.w	r8, #0
 800abfa:	6933      	ldr	r3, [r6, #16]
 800abfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac00:	6918      	ldr	r0, [r3, #16]
 800ac02:	f000 fe99 	bl	800b938 <__hi0bits>
 800ac06:	f1c0 0020 	rsb	r0, r0, #32
 800ac0a:	9b05      	ldr	r3, [sp, #20]
 800ac0c:	4418      	add	r0, r3
 800ac0e:	f010 001f 	ands.w	r0, r0, #31
 800ac12:	f000 8092 	beq.w	800ad3a <_dtoa_r+0x90a>
 800ac16:	f1c0 0320 	rsb	r3, r0, #32
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	f340 808a 	ble.w	800ad34 <_dtoa_r+0x904>
 800ac20:	f1c0 001c 	rsb	r0, r0, #28
 800ac24:	9b04      	ldr	r3, [sp, #16]
 800ac26:	4403      	add	r3, r0
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	9b05      	ldr	r3, [sp, #20]
 800ac2c:	4403      	add	r3, r0
 800ac2e:	4405      	add	r5, r0
 800ac30:	9305      	str	r3, [sp, #20]
 800ac32:	9b04      	ldr	r3, [sp, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dd07      	ble.n	800ac48 <_dtoa_r+0x818>
 800ac38:	ee18 1a10 	vmov	r1, s16
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 ffe4 	bl	800bc0c <__lshift>
 800ac44:	ee08 0a10 	vmov	s16, r0
 800ac48:	9b05      	ldr	r3, [sp, #20]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	dd05      	ble.n	800ac5a <_dtoa_r+0x82a>
 800ac4e:	4631      	mov	r1, r6
 800ac50:	461a      	mov	r2, r3
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 ffda 	bl	800bc0c <__lshift>
 800ac58:	4606      	mov	r6, r0
 800ac5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d06e      	beq.n	800ad3e <_dtoa_r+0x90e>
 800ac60:	ee18 0a10 	vmov	r0, s16
 800ac64:	4631      	mov	r1, r6
 800ac66:	f001 f841 	bl	800bcec <__mcmp>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	da67      	bge.n	800ad3e <_dtoa_r+0x90e>
 800ac6e:	9b00      	ldr	r3, [sp, #0]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	ee18 1a10 	vmov	r1, s16
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	220a      	movs	r2, #10
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 fdcb 	bl	800b818 <__multadd>
 800ac82:	9b08      	ldr	r3, [sp, #32]
 800ac84:	ee08 0a10 	vmov	s16, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 81b1 	beq.w	800aff0 <_dtoa_r+0xbc0>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	4639      	mov	r1, r7
 800ac92:	220a      	movs	r2, #10
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 fdbf 	bl	800b818 <__multadd>
 800ac9a:	9b02      	ldr	r3, [sp, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	4607      	mov	r7, r0
 800aca0:	f300 808e 	bgt.w	800adc0 <_dtoa_r+0x990>
 800aca4:	9b06      	ldr	r3, [sp, #24]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	dc51      	bgt.n	800ad4e <_dtoa_r+0x91e>
 800acaa:	e089      	b.n	800adc0 <_dtoa_r+0x990>
 800acac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acb2:	e74b      	b.n	800ab4c <_dtoa_r+0x71c>
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	1e5e      	subs	r6, r3, #1
 800acb8:	9b07      	ldr	r3, [sp, #28]
 800acba:	42b3      	cmp	r3, r6
 800acbc:	bfbf      	itttt	lt
 800acbe:	9b07      	ldrlt	r3, [sp, #28]
 800acc0:	9607      	strlt	r6, [sp, #28]
 800acc2:	1af2      	sublt	r2, r6, r3
 800acc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800acc6:	bfb6      	itet	lt
 800acc8:	189b      	addlt	r3, r3, r2
 800acca:	1b9e      	subge	r6, r3, r6
 800accc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800acce:	9b03      	ldr	r3, [sp, #12]
 800acd0:	bfb8      	it	lt
 800acd2:	2600      	movlt	r6, #0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bfb7      	itett	lt
 800acd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800acdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ace0:	1a9d      	sublt	r5, r3, r2
 800ace2:	2300      	movlt	r3, #0
 800ace4:	e734      	b.n	800ab50 <_dtoa_r+0x720>
 800ace6:	9e07      	ldr	r6, [sp, #28]
 800ace8:	9d04      	ldr	r5, [sp, #16]
 800acea:	9f08      	ldr	r7, [sp, #32]
 800acec:	e73b      	b.n	800ab66 <_dtoa_r+0x736>
 800acee:	9a07      	ldr	r2, [sp, #28]
 800acf0:	e767      	b.n	800abc2 <_dtoa_r+0x792>
 800acf2:	9b06      	ldr	r3, [sp, #24]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	dc18      	bgt.n	800ad2a <_dtoa_r+0x8fa>
 800acf8:	f1ba 0f00 	cmp.w	sl, #0
 800acfc:	d115      	bne.n	800ad2a <_dtoa_r+0x8fa>
 800acfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad02:	b993      	cbnz	r3, 800ad2a <_dtoa_r+0x8fa>
 800ad04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad08:	0d1b      	lsrs	r3, r3, #20
 800ad0a:	051b      	lsls	r3, r3, #20
 800ad0c:	b183      	cbz	r3, 800ad30 <_dtoa_r+0x900>
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	3301      	adds	r3, #1
 800ad12:	9304      	str	r3, [sp, #16]
 800ad14:	9b05      	ldr	r3, [sp, #20]
 800ad16:	3301      	adds	r3, #1
 800ad18:	9305      	str	r3, [sp, #20]
 800ad1a:	f04f 0801 	mov.w	r8, #1
 800ad1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f47f af6a 	bne.w	800abfa <_dtoa_r+0x7ca>
 800ad26:	2001      	movs	r0, #1
 800ad28:	e76f      	b.n	800ac0a <_dtoa_r+0x7da>
 800ad2a:	f04f 0800 	mov.w	r8, #0
 800ad2e:	e7f6      	b.n	800ad1e <_dtoa_r+0x8ee>
 800ad30:	4698      	mov	r8, r3
 800ad32:	e7f4      	b.n	800ad1e <_dtoa_r+0x8ee>
 800ad34:	f43f af7d 	beq.w	800ac32 <_dtoa_r+0x802>
 800ad38:	4618      	mov	r0, r3
 800ad3a:	301c      	adds	r0, #28
 800ad3c:	e772      	b.n	800ac24 <_dtoa_r+0x7f4>
 800ad3e:	9b03      	ldr	r3, [sp, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dc37      	bgt.n	800adb4 <_dtoa_r+0x984>
 800ad44:	9b06      	ldr	r3, [sp, #24]
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	dd34      	ble.n	800adb4 <_dtoa_r+0x984>
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	9302      	str	r3, [sp, #8]
 800ad4e:	9b02      	ldr	r3, [sp, #8]
 800ad50:	b96b      	cbnz	r3, 800ad6e <_dtoa_r+0x93e>
 800ad52:	4631      	mov	r1, r6
 800ad54:	2205      	movs	r2, #5
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 fd5e 	bl	800b818 <__multadd>
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	4606      	mov	r6, r0
 800ad60:	ee18 0a10 	vmov	r0, s16
 800ad64:	f000 ffc2 	bl	800bcec <__mcmp>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	f73f adbb 	bgt.w	800a8e4 <_dtoa_r+0x4b4>
 800ad6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad70:	9d01      	ldr	r5, [sp, #4]
 800ad72:	43db      	mvns	r3, r3
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	f04f 0800 	mov.w	r8, #0
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 fd29 	bl	800b7d4 <_Bfree>
 800ad82:	2f00      	cmp	r7, #0
 800ad84:	f43f aea4 	beq.w	800aad0 <_dtoa_r+0x6a0>
 800ad88:	f1b8 0f00 	cmp.w	r8, #0
 800ad8c:	d005      	beq.n	800ad9a <_dtoa_r+0x96a>
 800ad8e:	45b8      	cmp	r8, r7
 800ad90:	d003      	beq.n	800ad9a <_dtoa_r+0x96a>
 800ad92:	4641      	mov	r1, r8
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fd1d 	bl	800b7d4 <_Bfree>
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f000 fd19 	bl	800b7d4 <_Bfree>
 800ada2:	e695      	b.n	800aad0 <_dtoa_r+0x6a0>
 800ada4:	2600      	movs	r6, #0
 800ada6:	4637      	mov	r7, r6
 800ada8:	e7e1      	b.n	800ad6e <_dtoa_r+0x93e>
 800adaa:	9700      	str	r7, [sp, #0]
 800adac:	4637      	mov	r7, r6
 800adae:	e599      	b.n	800a8e4 <_dtoa_r+0x4b4>
 800adb0:	40240000 	.word	0x40240000
 800adb4:	9b08      	ldr	r3, [sp, #32]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 80ca 	beq.w	800af50 <_dtoa_r+0xb20>
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	9302      	str	r3, [sp, #8]
 800adc0:	2d00      	cmp	r5, #0
 800adc2:	dd05      	ble.n	800add0 <_dtoa_r+0x9a0>
 800adc4:	4639      	mov	r1, r7
 800adc6:	462a      	mov	r2, r5
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 ff1f 	bl	800bc0c <__lshift>
 800adce:	4607      	mov	r7, r0
 800add0:	f1b8 0f00 	cmp.w	r8, #0
 800add4:	d05b      	beq.n	800ae8e <_dtoa_r+0xa5e>
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4620      	mov	r0, r4
 800adda:	f000 fcbb 	bl	800b754 <_Balloc>
 800adde:	4605      	mov	r5, r0
 800ade0:	b928      	cbnz	r0, 800adee <_dtoa_r+0x9be>
 800ade2:	4b87      	ldr	r3, [pc, #540]	; (800b000 <_dtoa_r+0xbd0>)
 800ade4:	4602      	mov	r2, r0
 800ade6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adea:	f7ff bb3b 	b.w	800a464 <_dtoa_r+0x34>
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	3202      	adds	r2, #2
 800adf2:	0092      	lsls	r2, r2, #2
 800adf4:	f107 010c 	add.w	r1, r7, #12
 800adf8:	300c      	adds	r0, #12
 800adfa:	f7fd fb89 	bl	8008510 <memcpy>
 800adfe:	2201      	movs	r2, #1
 800ae00:	4629      	mov	r1, r5
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 ff02 	bl	800bc0c <__lshift>
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	f103 0901 	add.w	r9, r3, #1
 800ae0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ae12:	4413      	add	r3, r2
 800ae14:	9305      	str	r3, [sp, #20]
 800ae16:	f00a 0301 	and.w	r3, sl, #1
 800ae1a:	46b8      	mov	r8, r7
 800ae1c:	9304      	str	r3, [sp, #16]
 800ae1e:	4607      	mov	r7, r0
 800ae20:	4631      	mov	r1, r6
 800ae22:	ee18 0a10 	vmov	r0, s16
 800ae26:	f7ff fa75 	bl	800a314 <quorem>
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	9002      	str	r0, [sp, #8]
 800ae2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae32:	ee18 0a10 	vmov	r0, s16
 800ae36:	f000 ff59 	bl	800bcec <__mcmp>
 800ae3a:	463a      	mov	r2, r7
 800ae3c:	9003      	str	r0, [sp, #12]
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4620      	mov	r0, r4
 800ae42:	f000 ff6f 	bl	800bd24 <__mdiff>
 800ae46:	68c2      	ldr	r2, [r0, #12]
 800ae48:	f109 3bff 	add.w	fp, r9, #4294967295
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	bb02      	cbnz	r2, 800ae92 <_dtoa_r+0xa62>
 800ae50:	4601      	mov	r1, r0
 800ae52:	ee18 0a10 	vmov	r0, s16
 800ae56:	f000 ff49 	bl	800bcec <__mcmp>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4620      	mov	r0, r4
 800ae60:	9207      	str	r2, [sp, #28]
 800ae62:	f000 fcb7 	bl	800b7d4 <_Bfree>
 800ae66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ae6a:	ea43 0102 	orr.w	r1, r3, r2
 800ae6e:	9b04      	ldr	r3, [sp, #16]
 800ae70:	430b      	orrs	r3, r1
 800ae72:	464d      	mov	r5, r9
 800ae74:	d10f      	bne.n	800ae96 <_dtoa_r+0xa66>
 800ae76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae7a:	d02a      	beq.n	800aed2 <_dtoa_r+0xaa2>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	dd02      	ble.n	800ae88 <_dtoa_r+0xa58>
 800ae82:	9b02      	ldr	r3, [sp, #8]
 800ae84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ae88:	f88b a000 	strb.w	sl, [fp]
 800ae8c:	e775      	b.n	800ad7a <_dtoa_r+0x94a>
 800ae8e:	4638      	mov	r0, r7
 800ae90:	e7ba      	b.n	800ae08 <_dtoa_r+0x9d8>
 800ae92:	2201      	movs	r2, #1
 800ae94:	e7e2      	b.n	800ae5c <_dtoa_r+0xa2c>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	db04      	blt.n	800aea6 <_dtoa_r+0xa76>
 800ae9c:	9906      	ldr	r1, [sp, #24]
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	9904      	ldr	r1, [sp, #16]
 800aea2:	430b      	orrs	r3, r1
 800aea4:	d122      	bne.n	800aeec <_dtoa_r+0xabc>
 800aea6:	2a00      	cmp	r2, #0
 800aea8:	ddee      	ble.n	800ae88 <_dtoa_r+0xa58>
 800aeaa:	ee18 1a10 	vmov	r1, s16
 800aeae:	2201      	movs	r2, #1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 feab 	bl	800bc0c <__lshift>
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	ee08 0a10 	vmov	s16, r0
 800aebc:	f000 ff16 	bl	800bcec <__mcmp>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	dc03      	bgt.n	800aecc <_dtoa_r+0xa9c>
 800aec4:	d1e0      	bne.n	800ae88 <_dtoa_r+0xa58>
 800aec6:	f01a 0f01 	tst.w	sl, #1
 800aeca:	d0dd      	beq.n	800ae88 <_dtoa_r+0xa58>
 800aecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aed0:	d1d7      	bne.n	800ae82 <_dtoa_r+0xa52>
 800aed2:	2339      	movs	r3, #57	; 0x39
 800aed4:	f88b 3000 	strb.w	r3, [fp]
 800aed8:	462b      	mov	r3, r5
 800aeda:	461d      	mov	r5, r3
 800aedc:	3b01      	subs	r3, #1
 800aede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aee2:	2a39      	cmp	r2, #57	; 0x39
 800aee4:	d071      	beq.n	800afca <_dtoa_r+0xb9a>
 800aee6:	3201      	adds	r2, #1
 800aee8:	701a      	strb	r2, [r3, #0]
 800aeea:	e746      	b.n	800ad7a <_dtoa_r+0x94a>
 800aeec:	2a00      	cmp	r2, #0
 800aeee:	dd07      	ble.n	800af00 <_dtoa_r+0xad0>
 800aef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aef4:	d0ed      	beq.n	800aed2 <_dtoa_r+0xaa2>
 800aef6:	f10a 0301 	add.w	r3, sl, #1
 800aefa:	f88b 3000 	strb.w	r3, [fp]
 800aefe:	e73c      	b.n	800ad7a <_dtoa_r+0x94a>
 800af00:	9b05      	ldr	r3, [sp, #20]
 800af02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800af06:	4599      	cmp	r9, r3
 800af08:	d047      	beq.n	800af9a <_dtoa_r+0xb6a>
 800af0a:	ee18 1a10 	vmov	r1, s16
 800af0e:	2300      	movs	r3, #0
 800af10:	220a      	movs	r2, #10
 800af12:	4620      	mov	r0, r4
 800af14:	f000 fc80 	bl	800b818 <__multadd>
 800af18:	45b8      	cmp	r8, r7
 800af1a:	ee08 0a10 	vmov	s16, r0
 800af1e:	f04f 0300 	mov.w	r3, #0
 800af22:	f04f 020a 	mov.w	r2, #10
 800af26:	4641      	mov	r1, r8
 800af28:	4620      	mov	r0, r4
 800af2a:	d106      	bne.n	800af3a <_dtoa_r+0xb0a>
 800af2c:	f000 fc74 	bl	800b818 <__multadd>
 800af30:	4680      	mov	r8, r0
 800af32:	4607      	mov	r7, r0
 800af34:	f109 0901 	add.w	r9, r9, #1
 800af38:	e772      	b.n	800ae20 <_dtoa_r+0x9f0>
 800af3a:	f000 fc6d 	bl	800b818 <__multadd>
 800af3e:	4639      	mov	r1, r7
 800af40:	4680      	mov	r8, r0
 800af42:	2300      	movs	r3, #0
 800af44:	220a      	movs	r2, #10
 800af46:	4620      	mov	r0, r4
 800af48:	f000 fc66 	bl	800b818 <__multadd>
 800af4c:	4607      	mov	r7, r0
 800af4e:	e7f1      	b.n	800af34 <_dtoa_r+0xb04>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	9302      	str	r3, [sp, #8]
 800af54:	9d01      	ldr	r5, [sp, #4]
 800af56:	ee18 0a10 	vmov	r0, s16
 800af5a:	4631      	mov	r1, r6
 800af5c:	f7ff f9da 	bl	800a314 <quorem>
 800af60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af64:	9b01      	ldr	r3, [sp, #4]
 800af66:	f805 ab01 	strb.w	sl, [r5], #1
 800af6a:	1aea      	subs	r2, r5, r3
 800af6c:	9b02      	ldr	r3, [sp, #8]
 800af6e:	4293      	cmp	r3, r2
 800af70:	dd09      	ble.n	800af86 <_dtoa_r+0xb56>
 800af72:	ee18 1a10 	vmov	r1, s16
 800af76:	2300      	movs	r3, #0
 800af78:	220a      	movs	r2, #10
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fc4c 	bl	800b818 <__multadd>
 800af80:	ee08 0a10 	vmov	s16, r0
 800af84:	e7e7      	b.n	800af56 <_dtoa_r+0xb26>
 800af86:	9b02      	ldr	r3, [sp, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	bfc8      	it	gt
 800af8c:	461d      	movgt	r5, r3
 800af8e:	9b01      	ldr	r3, [sp, #4]
 800af90:	bfd8      	it	le
 800af92:	2501      	movle	r5, #1
 800af94:	441d      	add	r5, r3
 800af96:	f04f 0800 	mov.w	r8, #0
 800af9a:	ee18 1a10 	vmov	r1, s16
 800af9e:	2201      	movs	r2, #1
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 fe33 	bl	800bc0c <__lshift>
 800afa6:	4631      	mov	r1, r6
 800afa8:	ee08 0a10 	vmov	s16, r0
 800afac:	f000 fe9e 	bl	800bcec <__mcmp>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	dc91      	bgt.n	800aed8 <_dtoa_r+0xaa8>
 800afb4:	d102      	bne.n	800afbc <_dtoa_r+0xb8c>
 800afb6:	f01a 0f01 	tst.w	sl, #1
 800afba:	d18d      	bne.n	800aed8 <_dtoa_r+0xaa8>
 800afbc:	462b      	mov	r3, r5
 800afbe:	461d      	mov	r5, r3
 800afc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afc4:	2a30      	cmp	r2, #48	; 0x30
 800afc6:	d0fa      	beq.n	800afbe <_dtoa_r+0xb8e>
 800afc8:	e6d7      	b.n	800ad7a <_dtoa_r+0x94a>
 800afca:	9a01      	ldr	r2, [sp, #4]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d184      	bne.n	800aeda <_dtoa_r+0xaaa>
 800afd0:	9b00      	ldr	r3, [sp, #0]
 800afd2:	3301      	adds	r3, #1
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	2331      	movs	r3, #49	; 0x31
 800afd8:	7013      	strb	r3, [r2, #0]
 800afda:	e6ce      	b.n	800ad7a <_dtoa_r+0x94a>
 800afdc:	4b09      	ldr	r3, [pc, #36]	; (800b004 <_dtoa_r+0xbd4>)
 800afde:	f7ff ba95 	b.w	800a50c <_dtoa_r+0xdc>
 800afe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f47f aa6e 	bne.w	800a4c6 <_dtoa_r+0x96>
 800afea:	4b07      	ldr	r3, [pc, #28]	; (800b008 <_dtoa_r+0xbd8>)
 800afec:	f7ff ba8e 	b.w	800a50c <_dtoa_r+0xdc>
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	dcae      	bgt.n	800af54 <_dtoa_r+0xb24>
 800aff6:	9b06      	ldr	r3, [sp, #24]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	f73f aea8 	bgt.w	800ad4e <_dtoa_r+0x91e>
 800affe:	e7a9      	b.n	800af54 <_dtoa_r+0xb24>
 800b000:	0800e278 	.word	0x0800e278
 800b004:	0800e471 	.word	0x0800e471
 800b008:	0800e1f9 	.word	0x0800e1f9

0800b00c <rshift>:
 800b00c:	6903      	ldr	r3, [r0, #16]
 800b00e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b012:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b016:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b01a:	f100 0414 	add.w	r4, r0, #20
 800b01e:	dd45      	ble.n	800b0ac <rshift+0xa0>
 800b020:	f011 011f 	ands.w	r1, r1, #31
 800b024:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b028:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b02c:	d10c      	bne.n	800b048 <rshift+0x3c>
 800b02e:	f100 0710 	add.w	r7, r0, #16
 800b032:	4629      	mov	r1, r5
 800b034:	42b1      	cmp	r1, r6
 800b036:	d334      	bcc.n	800b0a2 <rshift+0x96>
 800b038:	1a9b      	subs	r3, r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	1eea      	subs	r2, r5, #3
 800b03e:	4296      	cmp	r6, r2
 800b040:	bf38      	it	cc
 800b042:	2300      	movcc	r3, #0
 800b044:	4423      	add	r3, r4
 800b046:	e015      	b.n	800b074 <rshift+0x68>
 800b048:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b04c:	f1c1 0820 	rsb	r8, r1, #32
 800b050:	40cf      	lsrs	r7, r1
 800b052:	f105 0e04 	add.w	lr, r5, #4
 800b056:	46a1      	mov	r9, r4
 800b058:	4576      	cmp	r6, lr
 800b05a:	46f4      	mov	ip, lr
 800b05c:	d815      	bhi.n	800b08a <rshift+0x7e>
 800b05e:	1a9a      	subs	r2, r3, r2
 800b060:	0092      	lsls	r2, r2, #2
 800b062:	3a04      	subs	r2, #4
 800b064:	3501      	adds	r5, #1
 800b066:	42ae      	cmp	r6, r5
 800b068:	bf38      	it	cc
 800b06a:	2200      	movcc	r2, #0
 800b06c:	18a3      	adds	r3, r4, r2
 800b06e:	50a7      	str	r7, [r4, r2]
 800b070:	b107      	cbz	r7, 800b074 <rshift+0x68>
 800b072:	3304      	adds	r3, #4
 800b074:	1b1a      	subs	r2, r3, r4
 800b076:	42a3      	cmp	r3, r4
 800b078:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b07c:	bf08      	it	eq
 800b07e:	2300      	moveq	r3, #0
 800b080:	6102      	str	r2, [r0, #16]
 800b082:	bf08      	it	eq
 800b084:	6143      	streq	r3, [r0, #20]
 800b086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b08a:	f8dc c000 	ldr.w	ip, [ip]
 800b08e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b092:	ea4c 0707 	orr.w	r7, ip, r7
 800b096:	f849 7b04 	str.w	r7, [r9], #4
 800b09a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b09e:	40cf      	lsrs	r7, r1
 800b0a0:	e7da      	b.n	800b058 <rshift+0x4c>
 800b0a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0aa:	e7c3      	b.n	800b034 <rshift+0x28>
 800b0ac:	4623      	mov	r3, r4
 800b0ae:	e7e1      	b.n	800b074 <rshift+0x68>

0800b0b0 <__hexdig_fun>:
 800b0b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0b4:	2b09      	cmp	r3, #9
 800b0b6:	d802      	bhi.n	800b0be <__hexdig_fun+0xe>
 800b0b8:	3820      	subs	r0, #32
 800b0ba:	b2c0      	uxtb	r0, r0
 800b0bc:	4770      	bx	lr
 800b0be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0c2:	2b05      	cmp	r3, #5
 800b0c4:	d801      	bhi.n	800b0ca <__hexdig_fun+0x1a>
 800b0c6:	3847      	subs	r0, #71	; 0x47
 800b0c8:	e7f7      	b.n	800b0ba <__hexdig_fun+0xa>
 800b0ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0ce:	2b05      	cmp	r3, #5
 800b0d0:	d801      	bhi.n	800b0d6 <__hexdig_fun+0x26>
 800b0d2:	3827      	subs	r0, #39	; 0x27
 800b0d4:	e7f1      	b.n	800b0ba <__hexdig_fun+0xa>
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	4770      	bx	lr
	...

0800b0dc <__gethex>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	ed2d 8b02 	vpush	{d8}
 800b0e4:	b089      	sub	sp, #36	; 0x24
 800b0e6:	ee08 0a10 	vmov	s16, r0
 800b0ea:	9304      	str	r3, [sp, #16]
 800b0ec:	4bb4      	ldr	r3, [pc, #720]	; (800b3c0 <__gethex+0x2e4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	468b      	mov	fp, r1
 800b0f6:	4690      	mov	r8, r2
 800b0f8:	f7f5 f872 	bl	80001e0 <strlen>
 800b0fc:	9b01      	ldr	r3, [sp, #4]
 800b0fe:	f8db 2000 	ldr.w	r2, [fp]
 800b102:	4403      	add	r3, r0
 800b104:	4682      	mov	sl, r0
 800b106:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b10a:	9305      	str	r3, [sp, #20]
 800b10c:	1c93      	adds	r3, r2, #2
 800b10e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b112:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b116:	32fe      	adds	r2, #254	; 0xfe
 800b118:	18d1      	adds	r1, r2, r3
 800b11a:	461f      	mov	r7, r3
 800b11c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b120:	9100      	str	r1, [sp, #0]
 800b122:	2830      	cmp	r0, #48	; 0x30
 800b124:	d0f8      	beq.n	800b118 <__gethex+0x3c>
 800b126:	f7ff ffc3 	bl	800b0b0 <__hexdig_fun>
 800b12a:	4604      	mov	r4, r0
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d13a      	bne.n	800b1a6 <__gethex+0xca>
 800b130:	9901      	ldr	r1, [sp, #4]
 800b132:	4652      	mov	r2, sl
 800b134:	4638      	mov	r0, r7
 800b136:	f001 fcb7 	bl	800caa8 <strncmp>
 800b13a:	4605      	mov	r5, r0
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d168      	bne.n	800b212 <__gethex+0x136>
 800b140:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b144:	eb07 060a 	add.w	r6, r7, sl
 800b148:	f7ff ffb2 	bl	800b0b0 <__hexdig_fun>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d062      	beq.n	800b216 <__gethex+0x13a>
 800b150:	4633      	mov	r3, r6
 800b152:	7818      	ldrb	r0, [r3, #0]
 800b154:	2830      	cmp	r0, #48	; 0x30
 800b156:	461f      	mov	r7, r3
 800b158:	f103 0301 	add.w	r3, r3, #1
 800b15c:	d0f9      	beq.n	800b152 <__gethex+0x76>
 800b15e:	f7ff ffa7 	bl	800b0b0 <__hexdig_fun>
 800b162:	2301      	movs	r3, #1
 800b164:	fab0 f480 	clz	r4, r0
 800b168:	0964      	lsrs	r4, r4, #5
 800b16a:	4635      	mov	r5, r6
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	463a      	mov	r2, r7
 800b170:	4616      	mov	r6, r2
 800b172:	3201      	adds	r2, #1
 800b174:	7830      	ldrb	r0, [r6, #0]
 800b176:	f7ff ff9b 	bl	800b0b0 <__hexdig_fun>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d1f8      	bne.n	800b170 <__gethex+0x94>
 800b17e:	9901      	ldr	r1, [sp, #4]
 800b180:	4652      	mov	r2, sl
 800b182:	4630      	mov	r0, r6
 800b184:	f001 fc90 	bl	800caa8 <strncmp>
 800b188:	b980      	cbnz	r0, 800b1ac <__gethex+0xd0>
 800b18a:	b94d      	cbnz	r5, 800b1a0 <__gethex+0xc4>
 800b18c:	eb06 050a 	add.w	r5, r6, sl
 800b190:	462a      	mov	r2, r5
 800b192:	4616      	mov	r6, r2
 800b194:	3201      	adds	r2, #1
 800b196:	7830      	ldrb	r0, [r6, #0]
 800b198:	f7ff ff8a 	bl	800b0b0 <__hexdig_fun>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d1f8      	bne.n	800b192 <__gethex+0xb6>
 800b1a0:	1bad      	subs	r5, r5, r6
 800b1a2:	00ad      	lsls	r5, r5, #2
 800b1a4:	e004      	b.n	800b1b0 <__gethex+0xd4>
 800b1a6:	2400      	movs	r4, #0
 800b1a8:	4625      	mov	r5, r4
 800b1aa:	e7e0      	b.n	800b16e <__gethex+0x92>
 800b1ac:	2d00      	cmp	r5, #0
 800b1ae:	d1f7      	bne.n	800b1a0 <__gethex+0xc4>
 800b1b0:	7833      	ldrb	r3, [r6, #0]
 800b1b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1b6:	2b50      	cmp	r3, #80	; 0x50
 800b1b8:	d13b      	bne.n	800b232 <__gethex+0x156>
 800b1ba:	7873      	ldrb	r3, [r6, #1]
 800b1bc:	2b2b      	cmp	r3, #43	; 0x2b
 800b1be:	d02c      	beq.n	800b21a <__gethex+0x13e>
 800b1c0:	2b2d      	cmp	r3, #45	; 0x2d
 800b1c2:	d02e      	beq.n	800b222 <__gethex+0x146>
 800b1c4:	1c71      	adds	r1, r6, #1
 800b1c6:	f04f 0900 	mov.w	r9, #0
 800b1ca:	7808      	ldrb	r0, [r1, #0]
 800b1cc:	f7ff ff70 	bl	800b0b0 <__hexdig_fun>
 800b1d0:	1e43      	subs	r3, r0, #1
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b18      	cmp	r3, #24
 800b1d6:	d82c      	bhi.n	800b232 <__gethex+0x156>
 800b1d8:	f1a0 0210 	sub.w	r2, r0, #16
 800b1dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1e0:	f7ff ff66 	bl	800b0b0 <__hexdig_fun>
 800b1e4:	1e43      	subs	r3, r0, #1
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b18      	cmp	r3, #24
 800b1ea:	d91d      	bls.n	800b228 <__gethex+0x14c>
 800b1ec:	f1b9 0f00 	cmp.w	r9, #0
 800b1f0:	d000      	beq.n	800b1f4 <__gethex+0x118>
 800b1f2:	4252      	negs	r2, r2
 800b1f4:	4415      	add	r5, r2
 800b1f6:	f8cb 1000 	str.w	r1, [fp]
 800b1fa:	b1e4      	cbz	r4, 800b236 <__gethex+0x15a>
 800b1fc:	9b00      	ldr	r3, [sp, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	bf14      	ite	ne
 800b202:	2700      	movne	r7, #0
 800b204:	2706      	moveq	r7, #6
 800b206:	4638      	mov	r0, r7
 800b208:	b009      	add	sp, #36	; 0x24
 800b20a:	ecbd 8b02 	vpop	{d8}
 800b20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b212:	463e      	mov	r6, r7
 800b214:	4625      	mov	r5, r4
 800b216:	2401      	movs	r4, #1
 800b218:	e7ca      	b.n	800b1b0 <__gethex+0xd4>
 800b21a:	f04f 0900 	mov.w	r9, #0
 800b21e:	1cb1      	adds	r1, r6, #2
 800b220:	e7d3      	b.n	800b1ca <__gethex+0xee>
 800b222:	f04f 0901 	mov.w	r9, #1
 800b226:	e7fa      	b.n	800b21e <__gethex+0x142>
 800b228:	230a      	movs	r3, #10
 800b22a:	fb03 0202 	mla	r2, r3, r2, r0
 800b22e:	3a10      	subs	r2, #16
 800b230:	e7d4      	b.n	800b1dc <__gethex+0x100>
 800b232:	4631      	mov	r1, r6
 800b234:	e7df      	b.n	800b1f6 <__gethex+0x11a>
 800b236:	1bf3      	subs	r3, r6, r7
 800b238:	3b01      	subs	r3, #1
 800b23a:	4621      	mov	r1, r4
 800b23c:	2b07      	cmp	r3, #7
 800b23e:	dc0b      	bgt.n	800b258 <__gethex+0x17c>
 800b240:	ee18 0a10 	vmov	r0, s16
 800b244:	f000 fa86 	bl	800b754 <_Balloc>
 800b248:	4604      	mov	r4, r0
 800b24a:	b940      	cbnz	r0, 800b25e <__gethex+0x182>
 800b24c:	4b5d      	ldr	r3, [pc, #372]	; (800b3c4 <__gethex+0x2e8>)
 800b24e:	4602      	mov	r2, r0
 800b250:	21de      	movs	r1, #222	; 0xde
 800b252:	485d      	ldr	r0, [pc, #372]	; (800b3c8 <__gethex+0x2ec>)
 800b254:	f001 fcf8 	bl	800cc48 <__assert_func>
 800b258:	3101      	adds	r1, #1
 800b25a:	105b      	asrs	r3, r3, #1
 800b25c:	e7ee      	b.n	800b23c <__gethex+0x160>
 800b25e:	f100 0914 	add.w	r9, r0, #20
 800b262:	f04f 0b00 	mov.w	fp, #0
 800b266:	f1ca 0301 	rsb	r3, sl, #1
 800b26a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b26e:	f8cd b000 	str.w	fp, [sp]
 800b272:	9306      	str	r3, [sp, #24]
 800b274:	42b7      	cmp	r7, r6
 800b276:	d340      	bcc.n	800b2fa <__gethex+0x21e>
 800b278:	9802      	ldr	r0, [sp, #8]
 800b27a:	9b00      	ldr	r3, [sp, #0]
 800b27c:	f840 3b04 	str.w	r3, [r0], #4
 800b280:	eba0 0009 	sub.w	r0, r0, r9
 800b284:	1080      	asrs	r0, r0, #2
 800b286:	0146      	lsls	r6, r0, #5
 800b288:	6120      	str	r0, [r4, #16]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 fb54 	bl	800b938 <__hi0bits>
 800b290:	1a30      	subs	r0, r6, r0
 800b292:	f8d8 6000 	ldr.w	r6, [r8]
 800b296:	42b0      	cmp	r0, r6
 800b298:	dd63      	ble.n	800b362 <__gethex+0x286>
 800b29a:	1b87      	subs	r7, r0, r6
 800b29c:	4639      	mov	r1, r7
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 fef8 	bl	800c094 <__any_on>
 800b2a4:	4682      	mov	sl, r0
 800b2a6:	b1a8      	cbz	r0, 800b2d4 <__gethex+0x1f8>
 800b2a8:	1e7b      	subs	r3, r7, #1
 800b2aa:	1159      	asrs	r1, r3, #5
 800b2ac:	f003 021f 	and.w	r2, r3, #31
 800b2b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2b4:	f04f 0a01 	mov.w	sl, #1
 800b2b8:	fa0a f202 	lsl.w	r2, sl, r2
 800b2bc:	420a      	tst	r2, r1
 800b2be:	d009      	beq.n	800b2d4 <__gethex+0x1f8>
 800b2c0:	4553      	cmp	r3, sl
 800b2c2:	dd05      	ble.n	800b2d0 <__gethex+0x1f4>
 800b2c4:	1eb9      	subs	r1, r7, #2
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f000 fee4 	bl	800c094 <__any_on>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d145      	bne.n	800b35c <__gethex+0x280>
 800b2d0:	f04f 0a02 	mov.w	sl, #2
 800b2d4:	4639      	mov	r1, r7
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f7ff fe98 	bl	800b00c <rshift>
 800b2dc:	443d      	add	r5, r7
 800b2de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2e2:	42ab      	cmp	r3, r5
 800b2e4:	da4c      	bge.n	800b380 <__gethex+0x2a4>
 800b2e6:	ee18 0a10 	vmov	r0, s16
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	f000 fa72 	bl	800b7d4 <_Bfree>
 800b2f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	6013      	str	r3, [r2, #0]
 800b2f6:	27a3      	movs	r7, #163	; 0xa3
 800b2f8:	e785      	b.n	800b206 <__gethex+0x12a>
 800b2fa:	1e73      	subs	r3, r6, #1
 800b2fc:	9a05      	ldr	r2, [sp, #20]
 800b2fe:	9303      	str	r3, [sp, #12]
 800b300:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b304:	4293      	cmp	r3, r2
 800b306:	d019      	beq.n	800b33c <__gethex+0x260>
 800b308:	f1bb 0f20 	cmp.w	fp, #32
 800b30c:	d107      	bne.n	800b31e <__gethex+0x242>
 800b30e:	9b02      	ldr	r3, [sp, #8]
 800b310:	9a00      	ldr	r2, [sp, #0]
 800b312:	f843 2b04 	str.w	r2, [r3], #4
 800b316:	9302      	str	r3, [sp, #8]
 800b318:	2300      	movs	r3, #0
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	469b      	mov	fp, r3
 800b31e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b322:	f7ff fec5 	bl	800b0b0 <__hexdig_fun>
 800b326:	9b00      	ldr	r3, [sp, #0]
 800b328:	f000 000f 	and.w	r0, r0, #15
 800b32c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b330:	4303      	orrs	r3, r0
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	f10b 0b04 	add.w	fp, fp, #4
 800b338:	9b03      	ldr	r3, [sp, #12]
 800b33a:	e00d      	b.n	800b358 <__gethex+0x27c>
 800b33c:	9b03      	ldr	r3, [sp, #12]
 800b33e:	9a06      	ldr	r2, [sp, #24]
 800b340:	4413      	add	r3, r2
 800b342:	42bb      	cmp	r3, r7
 800b344:	d3e0      	bcc.n	800b308 <__gethex+0x22c>
 800b346:	4618      	mov	r0, r3
 800b348:	9901      	ldr	r1, [sp, #4]
 800b34a:	9307      	str	r3, [sp, #28]
 800b34c:	4652      	mov	r2, sl
 800b34e:	f001 fbab 	bl	800caa8 <strncmp>
 800b352:	9b07      	ldr	r3, [sp, #28]
 800b354:	2800      	cmp	r0, #0
 800b356:	d1d7      	bne.n	800b308 <__gethex+0x22c>
 800b358:	461e      	mov	r6, r3
 800b35a:	e78b      	b.n	800b274 <__gethex+0x198>
 800b35c:	f04f 0a03 	mov.w	sl, #3
 800b360:	e7b8      	b.n	800b2d4 <__gethex+0x1f8>
 800b362:	da0a      	bge.n	800b37a <__gethex+0x29e>
 800b364:	1a37      	subs	r7, r6, r0
 800b366:	4621      	mov	r1, r4
 800b368:	ee18 0a10 	vmov	r0, s16
 800b36c:	463a      	mov	r2, r7
 800b36e:	f000 fc4d 	bl	800bc0c <__lshift>
 800b372:	1bed      	subs	r5, r5, r7
 800b374:	4604      	mov	r4, r0
 800b376:	f100 0914 	add.w	r9, r0, #20
 800b37a:	f04f 0a00 	mov.w	sl, #0
 800b37e:	e7ae      	b.n	800b2de <__gethex+0x202>
 800b380:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b384:	42a8      	cmp	r0, r5
 800b386:	dd72      	ble.n	800b46e <__gethex+0x392>
 800b388:	1b45      	subs	r5, r0, r5
 800b38a:	42ae      	cmp	r6, r5
 800b38c:	dc36      	bgt.n	800b3fc <__gethex+0x320>
 800b38e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b392:	2b02      	cmp	r3, #2
 800b394:	d02a      	beq.n	800b3ec <__gethex+0x310>
 800b396:	2b03      	cmp	r3, #3
 800b398:	d02c      	beq.n	800b3f4 <__gethex+0x318>
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d11c      	bne.n	800b3d8 <__gethex+0x2fc>
 800b39e:	42ae      	cmp	r6, r5
 800b3a0:	d11a      	bne.n	800b3d8 <__gethex+0x2fc>
 800b3a2:	2e01      	cmp	r6, #1
 800b3a4:	d112      	bne.n	800b3cc <__gethex+0x2f0>
 800b3a6:	9a04      	ldr	r2, [sp, #16]
 800b3a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	f8c9 3000 	str.w	r3, [r9]
 800b3b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3b8:	2762      	movs	r7, #98	; 0x62
 800b3ba:	601c      	str	r4, [r3, #0]
 800b3bc:	e723      	b.n	800b206 <__gethex+0x12a>
 800b3be:	bf00      	nop
 800b3c0:	0800e2f0 	.word	0x0800e2f0
 800b3c4:	0800e278 	.word	0x0800e278
 800b3c8:	0800e289 	.word	0x0800e289
 800b3cc:	1e71      	subs	r1, r6, #1
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f000 fe60 	bl	800c094 <__any_on>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d1e6      	bne.n	800b3a6 <__gethex+0x2ca>
 800b3d8:	ee18 0a10 	vmov	r0, s16
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f000 f9f9 	bl	800b7d4 <_Bfree>
 800b3e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	2750      	movs	r7, #80	; 0x50
 800b3ea:	e70c      	b.n	800b206 <__gethex+0x12a>
 800b3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1f2      	bne.n	800b3d8 <__gethex+0x2fc>
 800b3f2:	e7d8      	b.n	800b3a6 <__gethex+0x2ca>
 800b3f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1d5      	bne.n	800b3a6 <__gethex+0x2ca>
 800b3fa:	e7ed      	b.n	800b3d8 <__gethex+0x2fc>
 800b3fc:	1e6f      	subs	r7, r5, #1
 800b3fe:	f1ba 0f00 	cmp.w	sl, #0
 800b402:	d131      	bne.n	800b468 <__gethex+0x38c>
 800b404:	b127      	cbz	r7, 800b410 <__gethex+0x334>
 800b406:	4639      	mov	r1, r7
 800b408:	4620      	mov	r0, r4
 800b40a:	f000 fe43 	bl	800c094 <__any_on>
 800b40e:	4682      	mov	sl, r0
 800b410:	117b      	asrs	r3, r7, #5
 800b412:	2101      	movs	r1, #1
 800b414:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b418:	f007 071f 	and.w	r7, r7, #31
 800b41c:	fa01 f707 	lsl.w	r7, r1, r7
 800b420:	421f      	tst	r7, r3
 800b422:	4629      	mov	r1, r5
 800b424:	4620      	mov	r0, r4
 800b426:	bf18      	it	ne
 800b428:	f04a 0a02 	orrne.w	sl, sl, #2
 800b42c:	1b76      	subs	r6, r6, r5
 800b42e:	f7ff fded 	bl	800b00c <rshift>
 800b432:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b436:	2702      	movs	r7, #2
 800b438:	f1ba 0f00 	cmp.w	sl, #0
 800b43c:	d048      	beq.n	800b4d0 <__gethex+0x3f4>
 800b43e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b442:	2b02      	cmp	r3, #2
 800b444:	d015      	beq.n	800b472 <__gethex+0x396>
 800b446:	2b03      	cmp	r3, #3
 800b448:	d017      	beq.n	800b47a <__gethex+0x39e>
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d109      	bne.n	800b462 <__gethex+0x386>
 800b44e:	f01a 0f02 	tst.w	sl, #2
 800b452:	d006      	beq.n	800b462 <__gethex+0x386>
 800b454:	f8d9 0000 	ldr.w	r0, [r9]
 800b458:	ea4a 0a00 	orr.w	sl, sl, r0
 800b45c:	f01a 0f01 	tst.w	sl, #1
 800b460:	d10e      	bne.n	800b480 <__gethex+0x3a4>
 800b462:	f047 0710 	orr.w	r7, r7, #16
 800b466:	e033      	b.n	800b4d0 <__gethex+0x3f4>
 800b468:	f04f 0a01 	mov.w	sl, #1
 800b46c:	e7d0      	b.n	800b410 <__gethex+0x334>
 800b46e:	2701      	movs	r7, #1
 800b470:	e7e2      	b.n	800b438 <__gethex+0x35c>
 800b472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b474:	f1c3 0301 	rsb	r3, r3, #1
 800b478:	9315      	str	r3, [sp, #84]	; 0x54
 800b47a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d0f0      	beq.n	800b462 <__gethex+0x386>
 800b480:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b484:	f104 0314 	add.w	r3, r4, #20
 800b488:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b48c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b490:	f04f 0c00 	mov.w	ip, #0
 800b494:	4618      	mov	r0, r3
 800b496:	f853 2b04 	ldr.w	r2, [r3], #4
 800b49a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b49e:	d01c      	beq.n	800b4da <__gethex+0x3fe>
 800b4a0:	3201      	adds	r2, #1
 800b4a2:	6002      	str	r2, [r0, #0]
 800b4a4:	2f02      	cmp	r7, #2
 800b4a6:	f104 0314 	add.w	r3, r4, #20
 800b4aa:	d13f      	bne.n	800b52c <__gethex+0x450>
 800b4ac:	f8d8 2000 	ldr.w	r2, [r8]
 800b4b0:	3a01      	subs	r2, #1
 800b4b2:	42b2      	cmp	r2, r6
 800b4b4:	d10a      	bne.n	800b4cc <__gethex+0x3f0>
 800b4b6:	1171      	asrs	r1, r6, #5
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4be:	f006 061f 	and.w	r6, r6, #31
 800b4c2:	fa02 f606 	lsl.w	r6, r2, r6
 800b4c6:	421e      	tst	r6, r3
 800b4c8:	bf18      	it	ne
 800b4ca:	4617      	movne	r7, r2
 800b4cc:	f047 0720 	orr.w	r7, r7, #32
 800b4d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4d2:	601c      	str	r4, [r3, #0]
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	601d      	str	r5, [r3, #0]
 800b4d8:	e695      	b.n	800b206 <__gethex+0x12a>
 800b4da:	4299      	cmp	r1, r3
 800b4dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4e0:	d8d8      	bhi.n	800b494 <__gethex+0x3b8>
 800b4e2:	68a3      	ldr	r3, [r4, #8]
 800b4e4:	459b      	cmp	fp, r3
 800b4e6:	db19      	blt.n	800b51c <__gethex+0x440>
 800b4e8:	6861      	ldr	r1, [r4, #4]
 800b4ea:	ee18 0a10 	vmov	r0, s16
 800b4ee:	3101      	adds	r1, #1
 800b4f0:	f000 f930 	bl	800b754 <_Balloc>
 800b4f4:	4681      	mov	r9, r0
 800b4f6:	b918      	cbnz	r0, 800b500 <__gethex+0x424>
 800b4f8:	4b1a      	ldr	r3, [pc, #104]	; (800b564 <__gethex+0x488>)
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	2184      	movs	r1, #132	; 0x84
 800b4fe:	e6a8      	b.n	800b252 <__gethex+0x176>
 800b500:	6922      	ldr	r2, [r4, #16]
 800b502:	3202      	adds	r2, #2
 800b504:	f104 010c 	add.w	r1, r4, #12
 800b508:	0092      	lsls	r2, r2, #2
 800b50a:	300c      	adds	r0, #12
 800b50c:	f7fd f800 	bl	8008510 <memcpy>
 800b510:	4621      	mov	r1, r4
 800b512:	ee18 0a10 	vmov	r0, s16
 800b516:	f000 f95d 	bl	800b7d4 <_Bfree>
 800b51a:	464c      	mov	r4, r9
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b524:	6122      	str	r2, [r4, #16]
 800b526:	2201      	movs	r2, #1
 800b528:	615a      	str	r2, [r3, #20]
 800b52a:	e7bb      	b.n	800b4a4 <__gethex+0x3c8>
 800b52c:	6922      	ldr	r2, [r4, #16]
 800b52e:	455a      	cmp	r2, fp
 800b530:	dd0b      	ble.n	800b54a <__gethex+0x46e>
 800b532:	2101      	movs	r1, #1
 800b534:	4620      	mov	r0, r4
 800b536:	f7ff fd69 	bl	800b00c <rshift>
 800b53a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b53e:	3501      	adds	r5, #1
 800b540:	42ab      	cmp	r3, r5
 800b542:	f6ff aed0 	blt.w	800b2e6 <__gethex+0x20a>
 800b546:	2701      	movs	r7, #1
 800b548:	e7c0      	b.n	800b4cc <__gethex+0x3f0>
 800b54a:	f016 061f 	ands.w	r6, r6, #31
 800b54e:	d0fa      	beq.n	800b546 <__gethex+0x46a>
 800b550:	4453      	add	r3, sl
 800b552:	f1c6 0620 	rsb	r6, r6, #32
 800b556:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b55a:	f000 f9ed 	bl	800b938 <__hi0bits>
 800b55e:	42b0      	cmp	r0, r6
 800b560:	dbe7      	blt.n	800b532 <__gethex+0x456>
 800b562:	e7f0      	b.n	800b546 <__gethex+0x46a>
 800b564:	0800e278 	.word	0x0800e278

0800b568 <L_shift>:
 800b568:	f1c2 0208 	rsb	r2, r2, #8
 800b56c:	0092      	lsls	r2, r2, #2
 800b56e:	b570      	push	{r4, r5, r6, lr}
 800b570:	f1c2 0620 	rsb	r6, r2, #32
 800b574:	6843      	ldr	r3, [r0, #4]
 800b576:	6804      	ldr	r4, [r0, #0]
 800b578:	fa03 f506 	lsl.w	r5, r3, r6
 800b57c:	432c      	orrs	r4, r5
 800b57e:	40d3      	lsrs	r3, r2
 800b580:	6004      	str	r4, [r0, #0]
 800b582:	f840 3f04 	str.w	r3, [r0, #4]!
 800b586:	4288      	cmp	r0, r1
 800b588:	d3f4      	bcc.n	800b574 <L_shift+0xc>
 800b58a:	bd70      	pop	{r4, r5, r6, pc}

0800b58c <__match>:
 800b58c:	b530      	push	{r4, r5, lr}
 800b58e:	6803      	ldr	r3, [r0, #0]
 800b590:	3301      	adds	r3, #1
 800b592:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b596:	b914      	cbnz	r4, 800b59e <__match+0x12>
 800b598:	6003      	str	r3, [r0, #0]
 800b59a:	2001      	movs	r0, #1
 800b59c:	bd30      	pop	{r4, r5, pc}
 800b59e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b5a6:	2d19      	cmp	r5, #25
 800b5a8:	bf98      	it	ls
 800b5aa:	3220      	addls	r2, #32
 800b5ac:	42a2      	cmp	r2, r4
 800b5ae:	d0f0      	beq.n	800b592 <__match+0x6>
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	e7f3      	b.n	800b59c <__match+0x10>

0800b5b4 <__hexnan>:
 800b5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	680b      	ldr	r3, [r1, #0]
 800b5ba:	115e      	asrs	r6, r3, #5
 800b5bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5c0:	f013 031f 	ands.w	r3, r3, #31
 800b5c4:	b087      	sub	sp, #28
 800b5c6:	bf18      	it	ne
 800b5c8:	3604      	addne	r6, #4
 800b5ca:	2500      	movs	r5, #0
 800b5cc:	1f37      	subs	r7, r6, #4
 800b5ce:	4690      	mov	r8, r2
 800b5d0:	6802      	ldr	r2, [r0, #0]
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	4682      	mov	sl, r0
 800b5d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5da:	46b9      	mov	r9, r7
 800b5dc:	463c      	mov	r4, r7
 800b5de:	9502      	str	r5, [sp, #8]
 800b5e0:	46ab      	mov	fp, r5
 800b5e2:	7851      	ldrb	r1, [r2, #1]
 800b5e4:	1c53      	adds	r3, r2, #1
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	b341      	cbz	r1, 800b63c <__hexnan+0x88>
 800b5ea:	4608      	mov	r0, r1
 800b5ec:	9205      	str	r2, [sp, #20]
 800b5ee:	9104      	str	r1, [sp, #16]
 800b5f0:	f7ff fd5e 	bl	800b0b0 <__hexdig_fun>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d14f      	bne.n	800b698 <__hexnan+0xe4>
 800b5f8:	9904      	ldr	r1, [sp, #16]
 800b5fa:	9a05      	ldr	r2, [sp, #20]
 800b5fc:	2920      	cmp	r1, #32
 800b5fe:	d818      	bhi.n	800b632 <__hexnan+0x7e>
 800b600:	9b02      	ldr	r3, [sp, #8]
 800b602:	459b      	cmp	fp, r3
 800b604:	dd13      	ble.n	800b62e <__hexnan+0x7a>
 800b606:	454c      	cmp	r4, r9
 800b608:	d206      	bcs.n	800b618 <__hexnan+0x64>
 800b60a:	2d07      	cmp	r5, #7
 800b60c:	dc04      	bgt.n	800b618 <__hexnan+0x64>
 800b60e:	462a      	mov	r2, r5
 800b610:	4649      	mov	r1, r9
 800b612:	4620      	mov	r0, r4
 800b614:	f7ff ffa8 	bl	800b568 <L_shift>
 800b618:	4544      	cmp	r4, r8
 800b61a:	d950      	bls.n	800b6be <__hexnan+0x10a>
 800b61c:	2300      	movs	r3, #0
 800b61e:	f1a4 0904 	sub.w	r9, r4, #4
 800b622:	f844 3c04 	str.w	r3, [r4, #-4]
 800b626:	f8cd b008 	str.w	fp, [sp, #8]
 800b62a:	464c      	mov	r4, r9
 800b62c:	461d      	mov	r5, r3
 800b62e:	9a03      	ldr	r2, [sp, #12]
 800b630:	e7d7      	b.n	800b5e2 <__hexnan+0x2e>
 800b632:	2929      	cmp	r1, #41	; 0x29
 800b634:	d156      	bne.n	800b6e4 <__hexnan+0x130>
 800b636:	3202      	adds	r2, #2
 800b638:	f8ca 2000 	str.w	r2, [sl]
 800b63c:	f1bb 0f00 	cmp.w	fp, #0
 800b640:	d050      	beq.n	800b6e4 <__hexnan+0x130>
 800b642:	454c      	cmp	r4, r9
 800b644:	d206      	bcs.n	800b654 <__hexnan+0xa0>
 800b646:	2d07      	cmp	r5, #7
 800b648:	dc04      	bgt.n	800b654 <__hexnan+0xa0>
 800b64a:	462a      	mov	r2, r5
 800b64c:	4649      	mov	r1, r9
 800b64e:	4620      	mov	r0, r4
 800b650:	f7ff ff8a 	bl	800b568 <L_shift>
 800b654:	4544      	cmp	r4, r8
 800b656:	d934      	bls.n	800b6c2 <__hexnan+0x10e>
 800b658:	f1a8 0204 	sub.w	r2, r8, #4
 800b65c:	4623      	mov	r3, r4
 800b65e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b662:	f842 1f04 	str.w	r1, [r2, #4]!
 800b666:	429f      	cmp	r7, r3
 800b668:	d2f9      	bcs.n	800b65e <__hexnan+0xaa>
 800b66a:	1b3b      	subs	r3, r7, r4
 800b66c:	f023 0303 	bic.w	r3, r3, #3
 800b670:	3304      	adds	r3, #4
 800b672:	3401      	adds	r4, #1
 800b674:	3e03      	subs	r6, #3
 800b676:	42b4      	cmp	r4, r6
 800b678:	bf88      	it	hi
 800b67a:	2304      	movhi	r3, #4
 800b67c:	4443      	add	r3, r8
 800b67e:	2200      	movs	r2, #0
 800b680:	f843 2b04 	str.w	r2, [r3], #4
 800b684:	429f      	cmp	r7, r3
 800b686:	d2fb      	bcs.n	800b680 <__hexnan+0xcc>
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	b91b      	cbnz	r3, 800b694 <__hexnan+0xe0>
 800b68c:	4547      	cmp	r7, r8
 800b68e:	d127      	bne.n	800b6e0 <__hexnan+0x12c>
 800b690:	2301      	movs	r3, #1
 800b692:	603b      	str	r3, [r7, #0]
 800b694:	2005      	movs	r0, #5
 800b696:	e026      	b.n	800b6e6 <__hexnan+0x132>
 800b698:	3501      	adds	r5, #1
 800b69a:	2d08      	cmp	r5, #8
 800b69c:	f10b 0b01 	add.w	fp, fp, #1
 800b6a0:	dd06      	ble.n	800b6b0 <__hexnan+0xfc>
 800b6a2:	4544      	cmp	r4, r8
 800b6a4:	d9c3      	bls.n	800b62e <__hexnan+0x7a>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6ac:	2501      	movs	r5, #1
 800b6ae:	3c04      	subs	r4, #4
 800b6b0:	6822      	ldr	r2, [r4, #0]
 800b6b2:	f000 000f 	and.w	r0, r0, #15
 800b6b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b6ba:	6022      	str	r2, [r4, #0]
 800b6bc:	e7b7      	b.n	800b62e <__hexnan+0x7a>
 800b6be:	2508      	movs	r5, #8
 800b6c0:	e7b5      	b.n	800b62e <__hexnan+0x7a>
 800b6c2:	9b01      	ldr	r3, [sp, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d0df      	beq.n	800b688 <__hexnan+0xd4>
 800b6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6cc:	f1c3 0320 	rsb	r3, r3, #32
 800b6d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6d8:	401a      	ands	r2, r3
 800b6da:	f846 2c04 	str.w	r2, [r6, #-4]
 800b6de:	e7d3      	b.n	800b688 <__hexnan+0xd4>
 800b6e0:	3f04      	subs	r7, #4
 800b6e2:	e7d1      	b.n	800b688 <__hexnan+0xd4>
 800b6e4:	2004      	movs	r0, #4
 800b6e6:	b007      	add	sp, #28
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6ec <_localeconv_r>:
 800b6ec:	4800      	ldr	r0, [pc, #0]	; (800b6f0 <_localeconv_r+0x4>)
 800b6ee:	4770      	bx	lr
 800b6f0:	20000174 	.word	0x20000174

0800b6f4 <_lseek_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4d07      	ldr	r5, [pc, #28]	; (800b714 <_lseek_r+0x20>)
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	4608      	mov	r0, r1
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	2200      	movs	r2, #0
 800b700:	602a      	str	r2, [r5, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	f7f7 f82a 	bl	800275c <_lseek>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	d102      	bne.n	800b712 <_lseek_r+0x1e>
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	b103      	cbz	r3, 800b712 <_lseek_r+0x1e>
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	bd38      	pop	{r3, r4, r5, pc}
 800b714:	20004fb0 	.word	0x20004fb0

0800b718 <__ascii_mbtowc>:
 800b718:	b082      	sub	sp, #8
 800b71a:	b901      	cbnz	r1, 800b71e <__ascii_mbtowc+0x6>
 800b71c:	a901      	add	r1, sp, #4
 800b71e:	b142      	cbz	r2, 800b732 <__ascii_mbtowc+0x1a>
 800b720:	b14b      	cbz	r3, 800b736 <__ascii_mbtowc+0x1e>
 800b722:	7813      	ldrb	r3, [r2, #0]
 800b724:	600b      	str	r3, [r1, #0]
 800b726:	7812      	ldrb	r2, [r2, #0]
 800b728:	1e10      	subs	r0, r2, #0
 800b72a:	bf18      	it	ne
 800b72c:	2001      	movne	r0, #1
 800b72e:	b002      	add	sp, #8
 800b730:	4770      	bx	lr
 800b732:	4610      	mov	r0, r2
 800b734:	e7fb      	b.n	800b72e <__ascii_mbtowc+0x16>
 800b736:	f06f 0001 	mvn.w	r0, #1
 800b73a:	e7f8      	b.n	800b72e <__ascii_mbtowc+0x16>

0800b73c <__malloc_lock>:
 800b73c:	4801      	ldr	r0, [pc, #4]	; (800b744 <__malloc_lock+0x8>)
 800b73e:	f001 bc6b 	b.w	800d018 <__retarget_lock_acquire_recursive>
 800b742:	bf00      	nop
 800b744:	20004fb4 	.word	0x20004fb4

0800b748 <__malloc_unlock>:
 800b748:	4801      	ldr	r0, [pc, #4]	; (800b750 <__malloc_unlock+0x8>)
 800b74a:	f001 bc66 	b.w	800d01a <__retarget_lock_release_recursive>
 800b74e:	bf00      	nop
 800b750:	20004fb4 	.word	0x20004fb4

0800b754 <_Balloc>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b758:	4604      	mov	r4, r0
 800b75a:	460d      	mov	r5, r1
 800b75c:	b976      	cbnz	r6, 800b77c <_Balloc+0x28>
 800b75e:	2010      	movs	r0, #16
 800b760:	f7fc fec6 	bl	80084f0 <malloc>
 800b764:	4602      	mov	r2, r0
 800b766:	6260      	str	r0, [r4, #36]	; 0x24
 800b768:	b920      	cbnz	r0, 800b774 <_Balloc+0x20>
 800b76a:	4b18      	ldr	r3, [pc, #96]	; (800b7cc <_Balloc+0x78>)
 800b76c:	4818      	ldr	r0, [pc, #96]	; (800b7d0 <_Balloc+0x7c>)
 800b76e:	2166      	movs	r1, #102	; 0x66
 800b770:	f001 fa6a 	bl	800cc48 <__assert_func>
 800b774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b778:	6006      	str	r6, [r0, #0]
 800b77a:	60c6      	str	r6, [r0, #12]
 800b77c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b77e:	68f3      	ldr	r3, [r6, #12]
 800b780:	b183      	cbz	r3, 800b7a4 <_Balloc+0x50>
 800b782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b78a:	b9b8      	cbnz	r0, 800b7bc <_Balloc+0x68>
 800b78c:	2101      	movs	r1, #1
 800b78e:	fa01 f605 	lsl.w	r6, r1, r5
 800b792:	1d72      	adds	r2, r6, #5
 800b794:	0092      	lsls	r2, r2, #2
 800b796:	4620      	mov	r0, r4
 800b798:	f000 fc9d 	bl	800c0d6 <_calloc_r>
 800b79c:	b160      	cbz	r0, 800b7b8 <_Balloc+0x64>
 800b79e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7a2:	e00e      	b.n	800b7c2 <_Balloc+0x6e>
 800b7a4:	2221      	movs	r2, #33	; 0x21
 800b7a6:	2104      	movs	r1, #4
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 fc94 	bl	800c0d6 <_calloc_r>
 800b7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7b0:	60f0      	str	r0, [r6, #12]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e4      	bne.n	800b782 <_Balloc+0x2e>
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}
 800b7bc:	6802      	ldr	r2, [r0, #0]
 800b7be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7c8:	e7f7      	b.n	800b7ba <_Balloc+0x66>
 800b7ca:	bf00      	nop
 800b7cc:	0800e206 	.word	0x0800e206
 800b7d0:	0800e304 	.word	0x0800e304

0800b7d4 <_Bfree>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7d8:	4605      	mov	r5, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	b976      	cbnz	r6, 800b7fc <_Bfree+0x28>
 800b7de:	2010      	movs	r0, #16
 800b7e0:	f7fc fe86 	bl	80084f0 <malloc>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	6268      	str	r0, [r5, #36]	; 0x24
 800b7e8:	b920      	cbnz	r0, 800b7f4 <_Bfree+0x20>
 800b7ea:	4b09      	ldr	r3, [pc, #36]	; (800b810 <_Bfree+0x3c>)
 800b7ec:	4809      	ldr	r0, [pc, #36]	; (800b814 <_Bfree+0x40>)
 800b7ee:	218a      	movs	r1, #138	; 0x8a
 800b7f0:	f001 fa2a 	bl	800cc48 <__assert_func>
 800b7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7f8:	6006      	str	r6, [r0, #0]
 800b7fa:	60c6      	str	r6, [r0, #12]
 800b7fc:	b13c      	cbz	r4, 800b80e <_Bfree+0x3a>
 800b7fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b800:	6862      	ldr	r2, [r4, #4]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b808:	6021      	str	r1, [r4, #0]
 800b80a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	0800e206 	.word	0x0800e206
 800b814:	0800e304 	.word	0x0800e304

0800b818 <__multadd>:
 800b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81c:	690d      	ldr	r5, [r1, #16]
 800b81e:	4607      	mov	r7, r0
 800b820:	460c      	mov	r4, r1
 800b822:	461e      	mov	r6, r3
 800b824:	f101 0c14 	add.w	ip, r1, #20
 800b828:	2000      	movs	r0, #0
 800b82a:	f8dc 3000 	ldr.w	r3, [ip]
 800b82e:	b299      	uxth	r1, r3
 800b830:	fb02 6101 	mla	r1, r2, r1, r6
 800b834:	0c1e      	lsrs	r6, r3, #16
 800b836:	0c0b      	lsrs	r3, r1, #16
 800b838:	fb02 3306 	mla	r3, r2, r6, r3
 800b83c:	b289      	uxth	r1, r1
 800b83e:	3001      	adds	r0, #1
 800b840:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b844:	4285      	cmp	r5, r0
 800b846:	f84c 1b04 	str.w	r1, [ip], #4
 800b84a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b84e:	dcec      	bgt.n	800b82a <__multadd+0x12>
 800b850:	b30e      	cbz	r6, 800b896 <__multadd+0x7e>
 800b852:	68a3      	ldr	r3, [r4, #8]
 800b854:	42ab      	cmp	r3, r5
 800b856:	dc19      	bgt.n	800b88c <__multadd+0x74>
 800b858:	6861      	ldr	r1, [r4, #4]
 800b85a:	4638      	mov	r0, r7
 800b85c:	3101      	adds	r1, #1
 800b85e:	f7ff ff79 	bl	800b754 <_Balloc>
 800b862:	4680      	mov	r8, r0
 800b864:	b928      	cbnz	r0, 800b872 <__multadd+0x5a>
 800b866:	4602      	mov	r2, r0
 800b868:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <__multadd+0x84>)
 800b86a:	480d      	ldr	r0, [pc, #52]	; (800b8a0 <__multadd+0x88>)
 800b86c:	21b5      	movs	r1, #181	; 0xb5
 800b86e:	f001 f9eb 	bl	800cc48 <__assert_func>
 800b872:	6922      	ldr	r2, [r4, #16]
 800b874:	3202      	adds	r2, #2
 800b876:	f104 010c 	add.w	r1, r4, #12
 800b87a:	0092      	lsls	r2, r2, #2
 800b87c:	300c      	adds	r0, #12
 800b87e:	f7fc fe47 	bl	8008510 <memcpy>
 800b882:	4621      	mov	r1, r4
 800b884:	4638      	mov	r0, r7
 800b886:	f7ff ffa5 	bl	800b7d4 <_Bfree>
 800b88a:	4644      	mov	r4, r8
 800b88c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b890:	3501      	adds	r5, #1
 800b892:	615e      	str	r6, [r3, #20]
 800b894:	6125      	str	r5, [r4, #16]
 800b896:	4620      	mov	r0, r4
 800b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89c:	0800e278 	.word	0x0800e278
 800b8a0:	0800e304 	.word	0x0800e304

0800b8a4 <__s2b>:
 800b8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	4615      	mov	r5, r2
 800b8ac:	461f      	mov	r7, r3
 800b8ae:	2209      	movs	r2, #9
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	db09      	blt.n	800b8d4 <__s2b+0x30>
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f7ff ff47 	bl	800b754 <_Balloc>
 800b8c6:	b940      	cbnz	r0, 800b8da <__s2b+0x36>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	4b19      	ldr	r3, [pc, #100]	; (800b930 <__s2b+0x8c>)
 800b8cc:	4819      	ldr	r0, [pc, #100]	; (800b934 <__s2b+0x90>)
 800b8ce:	21ce      	movs	r1, #206	; 0xce
 800b8d0:	f001 f9ba 	bl	800cc48 <__assert_func>
 800b8d4:	0052      	lsls	r2, r2, #1
 800b8d6:	3101      	adds	r1, #1
 800b8d8:	e7f0      	b.n	800b8bc <__s2b+0x18>
 800b8da:	9b08      	ldr	r3, [sp, #32]
 800b8dc:	6143      	str	r3, [r0, #20]
 800b8de:	2d09      	cmp	r5, #9
 800b8e0:	f04f 0301 	mov.w	r3, #1
 800b8e4:	6103      	str	r3, [r0, #16]
 800b8e6:	dd16      	ble.n	800b916 <__s2b+0x72>
 800b8e8:	f104 0909 	add.w	r9, r4, #9
 800b8ec:	46c8      	mov	r8, r9
 800b8ee:	442c      	add	r4, r5
 800b8f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	3b30      	subs	r3, #48	; 0x30
 800b8f8:	220a      	movs	r2, #10
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f7ff ff8c 	bl	800b818 <__multadd>
 800b900:	45a0      	cmp	r8, r4
 800b902:	d1f5      	bne.n	800b8f0 <__s2b+0x4c>
 800b904:	f1a5 0408 	sub.w	r4, r5, #8
 800b908:	444c      	add	r4, r9
 800b90a:	1b2d      	subs	r5, r5, r4
 800b90c:	1963      	adds	r3, r4, r5
 800b90e:	42bb      	cmp	r3, r7
 800b910:	db04      	blt.n	800b91c <__s2b+0x78>
 800b912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b916:	340a      	adds	r4, #10
 800b918:	2509      	movs	r5, #9
 800b91a:	e7f6      	b.n	800b90a <__s2b+0x66>
 800b91c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b920:	4601      	mov	r1, r0
 800b922:	3b30      	subs	r3, #48	; 0x30
 800b924:	220a      	movs	r2, #10
 800b926:	4630      	mov	r0, r6
 800b928:	f7ff ff76 	bl	800b818 <__multadd>
 800b92c:	e7ee      	b.n	800b90c <__s2b+0x68>
 800b92e:	bf00      	nop
 800b930:	0800e278 	.word	0x0800e278
 800b934:	0800e304 	.word	0x0800e304

0800b938 <__hi0bits>:
 800b938:	0c03      	lsrs	r3, r0, #16
 800b93a:	041b      	lsls	r3, r3, #16
 800b93c:	b9d3      	cbnz	r3, 800b974 <__hi0bits+0x3c>
 800b93e:	0400      	lsls	r0, r0, #16
 800b940:	2310      	movs	r3, #16
 800b942:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b946:	bf04      	itt	eq
 800b948:	0200      	lsleq	r0, r0, #8
 800b94a:	3308      	addeq	r3, #8
 800b94c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b950:	bf04      	itt	eq
 800b952:	0100      	lsleq	r0, r0, #4
 800b954:	3304      	addeq	r3, #4
 800b956:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b95a:	bf04      	itt	eq
 800b95c:	0080      	lsleq	r0, r0, #2
 800b95e:	3302      	addeq	r3, #2
 800b960:	2800      	cmp	r0, #0
 800b962:	db05      	blt.n	800b970 <__hi0bits+0x38>
 800b964:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b968:	f103 0301 	add.w	r3, r3, #1
 800b96c:	bf08      	it	eq
 800b96e:	2320      	moveq	r3, #32
 800b970:	4618      	mov	r0, r3
 800b972:	4770      	bx	lr
 800b974:	2300      	movs	r3, #0
 800b976:	e7e4      	b.n	800b942 <__hi0bits+0xa>

0800b978 <__lo0bits>:
 800b978:	6803      	ldr	r3, [r0, #0]
 800b97a:	f013 0207 	ands.w	r2, r3, #7
 800b97e:	4601      	mov	r1, r0
 800b980:	d00b      	beq.n	800b99a <__lo0bits+0x22>
 800b982:	07da      	lsls	r2, r3, #31
 800b984:	d423      	bmi.n	800b9ce <__lo0bits+0x56>
 800b986:	0798      	lsls	r0, r3, #30
 800b988:	bf49      	itett	mi
 800b98a:	085b      	lsrmi	r3, r3, #1
 800b98c:	089b      	lsrpl	r3, r3, #2
 800b98e:	2001      	movmi	r0, #1
 800b990:	600b      	strmi	r3, [r1, #0]
 800b992:	bf5c      	itt	pl
 800b994:	600b      	strpl	r3, [r1, #0]
 800b996:	2002      	movpl	r0, #2
 800b998:	4770      	bx	lr
 800b99a:	b298      	uxth	r0, r3
 800b99c:	b9a8      	cbnz	r0, 800b9ca <__lo0bits+0x52>
 800b99e:	0c1b      	lsrs	r3, r3, #16
 800b9a0:	2010      	movs	r0, #16
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	b90a      	cbnz	r2, 800b9aa <__lo0bits+0x32>
 800b9a6:	3008      	adds	r0, #8
 800b9a8:	0a1b      	lsrs	r3, r3, #8
 800b9aa:	071a      	lsls	r2, r3, #28
 800b9ac:	bf04      	itt	eq
 800b9ae:	091b      	lsreq	r3, r3, #4
 800b9b0:	3004      	addeq	r0, #4
 800b9b2:	079a      	lsls	r2, r3, #30
 800b9b4:	bf04      	itt	eq
 800b9b6:	089b      	lsreq	r3, r3, #2
 800b9b8:	3002      	addeq	r0, #2
 800b9ba:	07da      	lsls	r2, r3, #31
 800b9bc:	d403      	bmi.n	800b9c6 <__lo0bits+0x4e>
 800b9be:	085b      	lsrs	r3, r3, #1
 800b9c0:	f100 0001 	add.w	r0, r0, #1
 800b9c4:	d005      	beq.n	800b9d2 <__lo0bits+0x5a>
 800b9c6:	600b      	str	r3, [r1, #0]
 800b9c8:	4770      	bx	lr
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	e7e9      	b.n	800b9a2 <__lo0bits+0x2a>
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	4770      	bx	lr
 800b9d2:	2020      	movs	r0, #32
 800b9d4:	4770      	bx	lr
	...

0800b9d8 <__i2b>:
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	460c      	mov	r4, r1
 800b9dc:	2101      	movs	r1, #1
 800b9de:	f7ff feb9 	bl	800b754 <_Balloc>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	b928      	cbnz	r0, 800b9f2 <__i2b+0x1a>
 800b9e6:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <__i2b+0x24>)
 800b9e8:	4805      	ldr	r0, [pc, #20]	; (800ba00 <__i2b+0x28>)
 800b9ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9ee:	f001 f92b 	bl	800cc48 <__assert_func>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	6144      	str	r4, [r0, #20]
 800b9f6:	6103      	str	r3, [r0, #16]
 800b9f8:	bd10      	pop	{r4, pc}
 800b9fa:	bf00      	nop
 800b9fc:	0800e278 	.word	0x0800e278
 800ba00:	0800e304 	.word	0x0800e304

0800ba04 <__multiply>:
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	4691      	mov	r9, r2
 800ba0a:	690a      	ldr	r2, [r1, #16]
 800ba0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	bfb8      	it	lt
 800ba14:	460b      	movlt	r3, r1
 800ba16:	460c      	mov	r4, r1
 800ba18:	bfbc      	itt	lt
 800ba1a:	464c      	movlt	r4, r9
 800ba1c:	4699      	movlt	r9, r3
 800ba1e:	6927      	ldr	r7, [r4, #16]
 800ba20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba24:	68a3      	ldr	r3, [r4, #8]
 800ba26:	6861      	ldr	r1, [r4, #4]
 800ba28:	eb07 060a 	add.w	r6, r7, sl
 800ba2c:	42b3      	cmp	r3, r6
 800ba2e:	b085      	sub	sp, #20
 800ba30:	bfb8      	it	lt
 800ba32:	3101      	addlt	r1, #1
 800ba34:	f7ff fe8e 	bl	800b754 <_Balloc>
 800ba38:	b930      	cbnz	r0, 800ba48 <__multiply+0x44>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	4b44      	ldr	r3, [pc, #272]	; (800bb50 <__multiply+0x14c>)
 800ba3e:	4845      	ldr	r0, [pc, #276]	; (800bb54 <__multiply+0x150>)
 800ba40:	f240 115d 	movw	r1, #349	; 0x15d
 800ba44:	f001 f900 	bl	800cc48 <__assert_func>
 800ba48:	f100 0514 	add.w	r5, r0, #20
 800ba4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba50:	462b      	mov	r3, r5
 800ba52:	2200      	movs	r2, #0
 800ba54:	4543      	cmp	r3, r8
 800ba56:	d321      	bcc.n	800ba9c <__multiply+0x98>
 800ba58:	f104 0314 	add.w	r3, r4, #20
 800ba5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba60:	f109 0314 	add.w	r3, r9, #20
 800ba64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba68:	9202      	str	r2, [sp, #8]
 800ba6a:	1b3a      	subs	r2, r7, r4
 800ba6c:	3a15      	subs	r2, #21
 800ba6e:	f022 0203 	bic.w	r2, r2, #3
 800ba72:	3204      	adds	r2, #4
 800ba74:	f104 0115 	add.w	r1, r4, #21
 800ba78:	428f      	cmp	r7, r1
 800ba7a:	bf38      	it	cc
 800ba7c:	2204      	movcc	r2, #4
 800ba7e:	9201      	str	r2, [sp, #4]
 800ba80:	9a02      	ldr	r2, [sp, #8]
 800ba82:	9303      	str	r3, [sp, #12]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d80c      	bhi.n	800baa2 <__multiply+0x9e>
 800ba88:	2e00      	cmp	r6, #0
 800ba8a:	dd03      	ble.n	800ba94 <__multiply+0x90>
 800ba8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d05a      	beq.n	800bb4a <__multiply+0x146>
 800ba94:	6106      	str	r6, [r0, #16]
 800ba96:	b005      	add	sp, #20
 800ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9c:	f843 2b04 	str.w	r2, [r3], #4
 800baa0:	e7d8      	b.n	800ba54 <__multiply+0x50>
 800baa2:	f8b3 a000 	ldrh.w	sl, [r3]
 800baa6:	f1ba 0f00 	cmp.w	sl, #0
 800baaa:	d024      	beq.n	800baf6 <__multiply+0xf2>
 800baac:	f104 0e14 	add.w	lr, r4, #20
 800bab0:	46a9      	mov	r9, r5
 800bab2:	f04f 0c00 	mov.w	ip, #0
 800bab6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800baba:	f8d9 1000 	ldr.w	r1, [r9]
 800babe:	fa1f fb82 	uxth.w	fp, r2
 800bac2:	b289      	uxth	r1, r1
 800bac4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bac8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bacc:	f8d9 2000 	ldr.w	r2, [r9]
 800bad0:	4461      	add	r1, ip
 800bad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bad6:	fb0a c20b 	mla	r2, sl, fp, ip
 800bada:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bade:	b289      	uxth	r1, r1
 800bae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bae4:	4577      	cmp	r7, lr
 800bae6:	f849 1b04 	str.w	r1, [r9], #4
 800baea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800baee:	d8e2      	bhi.n	800bab6 <__multiply+0xb2>
 800baf0:	9a01      	ldr	r2, [sp, #4]
 800baf2:	f845 c002 	str.w	ip, [r5, r2]
 800baf6:	9a03      	ldr	r2, [sp, #12]
 800baf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bafc:	3304      	adds	r3, #4
 800bafe:	f1b9 0f00 	cmp.w	r9, #0
 800bb02:	d020      	beq.n	800bb46 <__multiply+0x142>
 800bb04:	6829      	ldr	r1, [r5, #0]
 800bb06:	f104 0c14 	add.w	ip, r4, #20
 800bb0a:	46ae      	mov	lr, r5
 800bb0c:	f04f 0a00 	mov.w	sl, #0
 800bb10:	f8bc b000 	ldrh.w	fp, [ip]
 800bb14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb18:	fb09 220b 	mla	r2, r9, fp, r2
 800bb1c:	4492      	add	sl, r2
 800bb1e:	b289      	uxth	r1, r1
 800bb20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bb24:	f84e 1b04 	str.w	r1, [lr], #4
 800bb28:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb2c:	f8be 1000 	ldrh.w	r1, [lr]
 800bb30:	0c12      	lsrs	r2, r2, #16
 800bb32:	fb09 1102 	mla	r1, r9, r2, r1
 800bb36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bb3a:	4567      	cmp	r7, ip
 800bb3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb40:	d8e6      	bhi.n	800bb10 <__multiply+0x10c>
 800bb42:	9a01      	ldr	r2, [sp, #4]
 800bb44:	50a9      	str	r1, [r5, r2]
 800bb46:	3504      	adds	r5, #4
 800bb48:	e79a      	b.n	800ba80 <__multiply+0x7c>
 800bb4a:	3e01      	subs	r6, #1
 800bb4c:	e79c      	b.n	800ba88 <__multiply+0x84>
 800bb4e:	bf00      	nop
 800bb50:	0800e278 	.word	0x0800e278
 800bb54:	0800e304 	.word	0x0800e304

0800bb58 <__pow5mult>:
 800bb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb5c:	4615      	mov	r5, r2
 800bb5e:	f012 0203 	ands.w	r2, r2, #3
 800bb62:	4606      	mov	r6, r0
 800bb64:	460f      	mov	r7, r1
 800bb66:	d007      	beq.n	800bb78 <__pow5mult+0x20>
 800bb68:	4c25      	ldr	r4, [pc, #148]	; (800bc00 <__pow5mult+0xa8>)
 800bb6a:	3a01      	subs	r2, #1
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb72:	f7ff fe51 	bl	800b818 <__multadd>
 800bb76:	4607      	mov	r7, r0
 800bb78:	10ad      	asrs	r5, r5, #2
 800bb7a:	d03d      	beq.n	800bbf8 <__pow5mult+0xa0>
 800bb7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb7e:	b97c      	cbnz	r4, 800bba0 <__pow5mult+0x48>
 800bb80:	2010      	movs	r0, #16
 800bb82:	f7fc fcb5 	bl	80084f0 <malloc>
 800bb86:	4602      	mov	r2, r0
 800bb88:	6270      	str	r0, [r6, #36]	; 0x24
 800bb8a:	b928      	cbnz	r0, 800bb98 <__pow5mult+0x40>
 800bb8c:	4b1d      	ldr	r3, [pc, #116]	; (800bc04 <__pow5mult+0xac>)
 800bb8e:	481e      	ldr	r0, [pc, #120]	; (800bc08 <__pow5mult+0xb0>)
 800bb90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb94:	f001 f858 	bl	800cc48 <__assert_func>
 800bb98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb9c:	6004      	str	r4, [r0, #0]
 800bb9e:	60c4      	str	r4, [r0, #12]
 800bba0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bba8:	b94c      	cbnz	r4, 800bbbe <__pow5mult+0x66>
 800bbaa:	f240 2171 	movw	r1, #625	; 0x271
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7ff ff12 	bl	800b9d8 <__i2b>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbba:	4604      	mov	r4, r0
 800bbbc:	6003      	str	r3, [r0, #0]
 800bbbe:	f04f 0900 	mov.w	r9, #0
 800bbc2:	07eb      	lsls	r3, r5, #31
 800bbc4:	d50a      	bpl.n	800bbdc <__pow5mult+0x84>
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	4622      	mov	r2, r4
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f7ff ff1a 	bl	800ba04 <__multiply>
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f7ff fdfd 	bl	800b7d4 <_Bfree>
 800bbda:	4647      	mov	r7, r8
 800bbdc:	106d      	asrs	r5, r5, #1
 800bbde:	d00b      	beq.n	800bbf8 <__pow5mult+0xa0>
 800bbe0:	6820      	ldr	r0, [r4, #0]
 800bbe2:	b938      	cbnz	r0, 800bbf4 <__pow5mult+0x9c>
 800bbe4:	4622      	mov	r2, r4
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f7ff ff0b 	bl	800ba04 <__multiply>
 800bbee:	6020      	str	r0, [r4, #0]
 800bbf0:	f8c0 9000 	str.w	r9, [r0]
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	e7e4      	b.n	800bbc2 <__pow5mult+0x6a>
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfe:	bf00      	nop
 800bc00:	0800e450 	.word	0x0800e450
 800bc04:	0800e206 	.word	0x0800e206
 800bc08:	0800e304 	.word	0x0800e304

0800bc0c <__lshift>:
 800bc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc10:	460c      	mov	r4, r1
 800bc12:	6849      	ldr	r1, [r1, #4]
 800bc14:	6923      	ldr	r3, [r4, #16]
 800bc16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	4607      	mov	r7, r0
 800bc1e:	4691      	mov	r9, r2
 800bc20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc24:	f108 0601 	add.w	r6, r8, #1
 800bc28:	42b3      	cmp	r3, r6
 800bc2a:	db0b      	blt.n	800bc44 <__lshift+0x38>
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	f7ff fd91 	bl	800b754 <_Balloc>
 800bc32:	4605      	mov	r5, r0
 800bc34:	b948      	cbnz	r0, 800bc4a <__lshift+0x3e>
 800bc36:	4602      	mov	r2, r0
 800bc38:	4b2a      	ldr	r3, [pc, #168]	; (800bce4 <__lshift+0xd8>)
 800bc3a:	482b      	ldr	r0, [pc, #172]	; (800bce8 <__lshift+0xdc>)
 800bc3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc40:	f001 f802 	bl	800cc48 <__assert_func>
 800bc44:	3101      	adds	r1, #1
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	e7ee      	b.n	800bc28 <__lshift+0x1c>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f100 0114 	add.w	r1, r0, #20
 800bc50:	f100 0210 	add.w	r2, r0, #16
 800bc54:	4618      	mov	r0, r3
 800bc56:	4553      	cmp	r3, sl
 800bc58:	db37      	blt.n	800bcca <__lshift+0xbe>
 800bc5a:	6920      	ldr	r0, [r4, #16]
 800bc5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc60:	f104 0314 	add.w	r3, r4, #20
 800bc64:	f019 091f 	ands.w	r9, r9, #31
 800bc68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc70:	d02f      	beq.n	800bcd2 <__lshift+0xc6>
 800bc72:	f1c9 0e20 	rsb	lr, r9, #32
 800bc76:	468a      	mov	sl, r1
 800bc78:	f04f 0c00 	mov.w	ip, #0
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	fa02 f209 	lsl.w	r2, r2, r9
 800bc82:	ea42 020c 	orr.w	r2, r2, ip
 800bc86:	f84a 2b04 	str.w	r2, [sl], #4
 800bc8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc8e:	4298      	cmp	r0, r3
 800bc90:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc94:	d8f2      	bhi.n	800bc7c <__lshift+0x70>
 800bc96:	1b03      	subs	r3, r0, r4
 800bc98:	3b15      	subs	r3, #21
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	3304      	adds	r3, #4
 800bca0:	f104 0215 	add.w	r2, r4, #21
 800bca4:	4290      	cmp	r0, r2
 800bca6:	bf38      	it	cc
 800bca8:	2304      	movcc	r3, #4
 800bcaa:	f841 c003 	str.w	ip, [r1, r3]
 800bcae:	f1bc 0f00 	cmp.w	ip, #0
 800bcb2:	d001      	beq.n	800bcb8 <__lshift+0xac>
 800bcb4:	f108 0602 	add.w	r6, r8, #2
 800bcb8:	3e01      	subs	r6, #1
 800bcba:	4638      	mov	r0, r7
 800bcbc:	612e      	str	r6, [r5, #16]
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	f7ff fd88 	bl	800b7d4 <_Bfree>
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcca:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcce:	3301      	adds	r3, #1
 800bcd0:	e7c1      	b.n	800bc56 <__lshift+0x4a>
 800bcd2:	3904      	subs	r1, #4
 800bcd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcdc:	4298      	cmp	r0, r3
 800bcde:	d8f9      	bhi.n	800bcd4 <__lshift+0xc8>
 800bce0:	e7ea      	b.n	800bcb8 <__lshift+0xac>
 800bce2:	bf00      	nop
 800bce4:	0800e278 	.word	0x0800e278
 800bce8:	0800e304 	.word	0x0800e304

0800bcec <__mcmp>:
 800bcec:	b530      	push	{r4, r5, lr}
 800bcee:	6902      	ldr	r2, [r0, #16]
 800bcf0:	690c      	ldr	r4, [r1, #16]
 800bcf2:	1b12      	subs	r2, r2, r4
 800bcf4:	d10e      	bne.n	800bd14 <__mcmp+0x28>
 800bcf6:	f100 0314 	add.w	r3, r0, #20
 800bcfa:	3114      	adds	r1, #20
 800bcfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd0c:	42a5      	cmp	r5, r4
 800bd0e:	d003      	beq.n	800bd18 <__mcmp+0x2c>
 800bd10:	d305      	bcc.n	800bd1e <__mcmp+0x32>
 800bd12:	2201      	movs	r2, #1
 800bd14:	4610      	mov	r0, r2
 800bd16:	bd30      	pop	{r4, r5, pc}
 800bd18:	4283      	cmp	r3, r0
 800bd1a:	d3f3      	bcc.n	800bd04 <__mcmp+0x18>
 800bd1c:	e7fa      	b.n	800bd14 <__mcmp+0x28>
 800bd1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd22:	e7f7      	b.n	800bd14 <__mcmp+0x28>

0800bd24 <__mdiff>:
 800bd24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd28:	460c      	mov	r4, r1
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4620      	mov	r0, r4
 800bd30:	4690      	mov	r8, r2
 800bd32:	f7ff ffdb 	bl	800bcec <__mcmp>
 800bd36:	1e05      	subs	r5, r0, #0
 800bd38:	d110      	bne.n	800bd5c <__mdiff+0x38>
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7ff fd09 	bl	800b754 <_Balloc>
 800bd42:	b930      	cbnz	r0, 800bd52 <__mdiff+0x2e>
 800bd44:	4b3a      	ldr	r3, [pc, #232]	; (800be30 <__mdiff+0x10c>)
 800bd46:	4602      	mov	r2, r0
 800bd48:	f240 2132 	movw	r1, #562	; 0x232
 800bd4c:	4839      	ldr	r0, [pc, #228]	; (800be34 <__mdiff+0x110>)
 800bd4e:	f000 ff7b 	bl	800cc48 <__assert_func>
 800bd52:	2301      	movs	r3, #1
 800bd54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd5c:	bfa4      	itt	ge
 800bd5e:	4643      	movge	r3, r8
 800bd60:	46a0      	movge	r8, r4
 800bd62:	4630      	mov	r0, r6
 800bd64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd68:	bfa6      	itte	ge
 800bd6a:	461c      	movge	r4, r3
 800bd6c:	2500      	movge	r5, #0
 800bd6e:	2501      	movlt	r5, #1
 800bd70:	f7ff fcf0 	bl	800b754 <_Balloc>
 800bd74:	b920      	cbnz	r0, 800bd80 <__mdiff+0x5c>
 800bd76:	4b2e      	ldr	r3, [pc, #184]	; (800be30 <__mdiff+0x10c>)
 800bd78:	4602      	mov	r2, r0
 800bd7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd7e:	e7e5      	b.n	800bd4c <__mdiff+0x28>
 800bd80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd84:	6926      	ldr	r6, [r4, #16]
 800bd86:	60c5      	str	r5, [r0, #12]
 800bd88:	f104 0914 	add.w	r9, r4, #20
 800bd8c:	f108 0514 	add.w	r5, r8, #20
 800bd90:	f100 0e14 	add.w	lr, r0, #20
 800bd94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd9c:	f108 0210 	add.w	r2, r8, #16
 800bda0:	46f2      	mov	sl, lr
 800bda2:	2100      	movs	r1, #0
 800bda4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bda8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bdac:	fa1f f883 	uxth.w	r8, r3
 800bdb0:	fa11 f18b 	uxtah	r1, r1, fp
 800bdb4:	0c1b      	lsrs	r3, r3, #16
 800bdb6:	eba1 0808 	sub.w	r8, r1, r8
 800bdba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bdc2:	fa1f f888 	uxth.w	r8, r8
 800bdc6:	1419      	asrs	r1, r3, #16
 800bdc8:	454e      	cmp	r6, r9
 800bdca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bdce:	f84a 3b04 	str.w	r3, [sl], #4
 800bdd2:	d8e7      	bhi.n	800bda4 <__mdiff+0x80>
 800bdd4:	1b33      	subs	r3, r6, r4
 800bdd6:	3b15      	subs	r3, #21
 800bdd8:	f023 0303 	bic.w	r3, r3, #3
 800bddc:	3304      	adds	r3, #4
 800bdde:	3415      	adds	r4, #21
 800bde0:	42a6      	cmp	r6, r4
 800bde2:	bf38      	it	cc
 800bde4:	2304      	movcc	r3, #4
 800bde6:	441d      	add	r5, r3
 800bde8:	4473      	add	r3, lr
 800bdea:	469e      	mov	lr, r3
 800bdec:	462e      	mov	r6, r5
 800bdee:	4566      	cmp	r6, ip
 800bdf0:	d30e      	bcc.n	800be10 <__mdiff+0xec>
 800bdf2:	f10c 0203 	add.w	r2, ip, #3
 800bdf6:	1b52      	subs	r2, r2, r5
 800bdf8:	f022 0203 	bic.w	r2, r2, #3
 800bdfc:	3d03      	subs	r5, #3
 800bdfe:	45ac      	cmp	ip, r5
 800be00:	bf38      	it	cc
 800be02:	2200      	movcc	r2, #0
 800be04:	441a      	add	r2, r3
 800be06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be0a:	b17b      	cbz	r3, 800be2c <__mdiff+0x108>
 800be0c:	6107      	str	r7, [r0, #16]
 800be0e:	e7a3      	b.n	800bd58 <__mdiff+0x34>
 800be10:	f856 8b04 	ldr.w	r8, [r6], #4
 800be14:	fa11 f288 	uxtah	r2, r1, r8
 800be18:	1414      	asrs	r4, r2, #16
 800be1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be1e:	b292      	uxth	r2, r2
 800be20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be24:	f84e 2b04 	str.w	r2, [lr], #4
 800be28:	1421      	asrs	r1, r4, #16
 800be2a:	e7e0      	b.n	800bdee <__mdiff+0xca>
 800be2c:	3f01      	subs	r7, #1
 800be2e:	e7ea      	b.n	800be06 <__mdiff+0xe2>
 800be30:	0800e278 	.word	0x0800e278
 800be34:	0800e304 	.word	0x0800e304

0800be38 <__ulp>:
 800be38:	b082      	sub	sp, #8
 800be3a:	ed8d 0b00 	vstr	d0, [sp]
 800be3e:	9b01      	ldr	r3, [sp, #4]
 800be40:	4912      	ldr	r1, [pc, #72]	; (800be8c <__ulp+0x54>)
 800be42:	4019      	ands	r1, r3
 800be44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800be48:	2900      	cmp	r1, #0
 800be4a:	dd05      	ble.n	800be58 <__ulp+0x20>
 800be4c:	2200      	movs	r2, #0
 800be4e:	460b      	mov	r3, r1
 800be50:	ec43 2b10 	vmov	d0, r2, r3
 800be54:	b002      	add	sp, #8
 800be56:	4770      	bx	lr
 800be58:	4249      	negs	r1, r1
 800be5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800be5e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800be62:	f04f 0200 	mov.w	r2, #0
 800be66:	f04f 0300 	mov.w	r3, #0
 800be6a:	da04      	bge.n	800be76 <__ulp+0x3e>
 800be6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be70:	fa41 f300 	asr.w	r3, r1, r0
 800be74:	e7ec      	b.n	800be50 <__ulp+0x18>
 800be76:	f1a0 0114 	sub.w	r1, r0, #20
 800be7a:	291e      	cmp	r1, #30
 800be7c:	bfda      	itte	le
 800be7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800be82:	fa20 f101 	lsrle.w	r1, r0, r1
 800be86:	2101      	movgt	r1, #1
 800be88:	460a      	mov	r2, r1
 800be8a:	e7e1      	b.n	800be50 <__ulp+0x18>
 800be8c:	7ff00000 	.word	0x7ff00000

0800be90 <__b2d>:
 800be90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be92:	6905      	ldr	r5, [r0, #16]
 800be94:	f100 0714 	add.w	r7, r0, #20
 800be98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800be9c:	1f2e      	subs	r6, r5, #4
 800be9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bea2:	4620      	mov	r0, r4
 800bea4:	f7ff fd48 	bl	800b938 <__hi0bits>
 800bea8:	f1c0 0320 	rsb	r3, r0, #32
 800beac:	280a      	cmp	r0, #10
 800beae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bf2c <__b2d+0x9c>
 800beb2:	600b      	str	r3, [r1, #0]
 800beb4:	dc14      	bgt.n	800bee0 <__b2d+0x50>
 800beb6:	f1c0 0e0b 	rsb	lr, r0, #11
 800beba:	fa24 f10e 	lsr.w	r1, r4, lr
 800bebe:	42b7      	cmp	r7, r6
 800bec0:	ea41 030c 	orr.w	r3, r1, ip
 800bec4:	bf34      	ite	cc
 800bec6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800beca:	2100      	movcs	r1, #0
 800becc:	3015      	adds	r0, #21
 800bece:	fa04 f000 	lsl.w	r0, r4, r0
 800bed2:	fa21 f10e 	lsr.w	r1, r1, lr
 800bed6:	ea40 0201 	orr.w	r2, r0, r1
 800beda:	ec43 2b10 	vmov	d0, r2, r3
 800bede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee0:	42b7      	cmp	r7, r6
 800bee2:	bf3a      	itte	cc
 800bee4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bee8:	f1a5 0608 	subcc.w	r6, r5, #8
 800beec:	2100      	movcs	r1, #0
 800beee:	380b      	subs	r0, #11
 800bef0:	d017      	beq.n	800bf22 <__b2d+0x92>
 800bef2:	f1c0 0c20 	rsb	ip, r0, #32
 800bef6:	fa04 f500 	lsl.w	r5, r4, r0
 800befa:	42be      	cmp	r6, r7
 800befc:	fa21 f40c 	lsr.w	r4, r1, ip
 800bf00:	ea45 0504 	orr.w	r5, r5, r4
 800bf04:	bf8c      	ite	hi
 800bf06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bf0a:	2400      	movls	r4, #0
 800bf0c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bf10:	fa01 f000 	lsl.w	r0, r1, r0
 800bf14:	fa24 f40c 	lsr.w	r4, r4, ip
 800bf18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bf1c:	ea40 0204 	orr.w	r2, r0, r4
 800bf20:	e7db      	b.n	800beda <__b2d+0x4a>
 800bf22:	ea44 030c 	orr.w	r3, r4, ip
 800bf26:	460a      	mov	r2, r1
 800bf28:	e7d7      	b.n	800beda <__b2d+0x4a>
 800bf2a:	bf00      	nop
 800bf2c:	3ff00000 	.word	0x3ff00000

0800bf30 <__d2b>:
 800bf30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf34:	4689      	mov	r9, r1
 800bf36:	2101      	movs	r1, #1
 800bf38:	ec57 6b10 	vmov	r6, r7, d0
 800bf3c:	4690      	mov	r8, r2
 800bf3e:	f7ff fc09 	bl	800b754 <_Balloc>
 800bf42:	4604      	mov	r4, r0
 800bf44:	b930      	cbnz	r0, 800bf54 <__d2b+0x24>
 800bf46:	4602      	mov	r2, r0
 800bf48:	4b25      	ldr	r3, [pc, #148]	; (800bfe0 <__d2b+0xb0>)
 800bf4a:	4826      	ldr	r0, [pc, #152]	; (800bfe4 <__d2b+0xb4>)
 800bf4c:	f240 310a 	movw	r1, #778	; 0x30a
 800bf50:	f000 fe7a 	bl	800cc48 <__assert_func>
 800bf54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bf58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf5c:	bb35      	cbnz	r5, 800bfac <__d2b+0x7c>
 800bf5e:	2e00      	cmp	r6, #0
 800bf60:	9301      	str	r3, [sp, #4]
 800bf62:	d028      	beq.n	800bfb6 <__d2b+0x86>
 800bf64:	4668      	mov	r0, sp
 800bf66:	9600      	str	r6, [sp, #0]
 800bf68:	f7ff fd06 	bl	800b978 <__lo0bits>
 800bf6c:	9900      	ldr	r1, [sp, #0]
 800bf6e:	b300      	cbz	r0, 800bfb2 <__d2b+0x82>
 800bf70:	9a01      	ldr	r2, [sp, #4]
 800bf72:	f1c0 0320 	rsb	r3, r0, #32
 800bf76:	fa02 f303 	lsl.w	r3, r2, r3
 800bf7a:	430b      	orrs	r3, r1
 800bf7c:	40c2      	lsrs	r2, r0
 800bf7e:	6163      	str	r3, [r4, #20]
 800bf80:	9201      	str	r2, [sp, #4]
 800bf82:	9b01      	ldr	r3, [sp, #4]
 800bf84:	61a3      	str	r3, [r4, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	bf14      	ite	ne
 800bf8a:	2202      	movne	r2, #2
 800bf8c:	2201      	moveq	r2, #1
 800bf8e:	6122      	str	r2, [r4, #16]
 800bf90:	b1d5      	cbz	r5, 800bfc8 <__d2b+0x98>
 800bf92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf96:	4405      	add	r5, r0
 800bf98:	f8c9 5000 	str.w	r5, [r9]
 800bf9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bfa0:	f8c8 0000 	str.w	r0, [r8]
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	b003      	add	sp, #12
 800bfa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfb0:	e7d5      	b.n	800bf5e <__d2b+0x2e>
 800bfb2:	6161      	str	r1, [r4, #20]
 800bfb4:	e7e5      	b.n	800bf82 <__d2b+0x52>
 800bfb6:	a801      	add	r0, sp, #4
 800bfb8:	f7ff fcde 	bl	800b978 <__lo0bits>
 800bfbc:	9b01      	ldr	r3, [sp, #4]
 800bfbe:	6163      	str	r3, [r4, #20]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	6122      	str	r2, [r4, #16]
 800bfc4:	3020      	adds	r0, #32
 800bfc6:	e7e3      	b.n	800bf90 <__d2b+0x60>
 800bfc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfd0:	f8c9 0000 	str.w	r0, [r9]
 800bfd4:	6918      	ldr	r0, [r3, #16]
 800bfd6:	f7ff fcaf 	bl	800b938 <__hi0bits>
 800bfda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfde:	e7df      	b.n	800bfa0 <__d2b+0x70>
 800bfe0:	0800e278 	.word	0x0800e278
 800bfe4:	0800e304 	.word	0x0800e304

0800bfe8 <__ratio>:
 800bfe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	4688      	mov	r8, r1
 800bfee:	4669      	mov	r1, sp
 800bff0:	4681      	mov	r9, r0
 800bff2:	f7ff ff4d 	bl	800be90 <__b2d>
 800bff6:	a901      	add	r1, sp, #4
 800bff8:	4640      	mov	r0, r8
 800bffa:	ec55 4b10 	vmov	r4, r5, d0
 800bffe:	f7ff ff47 	bl	800be90 <__b2d>
 800c002:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c006:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c00a:	eba3 0c02 	sub.w	ip, r3, r2
 800c00e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c012:	1a9b      	subs	r3, r3, r2
 800c014:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c018:	ec51 0b10 	vmov	r0, r1, d0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bfd6      	itet	le
 800c020:	460a      	movle	r2, r1
 800c022:	462a      	movgt	r2, r5
 800c024:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c028:	468b      	mov	fp, r1
 800c02a:	462f      	mov	r7, r5
 800c02c:	bfd4      	ite	le
 800c02e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c032:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c036:	4620      	mov	r0, r4
 800c038:	ee10 2a10 	vmov	r2, s0
 800c03c:	465b      	mov	r3, fp
 800c03e:	4639      	mov	r1, r7
 800c040:	f7f4 fc0c 	bl	800085c <__aeabi_ddiv>
 800c044:	ec41 0b10 	vmov	d0, r0, r1
 800c048:	b003      	add	sp, #12
 800c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c04e <__copybits>:
 800c04e:	3901      	subs	r1, #1
 800c050:	b570      	push	{r4, r5, r6, lr}
 800c052:	1149      	asrs	r1, r1, #5
 800c054:	6914      	ldr	r4, [r2, #16]
 800c056:	3101      	adds	r1, #1
 800c058:	f102 0314 	add.w	r3, r2, #20
 800c05c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c064:	1f05      	subs	r5, r0, #4
 800c066:	42a3      	cmp	r3, r4
 800c068:	d30c      	bcc.n	800c084 <__copybits+0x36>
 800c06a:	1aa3      	subs	r3, r4, r2
 800c06c:	3b11      	subs	r3, #17
 800c06e:	f023 0303 	bic.w	r3, r3, #3
 800c072:	3211      	adds	r2, #17
 800c074:	42a2      	cmp	r2, r4
 800c076:	bf88      	it	hi
 800c078:	2300      	movhi	r3, #0
 800c07a:	4418      	add	r0, r3
 800c07c:	2300      	movs	r3, #0
 800c07e:	4288      	cmp	r0, r1
 800c080:	d305      	bcc.n	800c08e <__copybits+0x40>
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	f853 6b04 	ldr.w	r6, [r3], #4
 800c088:	f845 6f04 	str.w	r6, [r5, #4]!
 800c08c:	e7eb      	b.n	800c066 <__copybits+0x18>
 800c08e:	f840 3b04 	str.w	r3, [r0], #4
 800c092:	e7f4      	b.n	800c07e <__copybits+0x30>

0800c094 <__any_on>:
 800c094:	f100 0214 	add.w	r2, r0, #20
 800c098:	6900      	ldr	r0, [r0, #16]
 800c09a:	114b      	asrs	r3, r1, #5
 800c09c:	4298      	cmp	r0, r3
 800c09e:	b510      	push	{r4, lr}
 800c0a0:	db11      	blt.n	800c0c6 <__any_on+0x32>
 800c0a2:	dd0a      	ble.n	800c0ba <__any_on+0x26>
 800c0a4:	f011 011f 	ands.w	r1, r1, #31
 800c0a8:	d007      	beq.n	800c0ba <__any_on+0x26>
 800c0aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0ae:	fa24 f001 	lsr.w	r0, r4, r1
 800c0b2:	fa00 f101 	lsl.w	r1, r0, r1
 800c0b6:	428c      	cmp	r4, r1
 800c0b8:	d10b      	bne.n	800c0d2 <__any_on+0x3e>
 800c0ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d803      	bhi.n	800c0ca <__any_on+0x36>
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	bd10      	pop	{r4, pc}
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	e7f7      	b.n	800c0ba <__any_on+0x26>
 800c0ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0ce:	2900      	cmp	r1, #0
 800c0d0:	d0f5      	beq.n	800c0be <__any_on+0x2a>
 800c0d2:	2001      	movs	r0, #1
 800c0d4:	e7f6      	b.n	800c0c4 <__any_on+0x30>

0800c0d6 <_calloc_r>:
 800c0d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0d8:	fba1 2402 	umull	r2, r4, r1, r2
 800c0dc:	b94c      	cbnz	r4, 800c0f2 <_calloc_r+0x1c>
 800c0de:	4611      	mov	r1, r2
 800c0e0:	9201      	str	r2, [sp, #4]
 800c0e2:	f7fc fab1 	bl	8008648 <_malloc_r>
 800c0e6:	9a01      	ldr	r2, [sp, #4]
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	b930      	cbnz	r0, 800c0fa <_calloc_r+0x24>
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	b003      	add	sp, #12
 800c0f0:	bd30      	pop	{r4, r5, pc}
 800c0f2:	220c      	movs	r2, #12
 800c0f4:	6002      	str	r2, [r0, #0]
 800c0f6:	2500      	movs	r5, #0
 800c0f8:	e7f8      	b.n	800c0ec <_calloc_r+0x16>
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	f7fc fa30 	bl	8008560 <memset>
 800c100:	e7f4      	b.n	800c0ec <_calloc_r+0x16>

0800c102 <__ssputs_r>:
 800c102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c106:	688e      	ldr	r6, [r1, #8]
 800c108:	429e      	cmp	r6, r3
 800c10a:	4682      	mov	sl, r0
 800c10c:	460c      	mov	r4, r1
 800c10e:	4690      	mov	r8, r2
 800c110:	461f      	mov	r7, r3
 800c112:	d838      	bhi.n	800c186 <__ssputs_r+0x84>
 800c114:	898a      	ldrh	r2, [r1, #12]
 800c116:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c11a:	d032      	beq.n	800c182 <__ssputs_r+0x80>
 800c11c:	6825      	ldr	r5, [r4, #0]
 800c11e:	6909      	ldr	r1, [r1, #16]
 800c120:	eba5 0901 	sub.w	r9, r5, r1
 800c124:	6965      	ldr	r5, [r4, #20]
 800c126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c12a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c12e:	3301      	adds	r3, #1
 800c130:	444b      	add	r3, r9
 800c132:	106d      	asrs	r5, r5, #1
 800c134:	429d      	cmp	r5, r3
 800c136:	bf38      	it	cc
 800c138:	461d      	movcc	r5, r3
 800c13a:	0553      	lsls	r3, r2, #21
 800c13c:	d531      	bpl.n	800c1a2 <__ssputs_r+0xa0>
 800c13e:	4629      	mov	r1, r5
 800c140:	f7fc fa82 	bl	8008648 <_malloc_r>
 800c144:	4606      	mov	r6, r0
 800c146:	b950      	cbnz	r0, 800c15e <__ssputs_r+0x5c>
 800c148:	230c      	movs	r3, #12
 800c14a:	f8ca 3000 	str.w	r3, [sl]
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c154:	81a3      	strh	r3, [r4, #12]
 800c156:	f04f 30ff 	mov.w	r0, #4294967295
 800c15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c15e:	6921      	ldr	r1, [r4, #16]
 800c160:	464a      	mov	r2, r9
 800c162:	f7fc f9d5 	bl	8008510 <memcpy>
 800c166:	89a3      	ldrh	r3, [r4, #12]
 800c168:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c170:	81a3      	strh	r3, [r4, #12]
 800c172:	6126      	str	r6, [r4, #16]
 800c174:	6165      	str	r5, [r4, #20]
 800c176:	444e      	add	r6, r9
 800c178:	eba5 0509 	sub.w	r5, r5, r9
 800c17c:	6026      	str	r6, [r4, #0]
 800c17e:	60a5      	str	r5, [r4, #8]
 800c180:	463e      	mov	r6, r7
 800c182:	42be      	cmp	r6, r7
 800c184:	d900      	bls.n	800c188 <__ssputs_r+0x86>
 800c186:	463e      	mov	r6, r7
 800c188:	6820      	ldr	r0, [r4, #0]
 800c18a:	4632      	mov	r2, r6
 800c18c:	4641      	mov	r1, r8
 800c18e:	f7fc f9cd 	bl	800852c <memmove>
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	1b9b      	subs	r3, r3, r6
 800c196:	60a3      	str	r3, [r4, #8]
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	4433      	add	r3, r6
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e7db      	b.n	800c15a <__ssputs_r+0x58>
 800c1a2:	462a      	mov	r2, r5
 800c1a4:	f000 ff3a 	bl	800d01c <_realloc_r>
 800c1a8:	4606      	mov	r6, r0
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d1e1      	bne.n	800c172 <__ssputs_r+0x70>
 800c1ae:	6921      	ldr	r1, [r4, #16]
 800c1b0:	4650      	mov	r0, sl
 800c1b2:	f7fc f9dd 	bl	8008570 <_free_r>
 800c1b6:	e7c7      	b.n	800c148 <__ssputs_r+0x46>

0800c1b8 <_svfiprintf_r>:
 800c1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1bc:	4698      	mov	r8, r3
 800c1be:	898b      	ldrh	r3, [r1, #12]
 800c1c0:	061b      	lsls	r3, r3, #24
 800c1c2:	b09d      	sub	sp, #116	; 0x74
 800c1c4:	4607      	mov	r7, r0
 800c1c6:	460d      	mov	r5, r1
 800c1c8:	4614      	mov	r4, r2
 800c1ca:	d50e      	bpl.n	800c1ea <_svfiprintf_r+0x32>
 800c1cc:	690b      	ldr	r3, [r1, #16]
 800c1ce:	b963      	cbnz	r3, 800c1ea <_svfiprintf_r+0x32>
 800c1d0:	2140      	movs	r1, #64	; 0x40
 800c1d2:	f7fc fa39 	bl	8008648 <_malloc_r>
 800c1d6:	6028      	str	r0, [r5, #0]
 800c1d8:	6128      	str	r0, [r5, #16]
 800c1da:	b920      	cbnz	r0, 800c1e6 <_svfiprintf_r+0x2e>
 800c1dc:	230c      	movs	r3, #12
 800c1de:	603b      	str	r3, [r7, #0]
 800c1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e4:	e0d1      	b.n	800c38a <_svfiprintf_r+0x1d2>
 800c1e6:	2340      	movs	r3, #64	; 0x40
 800c1e8:	616b      	str	r3, [r5, #20]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ee:	2320      	movs	r3, #32
 800c1f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1f8:	2330      	movs	r3, #48	; 0x30
 800c1fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3a4 <_svfiprintf_r+0x1ec>
 800c1fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c202:	f04f 0901 	mov.w	r9, #1
 800c206:	4623      	mov	r3, r4
 800c208:	469a      	mov	sl, r3
 800c20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c20e:	b10a      	cbz	r2, 800c214 <_svfiprintf_r+0x5c>
 800c210:	2a25      	cmp	r2, #37	; 0x25
 800c212:	d1f9      	bne.n	800c208 <_svfiprintf_r+0x50>
 800c214:	ebba 0b04 	subs.w	fp, sl, r4
 800c218:	d00b      	beq.n	800c232 <_svfiprintf_r+0x7a>
 800c21a:	465b      	mov	r3, fp
 800c21c:	4622      	mov	r2, r4
 800c21e:	4629      	mov	r1, r5
 800c220:	4638      	mov	r0, r7
 800c222:	f7ff ff6e 	bl	800c102 <__ssputs_r>
 800c226:	3001      	adds	r0, #1
 800c228:	f000 80aa 	beq.w	800c380 <_svfiprintf_r+0x1c8>
 800c22c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c22e:	445a      	add	r2, fp
 800c230:	9209      	str	r2, [sp, #36]	; 0x24
 800c232:	f89a 3000 	ldrb.w	r3, [sl]
 800c236:	2b00      	cmp	r3, #0
 800c238:	f000 80a2 	beq.w	800c380 <_svfiprintf_r+0x1c8>
 800c23c:	2300      	movs	r3, #0
 800c23e:	f04f 32ff 	mov.w	r2, #4294967295
 800c242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c246:	f10a 0a01 	add.w	sl, sl, #1
 800c24a:	9304      	str	r3, [sp, #16]
 800c24c:	9307      	str	r3, [sp, #28]
 800c24e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c252:	931a      	str	r3, [sp, #104]	; 0x68
 800c254:	4654      	mov	r4, sl
 800c256:	2205      	movs	r2, #5
 800c258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c25c:	4851      	ldr	r0, [pc, #324]	; (800c3a4 <_svfiprintf_r+0x1ec>)
 800c25e:	f7f3 ffc7 	bl	80001f0 <memchr>
 800c262:	9a04      	ldr	r2, [sp, #16]
 800c264:	b9d8      	cbnz	r0, 800c29e <_svfiprintf_r+0xe6>
 800c266:	06d0      	lsls	r0, r2, #27
 800c268:	bf44      	itt	mi
 800c26a:	2320      	movmi	r3, #32
 800c26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c270:	0711      	lsls	r1, r2, #28
 800c272:	bf44      	itt	mi
 800c274:	232b      	movmi	r3, #43	; 0x2b
 800c276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c27a:	f89a 3000 	ldrb.w	r3, [sl]
 800c27e:	2b2a      	cmp	r3, #42	; 0x2a
 800c280:	d015      	beq.n	800c2ae <_svfiprintf_r+0xf6>
 800c282:	9a07      	ldr	r2, [sp, #28]
 800c284:	4654      	mov	r4, sl
 800c286:	2000      	movs	r0, #0
 800c288:	f04f 0c0a 	mov.w	ip, #10
 800c28c:	4621      	mov	r1, r4
 800c28e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c292:	3b30      	subs	r3, #48	; 0x30
 800c294:	2b09      	cmp	r3, #9
 800c296:	d94e      	bls.n	800c336 <_svfiprintf_r+0x17e>
 800c298:	b1b0      	cbz	r0, 800c2c8 <_svfiprintf_r+0x110>
 800c29a:	9207      	str	r2, [sp, #28]
 800c29c:	e014      	b.n	800c2c8 <_svfiprintf_r+0x110>
 800c29e:	eba0 0308 	sub.w	r3, r0, r8
 800c2a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	46a2      	mov	sl, r4
 800c2ac:	e7d2      	b.n	800c254 <_svfiprintf_r+0x9c>
 800c2ae:	9b03      	ldr	r3, [sp, #12]
 800c2b0:	1d19      	adds	r1, r3, #4
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	9103      	str	r1, [sp, #12]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	bfbb      	ittet	lt
 800c2ba:	425b      	neglt	r3, r3
 800c2bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c2c0:	9307      	strge	r3, [sp, #28]
 800c2c2:	9307      	strlt	r3, [sp, #28]
 800c2c4:	bfb8      	it	lt
 800c2c6:	9204      	strlt	r2, [sp, #16]
 800c2c8:	7823      	ldrb	r3, [r4, #0]
 800c2ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c2cc:	d10c      	bne.n	800c2e8 <_svfiprintf_r+0x130>
 800c2ce:	7863      	ldrb	r3, [r4, #1]
 800c2d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2d2:	d135      	bne.n	800c340 <_svfiprintf_r+0x188>
 800c2d4:	9b03      	ldr	r3, [sp, #12]
 800c2d6:	1d1a      	adds	r2, r3, #4
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	9203      	str	r2, [sp, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bfb8      	it	lt
 800c2e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2e4:	3402      	adds	r4, #2
 800c2e6:	9305      	str	r3, [sp, #20]
 800c2e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3b4 <_svfiprintf_r+0x1fc>
 800c2ec:	7821      	ldrb	r1, [r4, #0]
 800c2ee:	2203      	movs	r2, #3
 800c2f0:	4650      	mov	r0, sl
 800c2f2:	f7f3 ff7d 	bl	80001f0 <memchr>
 800c2f6:	b140      	cbz	r0, 800c30a <_svfiprintf_r+0x152>
 800c2f8:	2340      	movs	r3, #64	; 0x40
 800c2fa:	eba0 000a 	sub.w	r0, r0, sl
 800c2fe:	fa03 f000 	lsl.w	r0, r3, r0
 800c302:	9b04      	ldr	r3, [sp, #16]
 800c304:	4303      	orrs	r3, r0
 800c306:	3401      	adds	r4, #1
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c30e:	4826      	ldr	r0, [pc, #152]	; (800c3a8 <_svfiprintf_r+0x1f0>)
 800c310:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c314:	2206      	movs	r2, #6
 800c316:	f7f3 ff6b 	bl	80001f0 <memchr>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d038      	beq.n	800c390 <_svfiprintf_r+0x1d8>
 800c31e:	4b23      	ldr	r3, [pc, #140]	; (800c3ac <_svfiprintf_r+0x1f4>)
 800c320:	bb1b      	cbnz	r3, 800c36a <_svfiprintf_r+0x1b2>
 800c322:	9b03      	ldr	r3, [sp, #12]
 800c324:	3307      	adds	r3, #7
 800c326:	f023 0307 	bic.w	r3, r3, #7
 800c32a:	3308      	adds	r3, #8
 800c32c:	9303      	str	r3, [sp, #12]
 800c32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c330:	4433      	add	r3, r6
 800c332:	9309      	str	r3, [sp, #36]	; 0x24
 800c334:	e767      	b.n	800c206 <_svfiprintf_r+0x4e>
 800c336:	fb0c 3202 	mla	r2, ip, r2, r3
 800c33a:	460c      	mov	r4, r1
 800c33c:	2001      	movs	r0, #1
 800c33e:	e7a5      	b.n	800c28c <_svfiprintf_r+0xd4>
 800c340:	2300      	movs	r3, #0
 800c342:	3401      	adds	r4, #1
 800c344:	9305      	str	r3, [sp, #20]
 800c346:	4619      	mov	r1, r3
 800c348:	f04f 0c0a 	mov.w	ip, #10
 800c34c:	4620      	mov	r0, r4
 800c34e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c352:	3a30      	subs	r2, #48	; 0x30
 800c354:	2a09      	cmp	r2, #9
 800c356:	d903      	bls.n	800c360 <_svfiprintf_r+0x1a8>
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d0c5      	beq.n	800c2e8 <_svfiprintf_r+0x130>
 800c35c:	9105      	str	r1, [sp, #20]
 800c35e:	e7c3      	b.n	800c2e8 <_svfiprintf_r+0x130>
 800c360:	fb0c 2101 	mla	r1, ip, r1, r2
 800c364:	4604      	mov	r4, r0
 800c366:	2301      	movs	r3, #1
 800c368:	e7f0      	b.n	800c34c <_svfiprintf_r+0x194>
 800c36a:	ab03      	add	r3, sp, #12
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	462a      	mov	r2, r5
 800c370:	4b0f      	ldr	r3, [pc, #60]	; (800c3b0 <_svfiprintf_r+0x1f8>)
 800c372:	a904      	add	r1, sp, #16
 800c374:	4638      	mov	r0, r7
 800c376:	f7fc fa7b 	bl	8008870 <_printf_float>
 800c37a:	1c42      	adds	r2, r0, #1
 800c37c:	4606      	mov	r6, r0
 800c37e:	d1d6      	bne.n	800c32e <_svfiprintf_r+0x176>
 800c380:	89ab      	ldrh	r3, [r5, #12]
 800c382:	065b      	lsls	r3, r3, #25
 800c384:	f53f af2c 	bmi.w	800c1e0 <_svfiprintf_r+0x28>
 800c388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c38a:	b01d      	add	sp, #116	; 0x74
 800c38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c390:	ab03      	add	r3, sp, #12
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	462a      	mov	r2, r5
 800c396:	4b06      	ldr	r3, [pc, #24]	; (800c3b0 <_svfiprintf_r+0x1f8>)
 800c398:	a904      	add	r1, sp, #16
 800c39a:	4638      	mov	r0, r7
 800c39c:	f7fc fd0c 	bl	8008db8 <_printf_i>
 800c3a0:	e7eb      	b.n	800c37a <_svfiprintf_r+0x1c2>
 800c3a2:	bf00      	nop
 800c3a4:	0800e45c 	.word	0x0800e45c
 800c3a8:	0800e466 	.word	0x0800e466
 800c3ac:	08008871 	.word	0x08008871
 800c3b0:	0800c103 	.word	0x0800c103
 800c3b4:	0800e462 	.word	0x0800e462

0800c3b8 <_sungetc_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	1c4b      	adds	r3, r1, #1
 800c3bc:	4614      	mov	r4, r2
 800c3be:	d103      	bne.n	800c3c8 <_sungetc_r+0x10>
 800c3c0:	f04f 35ff 	mov.w	r5, #4294967295
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	8993      	ldrh	r3, [r2, #12]
 800c3ca:	f023 0320 	bic.w	r3, r3, #32
 800c3ce:	8193      	strh	r3, [r2, #12]
 800c3d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3d2:	6852      	ldr	r2, [r2, #4]
 800c3d4:	b2cd      	uxtb	r5, r1
 800c3d6:	b18b      	cbz	r3, 800c3fc <_sungetc_r+0x44>
 800c3d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	dd08      	ble.n	800c3f0 <_sungetc_r+0x38>
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	1e5a      	subs	r2, r3, #1
 800c3e2:	6022      	str	r2, [r4, #0]
 800c3e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c3e8:	6863      	ldr	r3, [r4, #4]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	6063      	str	r3, [r4, #4]
 800c3ee:	e7e9      	b.n	800c3c4 <_sungetc_r+0xc>
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	f000 fbe1 	bl	800cbb8 <__submore>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d0f1      	beq.n	800c3de <_sungetc_r+0x26>
 800c3fa:	e7e1      	b.n	800c3c0 <_sungetc_r+0x8>
 800c3fc:	6921      	ldr	r1, [r4, #16]
 800c3fe:	6823      	ldr	r3, [r4, #0]
 800c400:	b151      	cbz	r1, 800c418 <_sungetc_r+0x60>
 800c402:	4299      	cmp	r1, r3
 800c404:	d208      	bcs.n	800c418 <_sungetc_r+0x60>
 800c406:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c40a:	42a9      	cmp	r1, r5
 800c40c:	d104      	bne.n	800c418 <_sungetc_r+0x60>
 800c40e:	3b01      	subs	r3, #1
 800c410:	3201      	adds	r2, #1
 800c412:	6023      	str	r3, [r4, #0]
 800c414:	6062      	str	r2, [r4, #4]
 800c416:	e7d5      	b.n	800c3c4 <_sungetc_r+0xc>
 800c418:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c41c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c420:	6363      	str	r3, [r4, #52]	; 0x34
 800c422:	2303      	movs	r3, #3
 800c424:	63a3      	str	r3, [r4, #56]	; 0x38
 800c426:	4623      	mov	r3, r4
 800c428:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	2301      	movs	r3, #1
 800c430:	e7dc      	b.n	800c3ec <_sungetc_r+0x34>

0800c432 <__ssrefill_r>:
 800c432:	b510      	push	{r4, lr}
 800c434:	460c      	mov	r4, r1
 800c436:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c438:	b169      	cbz	r1, 800c456 <__ssrefill_r+0x24>
 800c43a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c43e:	4299      	cmp	r1, r3
 800c440:	d001      	beq.n	800c446 <__ssrefill_r+0x14>
 800c442:	f7fc f895 	bl	8008570 <_free_r>
 800c446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c448:	6063      	str	r3, [r4, #4]
 800c44a:	2000      	movs	r0, #0
 800c44c:	6360      	str	r0, [r4, #52]	; 0x34
 800c44e:	b113      	cbz	r3, 800c456 <__ssrefill_r+0x24>
 800c450:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c452:	6023      	str	r3, [r4, #0]
 800c454:	bd10      	pop	{r4, pc}
 800c456:	6923      	ldr	r3, [r4, #16]
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	2300      	movs	r3, #0
 800c45c:	6063      	str	r3, [r4, #4]
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	f043 0320 	orr.w	r3, r3, #32
 800c464:	81a3      	strh	r3, [r4, #12]
 800c466:	f04f 30ff 	mov.w	r0, #4294967295
 800c46a:	e7f3      	b.n	800c454 <__ssrefill_r+0x22>

0800c46c <__ssvfiscanf_r>:
 800c46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	460c      	mov	r4, r1
 800c472:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c476:	2100      	movs	r1, #0
 800c478:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c47c:	49a6      	ldr	r1, [pc, #664]	; (800c718 <__ssvfiscanf_r+0x2ac>)
 800c47e:	91a0      	str	r1, [sp, #640]	; 0x280
 800c480:	f10d 0804 	add.w	r8, sp, #4
 800c484:	49a5      	ldr	r1, [pc, #660]	; (800c71c <__ssvfiscanf_r+0x2b0>)
 800c486:	4fa6      	ldr	r7, [pc, #664]	; (800c720 <__ssvfiscanf_r+0x2b4>)
 800c488:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c724 <__ssvfiscanf_r+0x2b8>
 800c48c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c490:	4606      	mov	r6, r0
 800c492:	91a1      	str	r1, [sp, #644]	; 0x284
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	7813      	ldrb	r3, [r2, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f000 815a 	beq.w	800c752 <__ssvfiscanf_r+0x2e6>
 800c49e:	5dd9      	ldrb	r1, [r3, r7]
 800c4a0:	f011 0108 	ands.w	r1, r1, #8
 800c4a4:	f102 0501 	add.w	r5, r2, #1
 800c4a8:	d019      	beq.n	800c4de <__ssvfiscanf_r+0x72>
 800c4aa:	6863      	ldr	r3, [r4, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dd0f      	ble.n	800c4d0 <__ssvfiscanf_r+0x64>
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	781a      	ldrb	r2, [r3, #0]
 800c4b4:	5cba      	ldrb	r2, [r7, r2]
 800c4b6:	0712      	lsls	r2, r2, #28
 800c4b8:	d401      	bmi.n	800c4be <__ssvfiscanf_r+0x52>
 800c4ba:	462a      	mov	r2, r5
 800c4bc:	e7eb      	b.n	800c496 <__ssvfiscanf_r+0x2a>
 800c4be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	9245      	str	r2, [sp, #276]	; 0x114
 800c4c4:	6862      	ldr	r2, [r4, #4]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	3a01      	subs	r2, #1
 800c4ca:	6062      	str	r2, [r4, #4]
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	e7ec      	b.n	800c4aa <__ssvfiscanf_r+0x3e>
 800c4d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c4d2:	4621      	mov	r1, r4
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	4798      	blx	r3
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d0e9      	beq.n	800c4b0 <__ssvfiscanf_r+0x44>
 800c4dc:	e7ed      	b.n	800c4ba <__ssvfiscanf_r+0x4e>
 800c4de:	2b25      	cmp	r3, #37	; 0x25
 800c4e0:	d012      	beq.n	800c508 <__ssvfiscanf_r+0x9c>
 800c4e2:	469a      	mov	sl, r3
 800c4e4:	6863      	ldr	r3, [r4, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f340 8091 	ble.w	800c60e <__ssvfiscanf_r+0x1a2>
 800c4ec:	6822      	ldr	r2, [r4, #0]
 800c4ee:	7813      	ldrb	r3, [r2, #0]
 800c4f0:	4553      	cmp	r3, sl
 800c4f2:	f040 812e 	bne.w	800c752 <__ssvfiscanf_r+0x2e6>
 800c4f6:	6863      	ldr	r3, [r4, #4]
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	6063      	str	r3, [r4, #4]
 800c4fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c4fe:	3201      	adds	r2, #1
 800c500:	3301      	adds	r3, #1
 800c502:	6022      	str	r2, [r4, #0]
 800c504:	9345      	str	r3, [sp, #276]	; 0x114
 800c506:	e7d8      	b.n	800c4ba <__ssvfiscanf_r+0x4e>
 800c508:	9141      	str	r1, [sp, #260]	; 0x104
 800c50a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c50c:	7853      	ldrb	r3, [r2, #1]
 800c50e:	2b2a      	cmp	r3, #42	; 0x2a
 800c510:	bf02      	ittt	eq
 800c512:	2310      	moveq	r3, #16
 800c514:	1c95      	addeq	r5, r2, #2
 800c516:	9341      	streq	r3, [sp, #260]	; 0x104
 800c518:	220a      	movs	r2, #10
 800c51a:	46aa      	mov	sl, r5
 800c51c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c520:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c524:	2b09      	cmp	r3, #9
 800c526:	d91d      	bls.n	800c564 <__ssvfiscanf_r+0xf8>
 800c528:	487e      	ldr	r0, [pc, #504]	; (800c724 <__ssvfiscanf_r+0x2b8>)
 800c52a:	2203      	movs	r2, #3
 800c52c:	f7f3 fe60 	bl	80001f0 <memchr>
 800c530:	b140      	cbz	r0, 800c544 <__ssvfiscanf_r+0xd8>
 800c532:	2301      	movs	r3, #1
 800c534:	eba0 0009 	sub.w	r0, r0, r9
 800c538:	fa03 f000 	lsl.w	r0, r3, r0
 800c53c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c53e:	4318      	orrs	r0, r3
 800c540:	9041      	str	r0, [sp, #260]	; 0x104
 800c542:	4655      	mov	r5, sl
 800c544:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c548:	2b78      	cmp	r3, #120	; 0x78
 800c54a:	d806      	bhi.n	800c55a <__ssvfiscanf_r+0xee>
 800c54c:	2b57      	cmp	r3, #87	; 0x57
 800c54e:	d810      	bhi.n	800c572 <__ssvfiscanf_r+0x106>
 800c550:	2b25      	cmp	r3, #37	; 0x25
 800c552:	d0c6      	beq.n	800c4e2 <__ssvfiscanf_r+0x76>
 800c554:	d856      	bhi.n	800c604 <__ssvfiscanf_r+0x198>
 800c556:	2b00      	cmp	r3, #0
 800c558:	d064      	beq.n	800c624 <__ssvfiscanf_r+0x1b8>
 800c55a:	2303      	movs	r3, #3
 800c55c:	9347      	str	r3, [sp, #284]	; 0x11c
 800c55e:	230a      	movs	r3, #10
 800c560:	9342      	str	r3, [sp, #264]	; 0x108
 800c562:	e071      	b.n	800c648 <__ssvfiscanf_r+0x1dc>
 800c564:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c566:	fb02 1103 	mla	r1, r2, r3, r1
 800c56a:	3930      	subs	r1, #48	; 0x30
 800c56c:	9143      	str	r1, [sp, #268]	; 0x10c
 800c56e:	4655      	mov	r5, sl
 800c570:	e7d3      	b.n	800c51a <__ssvfiscanf_r+0xae>
 800c572:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c576:	2a20      	cmp	r2, #32
 800c578:	d8ef      	bhi.n	800c55a <__ssvfiscanf_r+0xee>
 800c57a:	a101      	add	r1, pc, #4	; (adr r1, 800c580 <__ssvfiscanf_r+0x114>)
 800c57c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c580:	0800c633 	.word	0x0800c633
 800c584:	0800c55b 	.word	0x0800c55b
 800c588:	0800c55b 	.word	0x0800c55b
 800c58c:	0800c691 	.word	0x0800c691
 800c590:	0800c55b 	.word	0x0800c55b
 800c594:	0800c55b 	.word	0x0800c55b
 800c598:	0800c55b 	.word	0x0800c55b
 800c59c:	0800c55b 	.word	0x0800c55b
 800c5a0:	0800c55b 	.word	0x0800c55b
 800c5a4:	0800c55b 	.word	0x0800c55b
 800c5a8:	0800c55b 	.word	0x0800c55b
 800c5ac:	0800c6a7 	.word	0x0800c6a7
 800c5b0:	0800c67d 	.word	0x0800c67d
 800c5b4:	0800c60b 	.word	0x0800c60b
 800c5b8:	0800c60b 	.word	0x0800c60b
 800c5bc:	0800c60b 	.word	0x0800c60b
 800c5c0:	0800c55b 	.word	0x0800c55b
 800c5c4:	0800c681 	.word	0x0800c681
 800c5c8:	0800c55b 	.word	0x0800c55b
 800c5cc:	0800c55b 	.word	0x0800c55b
 800c5d0:	0800c55b 	.word	0x0800c55b
 800c5d4:	0800c55b 	.word	0x0800c55b
 800c5d8:	0800c6b7 	.word	0x0800c6b7
 800c5dc:	0800c689 	.word	0x0800c689
 800c5e0:	0800c62b 	.word	0x0800c62b
 800c5e4:	0800c55b 	.word	0x0800c55b
 800c5e8:	0800c55b 	.word	0x0800c55b
 800c5ec:	0800c6b3 	.word	0x0800c6b3
 800c5f0:	0800c55b 	.word	0x0800c55b
 800c5f4:	0800c67d 	.word	0x0800c67d
 800c5f8:	0800c55b 	.word	0x0800c55b
 800c5fc:	0800c55b 	.word	0x0800c55b
 800c600:	0800c633 	.word	0x0800c633
 800c604:	3b45      	subs	r3, #69	; 0x45
 800c606:	2b02      	cmp	r3, #2
 800c608:	d8a7      	bhi.n	800c55a <__ssvfiscanf_r+0xee>
 800c60a:	2305      	movs	r3, #5
 800c60c:	e01b      	b.n	800c646 <__ssvfiscanf_r+0x1da>
 800c60e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c610:	4621      	mov	r1, r4
 800c612:	4630      	mov	r0, r6
 800c614:	4798      	blx	r3
 800c616:	2800      	cmp	r0, #0
 800c618:	f43f af68 	beq.w	800c4ec <__ssvfiscanf_r+0x80>
 800c61c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c61e:	2800      	cmp	r0, #0
 800c620:	f040 808d 	bne.w	800c73e <__ssvfiscanf_r+0x2d2>
 800c624:	f04f 30ff 	mov.w	r0, #4294967295
 800c628:	e08f      	b.n	800c74a <__ssvfiscanf_r+0x2de>
 800c62a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c62c:	f042 0220 	orr.w	r2, r2, #32
 800c630:	9241      	str	r2, [sp, #260]	; 0x104
 800c632:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c638:	9241      	str	r2, [sp, #260]	; 0x104
 800c63a:	2210      	movs	r2, #16
 800c63c:	2b6f      	cmp	r3, #111	; 0x6f
 800c63e:	9242      	str	r2, [sp, #264]	; 0x108
 800c640:	bf34      	ite	cc
 800c642:	2303      	movcc	r3, #3
 800c644:	2304      	movcs	r3, #4
 800c646:	9347      	str	r3, [sp, #284]	; 0x11c
 800c648:	6863      	ldr	r3, [r4, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	dd42      	ble.n	800c6d4 <__ssvfiscanf_r+0x268>
 800c64e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c650:	0659      	lsls	r1, r3, #25
 800c652:	d404      	bmi.n	800c65e <__ssvfiscanf_r+0x1f2>
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	781a      	ldrb	r2, [r3, #0]
 800c658:	5cba      	ldrb	r2, [r7, r2]
 800c65a:	0712      	lsls	r2, r2, #28
 800c65c:	d441      	bmi.n	800c6e2 <__ssvfiscanf_r+0x276>
 800c65e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c660:	2b02      	cmp	r3, #2
 800c662:	dc50      	bgt.n	800c706 <__ssvfiscanf_r+0x29a>
 800c664:	466b      	mov	r3, sp
 800c666:	4622      	mov	r2, r4
 800c668:	a941      	add	r1, sp, #260	; 0x104
 800c66a:	4630      	mov	r0, r6
 800c66c:	f000 f876 	bl	800c75c <_scanf_chars>
 800c670:	2801      	cmp	r0, #1
 800c672:	d06e      	beq.n	800c752 <__ssvfiscanf_r+0x2e6>
 800c674:	2802      	cmp	r0, #2
 800c676:	f47f af20 	bne.w	800c4ba <__ssvfiscanf_r+0x4e>
 800c67a:	e7cf      	b.n	800c61c <__ssvfiscanf_r+0x1b0>
 800c67c:	220a      	movs	r2, #10
 800c67e:	e7dd      	b.n	800c63c <__ssvfiscanf_r+0x1d0>
 800c680:	2300      	movs	r3, #0
 800c682:	9342      	str	r3, [sp, #264]	; 0x108
 800c684:	2303      	movs	r3, #3
 800c686:	e7de      	b.n	800c646 <__ssvfiscanf_r+0x1da>
 800c688:	2308      	movs	r3, #8
 800c68a:	9342      	str	r3, [sp, #264]	; 0x108
 800c68c:	2304      	movs	r3, #4
 800c68e:	e7da      	b.n	800c646 <__ssvfiscanf_r+0x1da>
 800c690:	4629      	mov	r1, r5
 800c692:	4640      	mov	r0, r8
 800c694:	f000 f9d0 	bl	800ca38 <__sccl>
 800c698:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c69e:	9341      	str	r3, [sp, #260]	; 0x104
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e7cf      	b.n	800c646 <__ssvfiscanf_r+0x1da>
 800c6a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ac:	9341      	str	r3, [sp, #260]	; 0x104
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e7c9      	b.n	800c646 <__ssvfiscanf_r+0x1da>
 800c6b2:	2302      	movs	r3, #2
 800c6b4:	e7c7      	b.n	800c646 <__ssvfiscanf_r+0x1da>
 800c6b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c6b8:	06c3      	lsls	r3, r0, #27
 800c6ba:	f53f aefe 	bmi.w	800c4ba <__ssvfiscanf_r+0x4e>
 800c6be:	9b00      	ldr	r3, [sp, #0]
 800c6c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c6c2:	1d19      	adds	r1, r3, #4
 800c6c4:	9100      	str	r1, [sp, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f010 0f01 	tst.w	r0, #1
 800c6cc:	bf14      	ite	ne
 800c6ce:	801a      	strhne	r2, [r3, #0]
 800c6d0:	601a      	streq	r2, [r3, #0]
 800c6d2:	e6f2      	b.n	800c4ba <__ssvfiscanf_r+0x4e>
 800c6d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	4630      	mov	r0, r6
 800c6da:	4798      	blx	r3
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d0b6      	beq.n	800c64e <__ssvfiscanf_r+0x1e2>
 800c6e0:	e79c      	b.n	800c61c <__ssvfiscanf_r+0x1b0>
 800c6e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c6e4:	3201      	adds	r2, #1
 800c6e6:	9245      	str	r2, [sp, #276]	; 0x114
 800c6e8:	6862      	ldr	r2, [r4, #4]
 800c6ea:	3a01      	subs	r2, #1
 800c6ec:	2a00      	cmp	r2, #0
 800c6ee:	6062      	str	r2, [r4, #4]
 800c6f0:	dd02      	ble.n	800c6f8 <__ssvfiscanf_r+0x28c>
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	6023      	str	r3, [r4, #0]
 800c6f6:	e7ad      	b.n	800c654 <__ssvfiscanf_r+0x1e8>
 800c6f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c6fa:	4621      	mov	r1, r4
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	4798      	blx	r3
 800c700:	2800      	cmp	r0, #0
 800c702:	d0a7      	beq.n	800c654 <__ssvfiscanf_r+0x1e8>
 800c704:	e78a      	b.n	800c61c <__ssvfiscanf_r+0x1b0>
 800c706:	2b04      	cmp	r3, #4
 800c708:	dc0e      	bgt.n	800c728 <__ssvfiscanf_r+0x2bc>
 800c70a:	466b      	mov	r3, sp
 800c70c:	4622      	mov	r2, r4
 800c70e:	a941      	add	r1, sp, #260	; 0x104
 800c710:	4630      	mov	r0, r6
 800c712:	f000 f87d 	bl	800c810 <_scanf_i>
 800c716:	e7ab      	b.n	800c670 <__ssvfiscanf_r+0x204>
 800c718:	0800c3b9 	.word	0x0800c3b9
 800c71c:	0800c433 	.word	0x0800c433
 800c720:	0800e0f9 	.word	0x0800e0f9
 800c724:	0800e462 	.word	0x0800e462
 800c728:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <__ssvfiscanf_r+0x2ec>)
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f43f aec5 	beq.w	800c4ba <__ssvfiscanf_r+0x4e>
 800c730:	466b      	mov	r3, sp
 800c732:	4622      	mov	r2, r4
 800c734:	a941      	add	r1, sp, #260	; 0x104
 800c736:	4630      	mov	r0, r6
 800c738:	f7fc fc64 	bl	8009004 <_scanf_float>
 800c73c:	e798      	b.n	800c670 <__ssvfiscanf_r+0x204>
 800c73e:	89a3      	ldrh	r3, [r4, #12]
 800c740:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c744:	bf18      	it	ne
 800c746:	f04f 30ff 	movne.w	r0, #4294967295
 800c74a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c752:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c754:	e7f9      	b.n	800c74a <__ssvfiscanf_r+0x2de>
 800c756:	bf00      	nop
 800c758:	08009005 	.word	0x08009005

0800c75c <_scanf_chars>:
 800c75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c760:	4615      	mov	r5, r2
 800c762:	688a      	ldr	r2, [r1, #8]
 800c764:	4680      	mov	r8, r0
 800c766:	460c      	mov	r4, r1
 800c768:	b932      	cbnz	r2, 800c778 <_scanf_chars+0x1c>
 800c76a:	698a      	ldr	r2, [r1, #24]
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	bf0c      	ite	eq
 800c770:	2201      	moveq	r2, #1
 800c772:	f04f 32ff 	movne.w	r2, #4294967295
 800c776:	608a      	str	r2, [r1, #8]
 800c778:	6822      	ldr	r2, [r4, #0]
 800c77a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c80c <_scanf_chars+0xb0>
 800c77e:	06d1      	lsls	r1, r2, #27
 800c780:	bf5f      	itttt	pl
 800c782:	681a      	ldrpl	r2, [r3, #0]
 800c784:	1d11      	addpl	r1, r2, #4
 800c786:	6019      	strpl	r1, [r3, #0]
 800c788:	6816      	ldrpl	r6, [r2, #0]
 800c78a:	2700      	movs	r7, #0
 800c78c:	69a0      	ldr	r0, [r4, #24]
 800c78e:	b188      	cbz	r0, 800c7b4 <_scanf_chars+0x58>
 800c790:	2801      	cmp	r0, #1
 800c792:	d107      	bne.n	800c7a4 <_scanf_chars+0x48>
 800c794:	682a      	ldr	r2, [r5, #0]
 800c796:	7811      	ldrb	r1, [r2, #0]
 800c798:	6962      	ldr	r2, [r4, #20]
 800c79a:	5c52      	ldrb	r2, [r2, r1]
 800c79c:	b952      	cbnz	r2, 800c7b4 <_scanf_chars+0x58>
 800c79e:	2f00      	cmp	r7, #0
 800c7a0:	d031      	beq.n	800c806 <_scanf_chars+0xaa>
 800c7a2:	e022      	b.n	800c7ea <_scanf_chars+0x8e>
 800c7a4:	2802      	cmp	r0, #2
 800c7a6:	d120      	bne.n	800c7ea <_scanf_chars+0x8e>
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c7b0:	071b      	lsls	r3, r3, #28
 800c7b2:	d41a      	bmi.n	800c7ea <_scanf_chars+0x8e>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	06da      	lsls	r2, r3, #27
 800c7b8:	bf5e      	ittt	pl
 800c7ba:	682b      	ldrpl	r3, [r5, #0]
 800c7bc:	781b      	ldrbpl	r3, [r3, #0]
 800c7be:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c7c2:	682a      	ldr	r2, [r5, #0]
 800c7c4:	686b      	ldr	r3, [r5, #4]
 800c7c6:	3201      	adds	r2, #1
 800c7c8:	602a      	str	r2, [r5, #0]
 800c7ca:	68a2      	ldr	r2, [r4, #8]
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	3a01      	subs	r2, #1
 800c7d0:	606b      	str	r3, [r5, #4]
 800c7d2:	3701      	adds	r7, #1
 800c7d4:	60a2      	str	r2, [r4, #8]
 800c7d6:	b142      	cbz	r2, 800c7ea <_scanf_chars+0x8e>
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	dcd7      	bgt.n	800c78c <_scanf_chars+0x30>
 800c7dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	4798      	blx	r3
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0d0      	beq.n	800c78c <_scanf_chars+0x30>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	f013 0310 	ands.w	r3, r3, #16
 800c7f0:	d105      	bne.n	800c7fe <_scanf_chars+0xa2>
 800c7f2:	68e2      	ldr	r2, [r4, #12]
 800c7f4:	3201      	adds	r2, #1
 800c7f6:	60e2      	str	r2, [r4, #12]
 800c7f8:	69a2      	ldr	r2, [r4, #24]
 800c7fa:	b102      	cbz	r2, 800c7fe <_scanf_chars+0xa2>
 800c7fc:	7033      	strb	r3, [r6, #0]
 800c7fe:	6923      	ldr	r3, [r4, #16]
 800c800:	443b      	add	r3, r7
 800c802:	6123      	str	r3, [r4, #16]
 800c804:	2000      	movs	r0, #0
 800c806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c80a:	bf00      	nop
 800c80c:	0800e0f9 	.word	0x0800e0f9

0800c810 <_scanf_i>:
 800c810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c814:	4698      	mov	r8, r3
 800c816:	4b76      	ldr	r3, [pc, #472]	; (800c9f0 <_scanf_i+0x1e0>)
 800c818:	460c      	mov	r4, r1
 800c81a:	4682      	mov	sl, r0
 800c81c:	4616      	mov	r6, r2
 800c81e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c822:	b087      	sub	sp, #28
 800c824:	ab03      	add	r3, sp, #12
 800c826:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c82a:	4b72      	ldr	r3, [pc, #456]	; (800c9f4 <_scanf_i+0x1e4>)
 800c82c:	69a1      	ldr	r1, [r4, #24]
 800c82e:	4a72      	ldr	r2, [pc, #456]	; (800c9f8 <_scanf_i+0x1e8>)
 800c830:	2903      	cmp	r1, #3
 800c832:	bf18      	it	ne
 800c834:	461a      	movne	r2, r3
 800c836:	68a3      	ldr	r3, [r4, #8]
 800c838:	9201      	str	r2, [sp, #4]
 800c83a:	1e5a      	subs	r2, r3, #1
 800c83c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c840:	bf88      	it	hi
 800c842:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c846:	4627      	mov	r7, r4
 800c848:	bf82      	ittt	hi
 800c84a:	eb03 0905 	addhi.w	r9, r3, r5
 800c84e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c852:	60a3      	strhi	r3, [r4, #8]
 800c854:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c858:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c85c:	bf98      	it	ls
 800c85e:	f04f 0900 	movls.w	r9, #0
 800c862:	6023      	str	r3, [r4, #0]
 800c864:	463d      	mov	r5, r7
 800c866:	f04f 0b00 	mov.w	fp, #0
 800c86a:	6831      	ldr	r1, [r6, #0]
 800c86c:	ab03      	add	r3, sp, #12
 800c86e:	7809      	ldrb	r1, [r1, #0]
 800c870:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c874:	2202      	movs	r2, #2
 800c876:	f7f3 fcbb 	bl	80001f0 <memchr>
 800c87a:	b328      	cbz	r0, 800c8c8 <_scanf_i+0xb8>
 800c87c:	f1bb 0f01 	cmp.w	fp, #1
 800c880:	d159      	bne.n	800c936 <_scanf_i+0x126>
 800c882:	6862      	ldr	r2, [r4, #4]
 800c884:	b92a      	cbnz	r2, 800c892 <_scanf_i+0x82>
 800c886:	6822      	ldr	r2, [r4, #0]
 800c888:	2308      	movs	r3, #8
 800c88a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c88e:	6063      	str	r3, [r4, #4]
 800c890:	6022      	str	r2, [r4, #0]
 800c892:	6822      	ldr	r2, [r4, #0]
 800c894:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c898:	6022      	str	r2, [r4, #0]
 800c89a:	68a2      	ldr	r2, [r4, #8]
 800c89c:	1e51      	subs	r1, r2, #1
 800c89e:	60a1      	str	r1, [r4, #8]
 800c8a0:	b192      	cbz	r2, 800c8c8 <_scanf_i+0xb8>
 800c8a2:	6832      	ldr	r2, [r6, #0]
 800c8a4:	1c51      	adds	r1, r2, #1
 800c8a6:	6031      	str	r1, [r6, #0]
 800c8a8:	7812      	ldrb	r2, [r2, #0]
 800c8aa:	f805 2b01 	strb.w	r2, [r5], #1
 800c8ae:	6872      	ldr	r2, [r6, #4]
 800c8b0:	3a01      	subs	r2, #1
 800c8b2:	2a00      	cmp	r2, #0
 800c8b4:	6072      	str	r2, [r6, #4]
 800c8b6:	dc07      	bgt.n	800c8c8 <_scanf_i+0xb8>
 800c8b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c8bc:	4631      	mov	r1, r6
 800c8be:	4650      	mov	r0, sl
 800c8c0:	4790      	blx	r2
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	f040 8085 	bne.w	800c9d2 <_scanf_i+0x1c2>
 800c8c8:	f10b 0b01 	add.w	fp, fp, #1
 800c8cc:	f1bb 0f03 	cmp.w	fp, #3
 800c8d0:	d1cb      	bne.n	800c86a <_scanf_i+0x5a>
 800c8d2:	6863      	ldr	r3, [r4, #4]
 800c8d4:	b90b      	cbnz	r3, 800c8da <_scanf_i+0xca>
 800c8d6:	230a      	movs	r3, #10
 800c8d8:	6063      	str	r3, [r4, #4]
 800c8da:	6863      	ldr	r3, [r4, #4]
 800c8dc:	4947      	ldr	r1, [pc, #284]	; (800c9fc <_scanf_i+0x1ec>)
 800c8de:	6960      	ldr	r0, [r4, #20]
 800c8e0:	1ac9      	subs	r1, r1, r3
 800c8e2:	f000 f8a9 	bl	800ca38 <__sccl>
 800c8e6:	f04f 0b00 	mov.w	fp, #0
 800c8ea:	68a3      	ldr	r3, [r4, #8]
 800c8ec:	6822      	ldr	r2, [r4, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d03d      	beq.n	800c96e <_scanf_i+0x15e>
 800c8f2:	6831      	ldr	r1, [r6, #0]
 800c8f4:	6960      	ldr	r0, [r4, #20]
 800c8f6:	f891 c000 	ldrb.w	ip, [r1]
 800c8fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d035      	beq.n	800c96e <_scanf_i+0x15e>
 800c902:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c906:	d124      	bne.n	800c952 <_scanf_i+0x142>
 800c908:	0510      	lsls	r0, r2, #20
 800c90a:	d522      	bpl.n	800c952 <_scanf_i+0x142>
 800c90c:	f10b 0b01 	add.w	fp, fp, #1
 800c910:	f1b9 0f00 	cmp.w	r9, #0
 800c914:	d003      	beq.n	800c91e <_scanf_i+0x10e>
 800c916:	3301      	adds	r3, #1
 800c918:	f109 39ff 	add.w	r9, r9, #4294967295
 800c91c:	60a3      	str	r3, [r4, #8]
 800c91e:	6873      	ldr	r3, [r6, #4]
 800c920:	3b01      	subs	r3, #1
 800c922:	2b00      	cmp	r3, #0
 800c924:	6073      	str	r3, [r6, #4]
 800c926:	dd1b      	ble.n	800c960 <_scanf_i+0x150>
 800c928:	6833      	ldr	r3, [r6, #0]
 800c92a:	3301      	adds	r3, #1
 800c92c:	6033      	str	r3, [r6, #0]
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	3b01      	subs	r3, #1
 800c932:	60a3      	str	r3, [r4, #8]
 800c934:	e7d9      	b.n	800c8ea <_scanf_i+0xda>
 800c936:	f1bb 0f02 	cmp.w	fp, #2
 800c93a:	d1ae      	bne.n	800c89a <_scanf_i+0x8a>
 800c93c:	6822      	ldr	r2, [r4, #0]
 800c93e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c942:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c946:	d1bf      	bne.n	800c8c8 <_scanf_i+0xb8>
 800c948:	2310      	movs	r3, #16
 800c94a:	6063      	str	r3, [r4, #4]
 800c94c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c950:	e7a2      	b.n	800c898 <_scanf_i+0x88>
 800c952:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c956:	6022      	str	r2, [r4, #0]
 800c958:	780b      	ldrb	r3, [r1, #0]
 800c95a:	f805 3b01 	strb.w	r3, [r5], #1
 800c95e:	e7de      	b.n	800c91e <_scanf_i+0x10e>
 800c960:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c964:	4631      	mov	r1, r6
 800c966:	4650      	mov	r0, sl
 800c968:	4798      	blx	r3
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d0df      	beq.n	800c92e <_scanf_i+0x11e>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	05db      	lsls	r3, r3, #23
 800c972:	d50d      	bpl.n	800c990 <_scanf_i+0x180>
 800c974:	42bd      	cmp	r5, r7
 800c976:	d909      	bls.n	800c98c <_scanf_i+0x17c>
 800c978:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c97c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c980:	4632      	mov	r2, r6
 800c982:	4650      	mov	r0, sl
 800c984:	4798      	blx	r3
 800c986:	f105 39ff 	add.w	r9, r5, #4294967295
 800c98a:	464d      	mov	r5, r9
 800c98c:	42bd      	cmp	r5, r7
 800c98e:	d02d      	beq.n	800c9ec <_scanf_i+0x1dc>
 800c990:	6822      	ldr	r2, [r4, #0]
 800c992:	f012 0210 	ands.w	r2, r2, #16
 800c996:	d113      	bne.n	800c9c0 <_scanf_i+0x1b0>
 800c998:	702a      	strb	r2, [r5, #0]
 800c99a:	6863      	ldr	r3, [r4, #4]
 800c99c:	9e01      	ldr	r6, [sp, #4]
 800c99e:	4639      	mov	r1, r7
 800c9a0:	4650      	mov	r0, sl
 800c9a2:	47b0      	blx	r6
 800c9a4:	6821      	ldr	r1, [r4, #0]
 800c9a6:	f8d8 3000 	ldr.w	r3, [r8]
 800c9aa:	f011 0f20 	tst.w	r1, #32
 800c9ae:	d013      	beq.n	800c9d8 <_scanf_i+0x1c8>
 800c9b0:	1d1a      	adds	r2, r3, #4
 800c9b2:	f8c8 2000 	str.w	r2, [r8]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6018      	str	r0, [r3, #0]
 800c9ba:	68e3      	ldr	r3, [r4, #12]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	60e3      	str	r3, [r4, #12]
 800c9c0:	1bed      	subs	r5, r5, r7
 800c9c2:	44ab      	add	fp, r5
 800c9c4:	6925      	ldr	r5, [r4, #16]
 800c9c6:	445d      	add	r5, fp
 800c9c8:	6125      	str	r5, [r4, #16]
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	b007      	add	sp, #28
 800c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d2:	f04f 0b00 	mov.w	fp, #0
 800c9d6:	e7ca      	b.n	800c96e <_scanf_i+0x15e>
 800c9d8:	1d1a      	adds	r2, r3, #4
 800c9da:	f8c8 2000 	str.w	r2, [r8]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f011 0f01 	tst.w	r1, #1
 800c9e4:	bf14      	ite	ne
 800c9e6:	8018      	strhne	r0, [r3, #0]
 800c9e8:	6018      	streq	r0, [r3, #0]
 800c9ea:	e7e6      	b.n	800c9ba <_scanf_i+0x1aa>
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	e7ed      	b.n	800c9cc <_scanf_i+0x1bc>
 800c9f0:	0800d858 	.word	0x0800d858
 800c9f4:	0800cbb5 	.word	0x0800cbb5
 800c9f8:	0800a2cd 	.word	0x0800a2cd
 800c9fc:	0800e486 	.word	0x0800e486

0800ca00 <_read_r>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	4d07      	ldr	r5, [pc, #28]	; (800ca20 <_read_r+0x20>)
 800ca04:	4604      	mov	r4, r0
 800ca06:	4608      	mov	r0, r1
 800ca08:	4611      	mov	r1, r2
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	602a      	str	r2, [r5, #0]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	f7f5 fe44 	bl	800269c <_read>
 800ca14:	1c43      	adds	r3, r0, #1
 800ca16:	d102      	bne.n	800ca1e <_read_r+0x1e>
 800ca18:	682b      	ldr	r3, [r5, #0]
 800ca1a:	b103      	cbz	r3, 800ca1e <_read_r+0x1e>
 800ca1c:	6023      	str	r3, [r4, #0]
 800ca1e:	bd38      	pop	{r3, r4, r5, pc}
 800ca20:	20004fb0 	.word	0x20004fb0
 800ca24:	00000000 	.word	0x00000000

0800ca28 <nan>:
 800ca28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ca30 <nan+0x8>
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	00000000 	.word	0x00000000
 800ca34:	7ff80000 	.word	0x7ff80000

0800ca38 <__sccl>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	780b      	ldrb	r3, [r1, #0]
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	2b5e      	cmp	r3, #94	; 0x5e
 800ca40:	bf0b      	itete	eq
 800ca42:	784b      	ldrbeq	r3, [r1, #1]
 800ca44:	1c48      	addne	r0, r1, #1
 800ca46:	1c88      	addeq	r0, r1, #2
 800ca48:	2200      	movne	r2, #0
 800ca4a:	bf08      	it	eq
 800ca4c:	2201      	moveq	r2, #1
 800ca4e:	1e61      	subs	r1, r4, #1
 800ca50:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ca54:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ca58:	42a9      	cmp	r1, r5
 800ca5a:	d1fb      	bne.n	800ca54 <__sccl+0x1c>
 800ca5c:	b90b      	cbnz	r3, 800ca62 <__sccl+0x2a>
 800ca5e:	3801      	subs	r0, #1
 800ca60:	bd70      	pop	{r4, r5, r6, pc}
 800ca62:	f082 0201 	eor.w	r2, r2, #1
 800ca66:	54e2      	strb	r2, [r4, r3]
 800ca68:	4605      	mov	r5, r0
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ca70:	292d      	cmp	r1, #45	; 0x2d
 800ca72:	d006      	beq.n	800ca82 <__sccl+0x4a>
 800ca74:	295d      	cmp	r1, #93	; 0x5d
 800ca76:	d0f3      	beq.n	800ca60 <__sccl+0x28>
 800ca78:	b909      	cbnz	r1, 800ca7e <__sccl+0x46>
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	e7f0      	b.n	800ca60 <__sccl+0x28>
 800ca7e:	460b      	mov	r3, r1
 800ca80:	e7f1      	b.n	800ca66 <__sccl+0x2e>
 800ca82:	786e      	ldrb	r6, [r5, #1]
 800ca84:	2e5d      	cmp	r6, #93	; 0x5d
 800ca86:	d0fa      	beq.n	800ca7e <__sccl+0x46>
 800ca88:	42b3      	cmp	r3, r6
 800ca8a:	dcf8      	bgt.n	800ca7e <__sccl+0x46>
 800ca8c:	3502      	adds	r5, #2
 800ca8e:	4619      	mov	r1, r3
 800ca90:	3101      	adds	r1, #1
 800ca92:	428e      	cmp	r6, r1
 800ca94:	5462      	strb	r2, [r4, r1]
 800ca96:	dcfb      	bgt.n	800ca90 <__sccl+0x58>
 800ca98:	1af1      	subs	r1, r6, r3
 800ca9a:	3901      	subs	r1, #1
 800ca9c:	1c58      	adds	r0, r3, #1
 800ca9e:	42b3      	cmp	r3, r6
 800caa0:	bfa8      	it	ge
 800caa2:	2100      	movge	r1, #0
 800caa4:	1843      	adds	r3, r0, r1
 800caa6:	e7e0      	b.n	800ca6a <__sccl+0x32>

0800caa8 <strncmp>:
 800caa8:	b510      	push	{r4, lr}
 800caaa:	b17a      	cbz	r2, 800cacc <strncmp+0x24>
 800caac:	4603      	mov	r3, r0
 800caae:	3901      	subs	r1, #1
 800cab0:	1884      	adds	r4, r0, r2
 800cab2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cab6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800caba:	4290      	cmp	r0, r2
 800cabc:	d101      	bne.n	800cac2 <strncmp+0x1a>
 800cabe:	42a3      	cmp	r3, r4
 800cac0:	d101      	bne.n	800cac6 <strncmp+0x1e>
 800cac2:	1a80      	subs	r0, r0, r2
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d1f3      	bne.n	800cab2 <strncmp+0xa>
 800caca:	e7fa      	b.n	800cac2 <strncmp+0x1a>
 800cacc:	4610      	mov	r0, r2
 800cace:	e7f9      	b.n	800cac4 <strncmp+0x1c>

0800cad0 <_strtoul_l.constprop.0>:
 800cad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cad4:	4f36      	ldr	r7, [pc, #216]	; (800cbb0 <_strtoul_l.constprop.0+0xe0>)
 800cad6:	4686      	mov	lr, r0
 800cad8:	460d      	mov	r5, r1
 800cada:	4628      	mov	r0, r5
 800cadc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cae0:	5de6      	ldrb	r6, [r4, r7]
 800cae2:	f016 0608 	ands.w	r6, r6, #8
 800cae6:	d1f8      	bne.n	800cada <_strtoul_l.constprop.0+0xa>
 800cae8:	2c2d      	cmp	r4, #45	; 0x2d
 800caea:	d12f      	bne.n	800cb4c <_strtoul_l.constprop.0+0x7c>
 800caec:	782c      	ldrb	r4, [r5, #0]
 800caee:	2601      	movs	r6, #1
 800caf0:	1c85      	adds	r5, r0, #2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d057      	beq.n	800cba6 <_strtoul_l.constprop.0+0xd6>
 800caf6:	2b10      	cmp	r3, #16
 800caf8:	d109      	bne.n	800cb0e <_strtoul_l.constprop.0+0x3e>
 800cafa:	2c30      	cmp	r4, #48	; 0x30
 800cafc:	d107      	bne.n	800cb0e <_strtoul_l.constprop.0+0x3e>
 800cafe:	7828      	ldrb	r0, [r5, #0]
 800cb00:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cb04:	2858      	cmp	r0, #88	; 0x58
 800cb06:	d149      	bne.n	800cb9c <_strtoul_l.constprop.0+0xcc>
 800cb08:	786c      	ldrb	r4, [r5, #1]
 800cb0a:	2310      	movs	r3, #16
 800cb0c:	3502      	adds	r5, #2
 800cb0e:	f04f 38ff 	mov.w	r8, #4294967295
 800cb12:	2700      	movs	r7, #0
 800cb14:	fbb8 f8f3 	udiv	r8, r8, r3
 800cb18:	fb03 f908 	mul.w	r9, r3, r8
 800cb1c:	ea6f 0909 	mvn.w	r9, r9
 800cb20:	4638      	mov	r0, r7
 800cb22:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cb26:	f1bc 0f09 	cmp.w	ip, #9
 800cb2a:	d814      	bhi.n	800cb56 <_strtoul_l.constprop.0+0x86>
 800cb2c:	4664      	mov	r4, ip
 800cb2e:	42a3      	cmp	r3, r4
 800cb30:	dd22      	ble.n	800cb78 <_strtoul_l.constprop.0+0xa8>
 800cb32:	2f00      	cmp	r7, #0
 800cb34:	db1d      	blt.n	800cb72 <_strtoul_l.constprop.0+0xa2>
 800cb36:	4580      	cmp	r8, r0
 800cb38:	d31b      	bcc.n	800cb72 <_strtoul_l.constprop.0+0xa2>
 800cb3a:	d101      	bne.n	800cb40 <_strtoul_l.constprop.0+0x70>
 800cb3c:	45a1      	cmp	r9, r4
 800cb3e:	db18      	blt.n	800cb72 <_strtoul_l.constprop.0+0xa2>
 800cb40:	fb00 4003 	mla	r0, r0, r3, r4
 800cb44:	2701      	movs	r7, #1
 800cb46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb4a:	e7ea      	b.n	800cb22 <_strtoul_l.constprop.0+0x52>
 800cb4c:	2c2b      	cmp	r4, #43	; 0x2b
 800cb4e:	bf04      	itt	eq
 800cb50:	782c      	ldrbeq	r4, [r5, #0]
 800cb52:	1c85      	addeq	r5, r0, #2
 800cb54:	e7cd      	b.n	800caf2 <_strtoul_l.constprop.0+0x22>
 800cb56:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb5a:	f1bc 0f19 	cmp.w	ip, #25
 800cb5e:	d801      	bhi.n	800cb64 <_strtoul_l.constprop.0+0x94>
 800cb60:	3c37      	subs	r4, #55	; 0x37
 800cb62:	e7e4      	b.n	800cb2e <_strtoul_l.constprop.0+0x5e>
 800cb64:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb68:	f1bc 0f19 	cmp.w	ip, #25
 800cb6c:	d804      	bhi.n	800cb78 <_strtoul_l.constprop.0+0xa8>
 800cb6e:	3c57      	subs	r4, #87	; 0x57
 800cb70:	e7dd      	b.n	800cb2e <_strtoul_l.constprop.0+0x5e>
 800cb72:	f04f 37ff 	mov.w	r7, #4294967295
 800cb76:	e7e6      	b.n	800cb46 <_strtoul_l.constprop.0+0x76>
 800cb78:	2f00      	cmp	r7, #0
 800cb7a:	da07      	bge.n	800cb8c <_strtoul_l.constprop.0+0xbc>
 800cb7c:	2322      	movs	r3, #34	; 0x22
 800cb7e:	f8ce 3000 	str.w	r3, [lr]
 800cb82:	f04f 30ff 	mov.w	r0, #4294967295
 800cb86:	b932      	cbnz	r2, 800cb96 <_strtoul_l.constprop.0+0xc6>
 800cb88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb8c:	b106      	cbz	r6, 800cb90 <_strtoul_l.constprop.0+0xc0>
 800cb8e:	4240      	negs	r0, r0
 800cb90:	2a00      	cmp	r2, #0
 800cb92:	d0f9      	beq.n	800cb88 <_strtoul_l.constprop.0+0xb8>
 800cb94:	b107      	cbz	r7, 800cb98 <_strtoul_l.constprop.0+0xc8>
 800cb96:	1e69      	subs	r1, r5, #1
 800cb98:	6011      	str	r1, [r2, #0]
 800cb9a:	e7f5      	b.n	800cb88 <_strtoul_l.constprop.0+0xb8>
 800cb9c:	2430      	movs	r4, #48	; 0x30
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1b5      	bne.n	800cb0e <_strtoul_l.constprop.0+0x3e>
 800cba2:	2308      	movs	r3, #8
 800cba4:	e7b3      	b.n	800cb0e <_strtoul_l.constprop.0+0x3e>
 800cba6:	2c30      	cmp	r4, #48	; 0x30
 800cba8:	d0a9      	beq.n	800cafe <_strtoul_l.constprop.0+0x2e>
 800cbaa:	230a      	movs	r3, #10
 800cbac:	e7af      	b.n	800cb0e <_strtoul_l.constprop.0+0x3e>
 800cbae:	bf00      	nop
 800cbb0:	0800e0f9 	.word	0x0800e0f9

0800cbb4 <_strtoul_r>:
 800cbb4:	f7ff bf8c 	b.w	800cad0 <_strtoul_l.constprop.0>

0800cbb8 <__submore>:
 800cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cbc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbc4:	4299      	cmp	r1, r3
 800cbc6:	d11d      	bne.n	800cc04 <__submore+0x4c>
 800cbc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cbcc:	f7fb fd3c 	bl	8008648 <_malloc_r>
 800cbd0:	b918      	cbnz	r0, 800cbda <__submore+0x22>
 800cbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbde:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbe0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cbe4:	6360      	str	r0, [r4, #52]	; 0x34
 800cbe6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cbea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cbee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cbf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cbf6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cbfa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cbfe:	6020      	str	r0, [r4, #0]
 800cc00:	2000      	movs	r0, #0
 800cc02:	e7e8      	b.n	800cbd6 <__submore+0x1e>
 800cc04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cc06:	0077      	lsls	r7, r6, #1
 800cc08:	463a      	mov	r2, r7
 800cc0a:	f000 fa07 	bl	800d01c <_realloc_r>
 800cc0e:	4605      	mov	r5, r0
 800cc10:	2800      	cmp	r0, #0
 800cc12:	d0de      	beq.n	800cbd2 <__submore+0x1a>
 800cc14:	eb00 0806 	add.w	r8, r0, r6
 800cc18:	4601      	mov	r1, r0
 800cc1a:	4632      	mov	r2, r6
 800cc1c:	4640      	mov	r0, r8
 800cc1e:	f7fb fc77 	bl	8008510 <memcpy>
 800cc22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cc26:	f8c4 8000 	str.w	r8, [r4]
 800cc2a:	e7e9      	b.n	800cc00 <__submore+0x48>

0800cc2c <__ascii_wctomb>:
 800cc2c:	b149      	cbz	r1, 800cc42 <__ascii_wctomb+0x16>
 800cc2e:	2aff      	cmp	r2, #255	; 0xff
 800cc30:	bf85      	ittet	hi
 800cc32:	238a      	movhi	r3, #138	; 0x8a
 800cc34:	6003      	strhi	r3, [r0, #0]
 800cc36:	700a      	strbls	r2, [r1, #0]
 800cc38:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc3c:	bf98      	it	ls
 800cc3e:	2001      	movls	r0, #1
 800cc40:	4770      	bx	lr
 800cc42:	4608      	mov	r0, r1
 800cc44:	4770      	bx	lr
	...

0800cc48 <__assert_func>:
 800cc48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc4a:	4614      	mov	r4, r2
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <__assert_func+0x2c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4605      	mov	r5, r0
 800cc54:	68d8      	ldr	r0, [r3, #12]
 800cc56:	b14c      	cbz	r4, 800cc6c <__assert_func+0x24>
 800cc58:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <__assert_func+0x30>)
 800cc5a:	9100      	str	r1, [sp, #0]
 800cc5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc60:	4906      	ldr	r1, [pc, #24]	; (800cc7c <__assert_func+0x34>)
 800cc62:	462b      	mov	r3, r5
 800cc64:	f000 f9a6 	bl	800cfb4 <fiprintf>
 800cc68:	f000 fc20 	bl	800d4ac <abort>
 800cc6c:	4b04      	ldr	r3, [pc, #16]	; (800cc80 <__assert_func+0x38>)
 800cc6e:	461c      	mov	r4, r3
 800cc70:	e7f3      	b.n	800cc5a <__assert_func+0x12>
 800cc72:	bf00      	nop
 800cc74:	2000001c 	.word	0x2000001c
 800cc78:	0800e488 	.word	0x0800e488
 800cc7c:	0800e495 	.word	0x0800e495
 800cc80:	0800e4c3 	.word	0x0800e4c3

0800cc84 <__sflush_r>:
 800cc84:	898a      	ldrh	r2, [r1, #12]
 800cc86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	0710      	lsls	r0, r2, #28
 800cc8e:	460c      	mov	r4, r1
 800cc90:	d458      	bmi.n	800cd44 <__sflush_r+0xc0>
 800cc92:	684b      	ldr	r3, [r1, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	dc05      	bgt.n	800cca4 <__sflush_r+0x20>
 800cc98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	dc02      	bgt.n	800cca4 <__sflush_r+0x20>
 800cc9e:	2000      	movs	r0, #0
 800cca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	d0f9      	beq.n	800cc9e <__sflush_r+0x1a>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccb0:	682f      	ldr	r7, [r5, #0]
 800ccb2:	602b      	str	r3, [r5, #0]
 800ccb4:	d032      	beq.n	800cd1c <__sflush_r+0x98>
 800ccb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccb8:	89a3      	ldrh	r3, [r4, #12]
 800ccba:	075a      	lsls	r2, r3, #29
 800ccbc:	d505      	bpl.n	800ccca <__sflush_r+0x46>
 800ccbe:	6863      	ldr	r3, [r4, #4]
 800ccc0:	1ac0      	subs	r0, r0, r3
 800ccc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccc4:	b10b      	cbz	r3, 800ccca <__sflush_r+0x46>
 800ccc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccc8:	1ac0      	subs	r0, r0, r3
 800ccca:	2300      	movs	r3, #0
 800cccc:	4602      	mov	r2, r0
 800ccce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccd0:	6a21      	ldr	r1, [r4, #32]
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	47b0      	blx	r6
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	d106      	bne.n	800ccea <__sflush_r+0x66>
 800ccdc:	6829      	ldr	r1, [r5, #0]
 800ccde:	291d      	cmp	r1, #29
 800cce0:	d82c      	bhi.n	800cd3c <__sflush_r+0xb8>
 800cce2:	4a2a      	ldr	r2, [pc, #168]	; (800cd8c <__sflush_r+0x108>)
 800cce4:	40ca      	lsrs	r2, r1
 800cce6:	07d6      	lsls	r6, r2, #31
 800cce8:	d528      	bpl.n	800cd3c <__sflush_r+0xb8>
 800ccea:	2200      	movs	r2, #0
 800ccec:	6062      	str	r2, [r4, #4]
 800ccee:	04d9      	lsls	r1, r3, #19
 800ccf0:	6922      	ldr	r2, [r4, #16]
 800ccf2:	6022      	str	r2, [r4, #0]
 800ccf4:	d504      	bpl.n	800cd00 <__sflush_r+0x7c>
 800ccf6:	1c42      	adds	r2, r0, #1
 800ccf8:	d101      	bne.n	800ccfe <__sflush_r+0x7a>
 800ccfa:	682b      	ldr	r3, [r5, #0]
 800ccfc:	b903      	cbnz	r3, 800cd00 <__sflush_r+0x7c>
 800ccfe:	6560      	str	r0, [r4, #84]	; 0x54
 800cd00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd02:	602f      	str	r7, [r5, #0]
 800cd04:	2900      	cmp	r1, #0
 800cd06:	d0ca      	beq.n	800cc9e <__sflush_r+0x1a>
 800cd08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd0c:	4299      	cmp	r1, r3
 800cd0e:	d002      	beq.n	800cd16 <__sflush_r+0x92>
 800cd10:	4628      	mov	r0, r5
 800cd12:	f7fb fc2d 	bl	8008570 <_free_r>
 800cd16:	2000      	movs	r0, #0
 800cd18:	6360      	str	r0, [r4, #52]	; 0x34
 800cd1a:	e7c1      	b.n	800cca0 <__sflush_r+0x1c>
 800cd1c:	6a21      	ldr	r1, [r4, #32]
 800cd1e:	2301      	movs	r3, #1
 800cd20:	4628      	mov	r0, r5
 800cd22:	47b0      	blx	r6
 800cd24:	1c41      	adds	r1, r0, #1
 800cd26:	d1c7      	bne.n	800ccb8 <__sflush_r+0x34>
 800cd28:	682b      	ldr	r3, [r5, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d0c4      	beq.n	800ccb8 <__sflush_r+0x34>
 800cd2e:	2b1d      	cmp	r3, #29
 800cd30:	d001      	beq.n	800cd36 <__sflush_r+0xb2>
 800cd32:	2b16      	cmp	r3, #22
 800cd34:	d101      	bne.n	800cd3a <__sflush_r+0xb6>
 800cd36:	602f      	str	r7, [r5, #0]
 800cd38:	e7b1      	b.n	800cc9e <__sflush_r+0x1a>
 800cd3a:	89a3      	ldrh	r3, [r4, #12]
 800cd3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd40:	81a3      	strh	r3, [r4, #12]
 800cd42:	e7ad      	b.n	800cca0 <__sflush_r+0x1c>
 800cd44:	690f      	ldr	r7, [r1, #16]
 800cd46:	2f00      	cmp	r7, #0
 800cd48:	d0a9      	beq.n	800cc9e <__sflush_r+0x1a>
 800cd4a:	0793      	lsls	r3, r2, #30
 800cd4c:	680e      	ldr	r6, [r1, #0]
 800cd4e:	bf08      	it	eq
 800cd50:	694b      	ldreq	r3, [r1, #20]
 800cd52:	600f      	str	r7, [r1, #0]
 800cd54:	bf18      	it	ne
 800cd56:	2300      	movne	r3, #0
 800cd58:	eba6 0807 	sub.w	r8, r6, r7
 800cd5c:	608b      	str	r3, [r1, #8]
 800cd5e:	f1b8 0f00 	cmp.w	r8, #0
 800cd62:	dd9c      	ble.n	800cc9e <__sflush_r+0x1a>
 800cd64:	6a21      	ldr	r1, [r4, #32]
 800cd66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd68:	4643      	mov	r3, r8
 800cd6a:	463a      	mov	r2, r7
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	47b0      	blx	r6
 800cd70:	2800      	cmp	r0, #0
 800cd72:	dc06      	bgt.n	800cd82 <__sflush_r+0xfe>
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd80:	e78e      	b.n	800cca0 <__sflush_r+0x1c>
 800cd82:	4407      	add	r7, r0
 800cd84:	eba8 0800 	sub.w	r8, r8, r0
 800cd88:	e7e9      	b.n	800cd5e <__sflush_r+0xda>
 800cd8a:	bf00      	nop
 800cd8c:	20400001 	.word	0x20400001

0800cd90 <_fflush_r>:
 800cd90:	b538      	push	{r3, r4, r5, lr}
 800cd92:	690b      	ldr	r3, [r1, #16]
 800cd94:	4605      	mov	r5, r0
 800cd96:	460c      	mov	r4, r1
 800cd98:	b913      	cbnz	r3, 800cda0 <_fflush_r+0x10>
 800cd9a:	2500      	movs	r5, #0
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	b118      	cbz	r0, 800cdaa <_fflush_r+0x1a>
 800cda2:	6983      	ldr	r3, [r0, #24]
 800cda4:	b90b      	cbnz	r3, 800cdaa <_fflush_r+0x1a>
 800cda6:	f000 f887 	bl	800ceb8 <__sinit>
 800cdaa:	4b14      	ldr	r3, [pc, #80]	; (800cdfc <_fflush_r+0x6c>)
 800cdac:	429c      	cmp	r4, r3
 800cdae:	d11b      	bne.n	800cde8 <_fflush_r+0x58>
 800cdb0:	686c      	ldr	r4, [r5, #4]
 800cdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d0ef      	beq.n	800cd9a <_fflush_r+0xa>
 800cdba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdbc:	07d0      	lsls	r0, r2, #31
 800cdbe:	d404      	bmi.n	800cdca <_fflush_r+0x3a>
 800cdc0:	0599      	lsls	r1, r3, #22
 800cdc2:	d402      	bmi.n	800cdca <_fflush_r+0x3a>
 800cdc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdc6:	f000 f927 	bl	800d018 <__retarget_lock_acquire_recursive>
 800cdca:	4628      	mov	r0, r5
 800cdcc:	4621      	mov	r1, r4
 800cdce:	f7ff ff59 	bl	800cc84 <__sflush_r>
 800cdd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdd4:	07da      	lsls	r2, r3, #31
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	d4e0      	bmi.n	800cd9c <_fflush_r+0xc>
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	059b      	lsls	r3, r3, #22
 800cdde:	d4dd      	bmi.n	800cd9c <_fflush_r+0xc>
 800cde0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cde2:	f000 f91a 	bl	800d01a <__retarget_lock_release_recursive>
 800cde6:	e7d9      	b.n	800cd9c <_fflush_r+0xc>
 800cde8:	4b05      	ldr	r3, [pc, #20]	; (800ce00 <_fflush_r+0x70>)
 800cdea:	429c      	cmp	r4, r3
 800cdec:	d101      	bne.n	800cdf2 <_fflush_r+0x62>
 800cdee:	68ac      	ldr	r4, [r5, #8]
 800cdf0:	e7df      	b.n	800cdb2 <_fflush_r+0x22>
 800cdf2:	4b04      	ldr	r3, [pc, #16]	; (800ce04 <_fflush_r+0x74>)
 800cdf4:	429c      	cmp	r4, r3
 800cdf6:	bf08      	it	eq
 800cdf8:	68ec      	ldreq	r4, [r5, #12]
 800cdfa:	e7da      	b.n	800cdb2 <_fflush_r+0x22>
 800cdfc:	0800e4e4 	.word	0x0800e4e4
 800ce00:	0800e504 	.word	0x0800e504
 800ce04:	0800e4c4 	.word	0x0800e4c4

0800ce08 <std>:
 800ce08:	2300      	movs	r3, #0
 800ce0a:	b510      	push	{r4, lr}
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	e9c0 3300 	strd	r3, r3, [r0]
 800ce12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce16:	6083      	str	r3, [r0, #8]
 800ce18:	8181      	strh	r1, [r0, #12]
 800ce1a:	6643      	str	r3, [r0, #100]	; 0x64
 800ce1c:	81c2      	strh	r2, [r0, #14]
 800ce1e:	6183      	str	r3, [r0, #24]
 800ce20:	4619      	mov	r1, r3
 800ce22:	2208      	movs	r2, #8
 800ce24:	305c      	adds	r0, #92	; 0x5c
 800ce26:	f7fb fb9b 	bl	8008560 <memset>
 800ce2a:	4b05      	ldr	r3, [pc, #20]	; (800ce40 <std+0x38>)
 800ce2c:	6263      	str	r3, [r4, #36]	; 0x24
 800ce2e:	4b05      	ldr	r3, [pc, #20]	; (800ce44 <std+0x3c>)
 800ce30:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce32:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <std+0x40>)
 800ce34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce36:	4b05      	ldr	r3, [pc, #20]	; (800ce4c <std+0x44>)
 800ce38:	6224      	str	r4, [r4, #32]
 800ce3a:	6323      	str	r3, [r4, #48]	; 0x30
 800ce3c:	bd10      	pop	{r4, pc}
 800ce3e:	bf00      	nop
 800ce40:	080094e9 	.word	0x080094e9
 800ce44:	0800950f 	.word	0x0800950f
 800ce48:	08009547 	.word	0x08009547
 800ce4c:	0800956b 	.word	0x0800956b

0800ce50 <_cleanup_r>:
 800ce50:	4901      	ldr	r1, [pc, #4]	; (800ce58 <_cleanup_r+0x8>)
 800ce52:	f000 b8c1 	b.w	800cfd8 <_fwalk_reent>
 800ce56:	bf00      	nop
 800ce58:	0800cd91 	.word	0x0800cd91

0800ce5c <__sfmoreglue>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	2268      	movs	r2, #104	; 0x68
 800ce60:	1e4d      	subs	r5, r1, #1
 800ce62:	4355      	muls	r5, r2
 800ce64:	460e      	mov	r6, r1
 800ce66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce6a:	f7fb fbed 	bl	8008648 <_malloc_r>
 800ce6e:	4604      	mov	r4, r0
 800ce70:	b140      	cbz	r0, 800ce84 <__sfmoreglue+0x28>
 800ce72:	2100      	movs	r1, #0
 800ce74:	e9c0 1600 	strd	r1, r6, [r0]
 800ce78:	300c      	adds	r0, #12
 800ce7a:	60a0      	str	r0, [r4, #8]
 800ce7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce80:	f7fb fb6e 	bl	8008560 <memset>
 800ce84:	4620      	mov	r0, r4
 800ce86:	bd70      	pop	{r4, r5, r6, pc}

0800ce88 <__sfp_lock_acquire>:
 800ce88:	4801      	ldr	r0, [pc, #4]	; (800ce90 <__sfp_lock_acquire+0x8>)
 800ce8a:	f000 b8c5 	b.w	800d018 <__retarget_lock_acquire_recursive>
 800ce8e:	bf00      	nop
 800ce90:	20004fb5 	.word	0x20004fb5

0800ce94 <__sfp_lock_release>:
 800ce94:	4801      	ldr	r0, [pc, #4]	; (800ce9c <__sfp_lock_release+0x8>)
 800ce96:	f000 b8c0 	b.w	800d01a <__retarget_lock_release_recursive>
 800ce9a:	bf00      	nop
 800ce9c:	20004fb5 	.word	0x20004fb5

0800cea0 <__sinit_lock_acquire>:
 800cea0:	4801      	ldr	r0, [pc, #4]	; (800cea8 <__sinit_lock_acquire+0x8>)
 800cea2:	f000 b8b9 	b.w	800d018 <__retarget_lock_acquire_recursive>
 800cea6:	bf00      	nop
 800cea8:	20004fb6 	.word	0x20004fb6

0800ceac <__sinit_lock_release>:
 800ceac:	4801      	ldr	r0, [pc, #4]	; (800ceb4 <__sinit_lock_release+0x8>)
 800ceae:	f000 b8b4 	b.w	800d01a <__retarget_lock_release_recursive>
 800ceb2:	bf00      	nop
 800ceb4:	20004fb6 	.word	0x20004fb6

0800ceb8 <__sinit>:
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	4604      	mov	r4, r0
 800cebc:	f7ff fff0 	bl	800cea0 <__sinit_lock_acquire>
 800cec0:	69a3      	ldr	r3, [r4, #24]
 800cec2:	b11b      	cbz	r3, 800cecc <__sinit+0x14>
 800cec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cec8:	f7ff bff0 	b.w	800ceac <__sinit_lock_release>
 800cecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ced0:	6523      	str	r3, [r4, #80]	; 0x50
 800ced2:	4b13      	ldr	r3, [pc, #76]	; (800cf20 <__sinit+0x68>)
 800ced4:	4a13      	ldr	r2, [pc, #76]	; (800cf24 <__sinit+0x6c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ceda:	42a3      	cmp	r3, r4
 800cedc:	bf04      	itt	eq
 800cede:	2301      	moveq	r3, #1
 800cee0:	61a3      	streq	r3, [r4, #24]
 800cee2:	4620      	mov	r0, r4
 800cee4:	f000 f820 	bl	800cf28 <__sfp>
 800cee8:	6060      	str	r0, [r4, #4]
 800ceea:	4620      	mov	r0, r4
 800ceec:	f000 f81c 	bl	800cf28 <__sfp>
 800cef0:	60a0      	str	r0, [r4, #8]
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 f818 	bl	800cf28 <__sfp>
 800cef8:	2200      	movs	r2, #0
 800cefa:	60e0      	str	r0, [r4, #12]
 800cefc:	2104      	movs	r1, #4
 800cefe:	6860      	ldr	r0, [r4, #4]
 800cf00:	f7ff ff82 	bl	800ce08 <std>
 800cf04:	68a0      	ldr	r0, [r4, #8]
 800cf06:	2201      	movs	r2, #1
 800cf08:	2109      	movs	r1, #9
 800cf0a:	f7ff ff7d 	bl	800ce08 <std>
 800cf0e:	68e0      	ldr	r0, [r4, #12]
 800cf10:	2202      	movs	r2, #2
 800cf12:	2112      	movs	r1, #18
 800cf14:	f7ff ff78 	bl	800ce08 <std>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	61a3      	str	r3, [r4, #24]
 800cf1c:	e7d2      	b.n	800cec4 <__sinit+0xc>
 800cf1e:	bf00      	nop
 800cf20:	0800e06c 	.word	0x0800e06c
 800cf24:	0800ce51 	.word	0x0800ce51

0800cf28 <__sfp>:
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2a:	4607      	mov	r7, r0
 800cf2c:	f7ff ffac 	bl	800ce88 <__sfp_lock_acquire>
 800cf30:	4b1e      	ldr	r3, [pc, #120]	; (800cfac <__sfp+0x84>)
 800cf32:	681e      	ldr	r6, [r3, #0]
 800cf34:	69b3      	ldr	r3, [r6, #24]
 800cf36:	b913      	cbnz	r3, 800cf3e <__sfp+0x16>
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f7ff ffbd 	bl	800ceb8 <__sinit>
 800cf3e:	3648      	adds	r6, #72	; 0x48
 800cf40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf44:	3b01      	subs	r3, #1
 800cf46:	d503      	bpl.n	800cf50 <__sfp+0x28>
 800cf48:	6833      	ldr	r3, [r6, #0]
 800cf4a:	b30b      	cbz	r3, 800cf90 <__sfp+0x68>
 800cf4c:	6836      	ldr	r6, [r6, #0]
 800cf4e:	e7f7      	b.n	800cf40 <__sfp+0x18>
 800cf50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf54:	b9d5      	cbnz	r5, 800cf8c <__sfp+0x64>
 800cf56:	4b16      	ldr	r3, [pc, #88]	; (800cfb0 <__sfp+0x88>)
 800cf58:	60e3      	str	r3, [r4, #12]
 800cf5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf5e:	6665      	str	r5, [r4, #100]	; 0x64
 800cf60:	f000 f859 	bl	800d016 <__retarget_lock_init_recursive>
 800cf64:	f7ff ff96 	bl	800ce94 <__sfp_lock_release>
 800cf68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf70:	6025      	str	r5, [r4, #0]
 800cf72:	61a5      	str	r5, [r4, #24]
 800cf74:	2208      	movs	r2, #8
 800cf76:	4629      	mov	r1, r5
 800cf78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf7c:	f7fb faf0 	bl	8008560 <memset>
 800cf80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf88:	4620      	mov	r0, r4
 800cf8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf8c:	3468      	adds	r4, #104	; 0x68
 800cf8e:	e7d9      	b.n	800cf44 <__sfp+0x1c>
 800cf90:	2104      	movs	r1, #4
 800cf92:	4638      	mov	r0, r7
 800cf94:	f7ff ff62 	bl	800ce5c <__sfmoreglue>
 800cf98:	4604      	mov	r4, r0
 800cf9a:	6030      	str	r0, [r6, #0]
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d1d5      	bne.n	800cf4c <__sfp+0x24>
 800cfa0:	f7ff ff78 	bl	800ce94 <__sfp_lock_release>
 800cfa4:	230c      	movs	r3, #12
 800cfa6:	603b      	str	r3, [r7, #0]
 800cfa8:	e7ee      	b.n	800cf88 <__sfp+0x60>
 800cfaa:	bf00      	nop
 800cfac:	0800e06c 	.word	0x0800e06c
 800cfb0:	ffff0001 	.word	0xffff0001

0800cfb4 <fiprintf>:
 800cfb4:	b40e      	push	{r1, r2, r3}
 800cfb6:	b503      	push	{r0, r1, lr}
 800cfb8:	4601      	mov	r1, r0
 800cfba:	ab03      	add	r3, sp, #12
 800cfbc:	4805      	ldr	r0, [pc, #20]	; (800cfd4 <fiprintf+0x20>)
 800cfbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc2:	6800      	ldr	r0, [r0, #0]
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	f000 f881 	bl	800d0cc <_vfiprintf_r>
 800cfca:	b002      	add	sp, #8
 800cfcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfd0:	b003      	add	sp, #12
 800cfd2:	4770      	bx	lr
 800cfd4:	2000001c 	.word	0x2000001c

0800cfd8 <_fwalk_reent>:
 800cfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfdc:	4606      	mov	r6, r0
 800cfde:	4688      	mov	r8, r1
 800cfe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfe4:	2700      	movs	r7, #0
 800cfe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfea:	f1b9 0901 	subs.w	r9, r9, #1
 800cfee:	d505      	bpl.n	800cffc <_fwalk_reent+0x24>
 800cff0:	6824      	ldr	r4, [r4, #0]
 800cff2:	2c00      	cmp	r4, #0
 800cff4:	d1f7      	bne.n	800cfe6 <_fwalk_reent+0xe>
 800cff6:	4638      	mov	r0, r7
 800cff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cffc:	89ab      	ldrh	r3, [r5, #12]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d907      	bls.n	800d012 <_fwalk_reent+0x3a>
 800d002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d006:	3301      	adds	r3, #1
 800d008:	d003      	beq.n	800d012 <_fwalk_reent+0x3a>
 800d00a:	4629      	mov	r1, r5
 800d00c:	4630      	mov	r0, r6
 800d00e:	47c0      	blx	r8
 800d010:	4307      	orrs	r7, r0
 800d012:	3568      	adds	r5, #104	; 0x68
 800d014:	e7e9      	b.n	800cfea <_fwalk_reent+0x12>

0800d016 <__retarget_lock_init_recursive>:
 800d016:	4770      	bx	lr

0800d018 <__retarget_lock_acquire_recursive>:
 800d018:	4770      	bx	lr

0800d01a <__retarget_lock_release_recursive>:
 800d01a:	4770      	bx	lr

0800d01c <_realloc_r>:
 800d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d020:	4680      	mov	r8, r0
 800d022:	4614      	mov	r4, r2
 800d024:	460e      	mov	r6, r1
 800d026:	b921      	cbnz	r1, 800d032 <_realloc_r+0x16>
 800d028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d02c:	4611      	mov	r1, r2
 800d02e:	f7fb bb0b 	b.w	8008648 <_malloc_r>
 800d032:	b92a      	cbnz	r2, 800d040 <_realloc_r+0x24>
 800d034:	f7fb fa9c 	bl	8008570 <_free_r>
 800d038:	4625      	mov	r5, r4
 800d03a:	4628      	mov	r0, r5
 800d03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d040:	f000 faa0 	bl	800d584 <_malloc_usable_size_r>
 800d044:	4284      	cmp	r4, r0
 800d046:	4607      	mov	r7, r0
 800d048:	d802      	bhi.n	800d050 <_realloc_r+0x34>
 800d04a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d04e:	d812      	bhi.n	800d076 <_realloc_r+0x5a>
 800d050:	4621      	mov	r1, r4
 800d052:	4640      	mov	r0, r8
 800d054:	f7fb faf8 	bl	8008648 <_malloc_r>
 800d058:	4605      	mov	r5, r0
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d0ed      	beq.n	800d03a <_realloc_r+0x1e>
 800d05e:	42bc      	cmp	r4, r7
 800d060:	4622      	mov	r2, r4
 800d062:	4631      	mov	r1, r6
 800d064:	bf28      	it	cs
 800d066:	463a      	movcs	r2, r7
 800d068:	f7fb fa52 	bl	8008510 <memcpy>
 800d06c:	4631      	mov	r1, r6
 800d06e:	4640      	mov	r0, r8
 800d070:	f7fb fa7e 	bl	8008570 <_free_r>
 800d074:	e7e1      	b.n	800d03a <_realloc_r+0x1e>
 800d076:	4635      	mov	r5, r6
 800d078:	e7df      	b.n	800d03a <_realloc_r+0x1e>

0800d07a <__sfputc_r>:
 800d07a:	6893      	ldr	r3, [r2, #8]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	b410      	push	{r4}
 800d082:	6093      	str	r3, [r2, #8]
 800d084:	da08      	bge.n	800d098 <__sfputc_r+0x1e>
 800d086:	6994      	ldr	r4, [r2, #24]
 800d088:	42a3      	cmp	r3, r4
 800d08a:	db01      	blt.n	800d090 <__sfputc_r+0x16>
 800d08c:	290a      	cmp	r1, #10
 800d08e:	d103      	bne.n	800d098 <__sfputc_r+0x1e>
 800d090:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d094:	f000 b94a 	b.w	800d32c <__swbuf_r>
 800d098:	6813      	ldr	r3, [r2, #0]
 800d09a:	1c58      	adds	r0, r3, #1
 800d09c:	6010      	str	r0, [r2, #0]
 800d09e:	7019      	strb	r1, [r3, #0]
 800d0a0:	4608      	mov	r0, r1
 800d0a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <__sfputs_r>:
 800d0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	460f      	mov	r7, r1
 800d0ae:	4614      	mov	r4, r2
 800d0b0:	18d5      	adds	r5, r2, r3
 800d0b2:	42ac      	cmp	r4, r5
 800d0b4:	d101      	bne.n	800d0ba <__sfputs_r+0x12>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	e007      	b.n	800d0ca <__sfputs_r+0x22>
 800d0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0be:	463a      	mov	r2, r7
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7ff ffda 	bl	800d07a <__sfputc_r>
 800d0c6:	1c43      	adds	r3, r0, #1
 800d0c8:	d1f3      	bne.n	800d0b2 <__sfputs_r+0xa>
 800d0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0cc <_vfiprintf_r>:
 800d0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d0:	460d      	mov	r5, r1
 800d0d2:	b09d      	sub	sp, #116	; 0x74
 800d0d4:	4614      	mov	r4, r2
 800d0d6:	4698      	mov	r8, r3
 800d0d8:	4606      	mov	r6, r0
 800d0da:	b118      	cbz	r0, 800d0e4 <_vfiprintf_r+0x18>
 800d0dc:	6983      	ldr	r3, [r0, #24]
 800d0de:	b90b      	cbnz	r3, 800d0e4 <_vfiprintf_r+0x18>
 800d0e0:	f7ff feea 	bl	800ceb8 <__sinit>
 800d0e4:	4b89      	ldr	r3, [pc, #548]	; (800d30c <_vfiprintf_r+0x240>)
 800d0e6:	429d      	cmp	r5, r3
 800d0e8:	d11b      	bne.n	800d122 <_vfiprintf_r+0x56>
 800d0ea:	6875      	ldr	r5, [r6, #4]
 800d0ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0ee:	07d9      	lsls	r1, r3, #31
 800d0f0:	d405      	bmi.n	800d0fe <_vfiprintf_r+0x32>
 800d0f2:	89ab      	ldrh	r3, [r5, #12]
 800d0f4:	059a      	lsls	r2, r3, #22
 800d0f6:	d402      	bmi.n	800d0fe <_vfiprintf_r+0x32>
 800d0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0fa:	f7ff ff8d 	bl	800d018 <__retarget_lock_acquire_recursive>
 800d0fe:	89ab      	ldrh	r3, [r5, #12]
 800d100:	071b      	lsls	r3, r3, #28
 800d102:	d501      	bpl.n	800d108 <_vfiprintf_r+0x3c>
 800d104:	692b      	ldr	r3, [r5, #16]
 800d106:	b9eb      	cbnz	r3, 800d144 <_vfiprintf_r+0x78>
 800d108:	4629      	mov	r1, r5
 800d10a:	4630      	mov	r0, r6
 800d10c:	f000 f960 	bl	800d3d0 <__swsetup_r>
 800d110:	b1c0      	cbz	r0, 800d144 <_vfiprintf_r+0x78>
 800d112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d114:	07dc      	lsls	r4, r3, #31
 800d116:	d50e      	bpl.n	800d136 <_vfiprintf_r+0x6a>
 800d118:	f04f 30ff 	mov.w	r0, #4294967295
 800d11c:	b01d      	add	sp, #116	; 0x74
 800d11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d122:	4b7b      	ldr	r3, [pc, #492]	; (800d310 <_vfiprintf_r+0x244>)
 800d124:	429d      	cmp	r5, r3
 800d126:	d101      	bne.n	800d12c <_vfiprintf_r+0x60>
 800d128:	68b5      	ldr	r5, [r6, #8]
 800d12a:	e7df      	b.n	800d0ec <_vfiprintf_r+0x20>
 800d12c:	4b79      	ldr	r3, [pc, #484]	; (800d314 <_vfiprintf_r+0x248>)
 800d12e:	429d      	cmp	r5, r3
 800d130:	bf08      	it	eq
 800d132:	68f5      	ldreq	r5, [r6, #12]
 800d134:	e7da      	b.n	800d0ec <_vfiprintf_r+0x20>
 800d136:	89ab      	ldrh	r3, [r5, #12]
 800d138:	0598      	lsls	r0, r3, #22
 800d13a:	d4ed      	bmi.n	800d118 <_vfiprintf_r+0x4c>
 800d13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d13e:	f7ff ff6c 	bl	800d01a <__retarget_lock_release_recursive>
 800d142:	e7e9      	b.n	800d118 <_vfiprintf_r+0x4c>
 800d144:	2300      	movs	r3, #0
 800d146:	9309      	str	r3, [sp, #36]	; 0x24
 800d148:	2320      	movs	r3, #32
 800d14a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d14e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d152:	2330      	movs	r3, #48	; 0x30
 800d154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d318 <_vfiprintf_r+0x24c>
 800d158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d15c:	f04f 0901 	mov.w	r9, #1
 800d160:	4623      	mov	r3, r4
 800d162:	469a      	mov	sl, r3
 800d164:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d168:	b10a      	cbz	r2, 800d16e <_vfiprintf_r+0xa2>
 800d16a:	2a25      	cmp	r2, #37	; 0x25
 800d16c:	d1f9      	bne.n	800d162 <_vfiprintf_r+0x96>
 800d16e:	ebba 0b04 	subs.w	fp, sl, r4
 800d172:	d00b      	beq.n	800d18c <_vfiprintf_r+0xc0>
 800d174:	465b      	mov	r3, fp
 800d176:	4622      	mov	r2, r4
 800d178:	4629      	mov	r1, r5
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7ff ff94 	bl	800d0a8 <__sfputs_r>
 800d180:	3001      	adds	r0, #1
 800d182:	f000 80aa 	beq.w	800d2da <_vfiprintf_r+0x20e>
 800d186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d188:	445a      	add	r2, fp
 800d18a:	9209      	str	r2, [sp, #36]	; 0x24
 800d18c:	f89a 3000 	ldrb.w	r3, [sl]
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 80a2 	beq.w	800d2da <_vfiprintf_r+0x20e>
 800d196:	2300      	movs	r3, #0
 800d198:	f04f 32ff 	mov.w	r2, #4294967295
 800d19c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1a0:	f10a 0a01 	add.w	sl, sl, #1
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	9307      	str	r3, [sp, #28]
 800d1a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1ac:	931a      	str	r3, [sp, #104]	; 0x68
 800d1ae:	4654      	mov	r4, sl
 800d1b0:	2205      	movs	r2, #5
 800d1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b6:	4858      	ldr	r0, [pc, #352]	; (800d318 <_vfiprintf_r+0x24c>)
 800d1b8:	f7f3 f81a 	bl	80001f0 <memchr>
 800d1bc:	9a04      	ldr	r2, [sp, #16]
 800d1be:	b9d8      	cbnz	r0, 800d1f8 <_vfiprintf_r+0x12c>
 800d1c0:	06d1      	lsls	r1, r2, #27
 800d1c2:	bf44      	itt	mi
 800d1c4:	2320      	movmi	r3, #32
 800d1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ca:	0713      	lsls	r3, r2, #28
 800d1cc:	bf44      	itt	mi
 800d1ce:	232b      	movmi	r3, #43	; 0x2b
 800d1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1da:	d015      	beq.n	800d208 <_vfiprintf_r+0x13c>
 800d1dc:	9a07      	ldr	r2, [sp, #28]
 800d1de:	4654      	mov	r4, sl
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	f04f 0c0a 	mov.w	ip, #10
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ec:	3b30      	subs	r3, #48	; 0x30
 800d1ee:	2b09      	cmp	r3, #9
 800d1f0:	d94e      	bls.n	800d290 <_vfiprintf_r+0x1c4>
 800d1f2:	b1b0      	cbz	r0, 800d222 <_vfiprintf_r+0x156>
 800d1f4:	9207      	str	r2, [sp, #28]
 800d1f6:	e014      	b.n	800d222 <_vfiprintf_r+0x156>
 800d1f8:	eba0 0308 	sub.w	r3, r0, r8
 800d1fc:	fa09 f303 	lsl.w	r3, r9, r3
 800d200:	4313      	orrs	r3, r2
 800d202:	9304      	str	r3, [sp, #16]
 800d204:	46a2      	mov	sl, r4
 800d206:	e7d2      	b.n	800d1ae <_vfiprintf_r+0xe2>
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	1d19      	adds	r1, r3, #4
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	9103      	str	r1, [sp, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	bfbb      	ittet	lt
 800d214:	425b      	neglt	r3, r3
 800d216:	f042 0202 	orrlt.w	r2, r2, #2
 800d21a:	9307      	strge	r3, [sp, #28]
 800d21c:	9307      	strlt	r3, [sp, #28]
 800d21e:	bfb8      	it	lt
 800d220:	9204      	strlt	r2, [sp, #16]
 800d222:	7823      	ldrb	r3, [r4, #0]
 800d224:	2b2e      	cmp	r3, #46	; 0x2e
 800d226:	d10c      	bne.n	800d242 <_vfiprintf_r+0x176>
 800d228:	7863      	ldrb	r3, [r4, #1]
 800d22a:	2b2a      	cmp	r3, #42	; 0x2a
 800d22c:	d135      	bne.n	800d29a <_vfiprintf_r+0x1ce>
 800d22e:	9b03      	ldr	r3, [sp, #12]
 800d230:	1d1a      	adds	r2, r3, #4
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	9203      	str	r2, [sp, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	bfb8      	it	lt
 800d23a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d23e:	3402      	adds	r4, #2
 800d240:	9305      	str	r3, [sp, #20]
 800d242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d328 <_vfiprintf_r+0x25c>
 800d246:	7821      	ldrb	r1, [r4, #0]
 800d248:	2203      	movs	r2, #3
 800d24a:	4650      	mov	r0, sl
 800d24c:	f7f2 ffd0 	bl	80001f0 <memchr>
 800d250:	b140      	cbz	r0, 800d264 <_vfiprintf_r+0x198>
 800d252:	2340      	movs	r3, #64	; 0x40
 800d254:	eba0 000a 	sub.w	r0, r0, sl
 800d258:	fa03 f000 	lsl.w	r0, r3, r0
 800d25c:	9b04      	ldr	r3, [sp, #16]
 800d25e:	4303      	orrs	r3, r0
 800d260:	3401      	adds	r4, #1
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d268:	482c      	ldr	r0, [pc, #176]	; (800d31c <_vfiprintf_r+0x250>)
 800d26a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d26e:	2206      	movs	r2, #6
 800d270:	f7f2 ffbe 	bl	80001f0 <memchr>
 800d274:	2800      	cmp	r0, #0
 800d276:	d03f      	beq.n	800d2f8 <_vfiprintf_r+0x22c>
 800d278:	4b29      	ldr	r3, [pc, #164]	; (800d320 <_vfiprintf_r+0x254>)
 800d27a:	bb1b      	cbnz	r3, 800d2c4 <_vfiprintf_r+0x1f8>
 800d27c:	9b03      	ldr	r3, [sp, #12]
 800d27e:	3307      	adds	r3, #7
 800d280:	f023 0307 	bic.w	r3, r3, #7
 800d284:	3308      	adds	r3, #8
 800d286:	9303      	str	r3, [sp, #12]
 800d288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d28a:	443b      	add	r3, r7
 800d28c:	9309      	str	r3, [sp, #36]	; 0x24
 800d28e:	e767      	b.n	800d160 <_vfiprintf_r+0x94>
 800d290:	fb0c 3202 	mla	r2, ip, r2, r3
 800d294:	460c      	mov	r4, r1
 800d296:	2001      	movs	r0, #1
 800d298:	e7a5      	b.n	800d1e6 <_vfiprintf_r+0x11a>
 800d29a:	2300      	movs	r3, #0
 800d29c:	3401      	adds	r4, #1
 800d29e:	9305      	str	r3, [sp, #20]
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	f04f 0c0a 	mov.w	ip, #10
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2ac:	3a30      	subs	r2, #48	; 0x30
 800d2ae:	2a09      	cmp	r2, #9
 800d2b0:	d903      	bls.n	800d2ba <_vfiprintf_r+0x1ee>
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d0c5      	beq.n	800d242 <_vfiprintf_r+0x176>
 800d2b6:	9105      	str	r1, [sp, #20]
 800d2b8:	e7c3      	b.n	800d242 <_vfiprintf_r+0x176>
 800d2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2be:	4604      	mov	r4, r0
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e7f0      	b.n	800d2a6 <_vfiprintf_r+0x1da>
 800d2c4:	ab03      	add	r3, sp, #12
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	462a      	mov	r2, r5
 800d2ca:	4b16      	ldr	r3, [pc, #88]	; (800d324 <_vfiprintf_r+0x258>)
 800d2cc:	a904      	add	r1, sp, #16
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f7fb face 	bl	8008870 <_printf_float>
 800d2d4:	4607      	mov	r7, r0
 800d2d6:	1c78      	adds	r0, r7, #1
 800d2d8:	d1d6      	bne.n	800d288 <_vfiprintf_r+0x1bc>
 800d2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2dc:	07d9      	lsls	r1, r3, #31
 800d2de:	d405      	bmi.n	800d2ec <_vfiprintf_r+0x220>
 800d2e0:	89ab      	ldrh	r3, [r5, #12]
 800d2e2:	059a      	lsls	r2, r3, #22
 800d2e4:	d402      	bmi.n	800d2ec <_vfiprintf_r+0x220>
 800d2e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2e8:	f7ff fe97 	bl	800d01a <__retarget_lock_release_recursive>
 800d2ec:	89ab      	ldrh	r3, [r5, #12]
 800d2ee:	065b      	lsls	r3, r3, #25
 800d2f0:	f53f af12 	bmi.w	800d118 <_vfiprintf_r+0x4c>
 800d2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2f6:	e711      	b.n	800d11c <_vfiprintf_r+0x50>
 800d2f8:	ab03      	add	r3, sp, #12
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	462a      	mov	r2, r5
 800d2fe:	4b09      	ldr	r3, [pc, #36]	; (800d324 <_vfiprintf_r+0x258>)
 800d300:	a904      	add	r1, sp, #16
 800d302:	4630      	mov	r0, r6
 800d304:	f7fb fd58 	bl	8008db8 <_printf_i>
 800d308:	e7e4      	b.n	800d2d4 <_vfiprintf_r+0x208>
 800d30a:	bf00      	nop
 800d30c:	0800e4e4 	.word	0x0800e4e4
 800d310:	0800e504 	.word	0x0800e504
 800d314:	0800e4c4 	.word	0x0800e4c4
 800d318:	0800e45c 	.word	0x0800e45c
 800d31c:	0800e466 	.word	0x0800e466
 800d320:	08008871 	.word	0x08008871
 800d324:	0800d0a9 	.word	0x0800d0a9
 800d328:	0800e462 	.word	0x0800e462

0800d32c <__swbuf_r>:
 800d32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32e:	460e      	mov	r6, r1
 800d330:	4614      	mov	r4, r2
 800d332:	4605      	mov	r5, r0
 800d334:	b118      	cbz	r0, 800d33e <__swbuf_r+0x12>
 800d336:	6983      	ldr	r3, [r0, #24]
 800d338:	b90b      	cbnz	r3, 800d33e <__swbuf_r+0x12>
 800d33a:	f7ff fdbd 	bl	800ceb8 <__sinit>
 800d33e:	4b21      	ldr	r3, [pc, #132]	; (800d3c4 <__swbuf_r+0x98>)
 800d340:	429c      	cmp	r4, r3
 800d342:	d12b      	bne.n	800d39c <__swbuf_r+0x70>
 800d344:	686c      	ldr	r4, [r5, #4]
 800d346:	69a3      	ldr	r3, [r4, #24]
 800d348:	60a3      	str	r3, [r4, #8]
 800d34a:	89a3      	ldrh	r3, [r4, #12]
 800d34c:	071a      	lsls	r2, r3, #28
 800d34e:	d52f      	bpl.n	800d3b0 <__swbuf_r+0x84>
 800d350:	6923      	ldr	r3, [r4, #16]
 800d352:	b36b      	cbz	r3, 800d3b0 <__swbuf_r+0x84>
 800d354:	6923      	ldr	r3, [r4, #16]
 800d356:	6820      	ldr	r0, [r4, #0]
 800d358:	1ac0      	subs	r0, r0, r3
 800d35a:	6963      	ldr	r3, [r4, #20]
 800d35c:	b2f6      	uxtb	r6, r6
 800d35e:	4283      	cmp	r3, r0
 800d360:	4637      	mov	r7, r6
 800d362:	dc04      	bgt.n	800d36e <__swbuf_r+0x42>
 800d364:	4621      	mov	r1, r4
 800d366:	4628      	mov	r0, r5
 800d368:	f7ff fd12 	bl	800cd90 <_fflush_r>
 800d36c:	bb30      	cbnz	r0, 800d3bc <__swbuf_r+0x90>
 800d36e:	68a3      	ldr	r3, [r4, #8]
 800d370:	3b01      	subs	r3, #1
 800d372:	60a3      	str	r3, [r4, #8]
 800d374:	6823      	ldr	r3, [r4, #0]
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	6022      	str	r2, [r4, #0]
 800d37a:	701e      	strb	r6, [r3, #0]
 800d37c:	6963      	ldr	r3, [r4, #20]
 800d37e:	3001      	adds	r0, #1
 800d380:	4283      	cmp	r3, r0
 800d382:	d004      	beq.n	800d38e <__swbuf_r+0x62>
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	07db      	lsls	r3, r3, #31
 800d388:	d506      	bpl.n	800d398 <__swbuf_r+0x6c>
 800d38a:	2e0a      	cmp	r6, #10
 800d38c:	d104      	bne.n	800d398 <__swbuf_r+0x6c>
 800d38e:	4621      	mov	r1, r4
 800d390:	4628      	mov	r0, r5
 800d392:	f7ff fcfd 	bl	800cd90 <_fflush_r>
 800d396:	b988      	cbnz	r0, 800d3bc <__swbuf_r+0x90>
 800d398:	4638      	mov	r0, r7
 800d39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d39c:	4b0a      	ldr	r3, [pc, #40]	; (800d3c8 <__swbuf_r+0x9c>)
 800d39e:	429c      	cmp	r4, r3
 800d3a0:	d101      	bne.n	800d3a6 <__swbuf_r+0x7a>
 800d3a2:	68ac      	ldr	r4, [r5, #8]
 800d3a4:	e7cf      	b.n	800d346 <__swbuf_r+0x1a>
 800d3a6:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <__swbuf_r+0xa0>)
 800d3a8:	429c      	cmp	r4, r3
 800d3aa:	bf08      	it	eq
 800d3ac:	68ec      	ldreq	r4, [r5, #12]
 800d3ae:	e7ca      	b.n	800d346 <__swbuf_r+0x1a>
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	f000 f80c 	bl	800d3d0 <__swsetup_r>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d0cb      	beq.n	800d354 <__swbuf_r+0x28>
 800d3bc:	f04f 37ff 	mov.w	r7, #4294967295
 800d3c0:	e7ea      	b.n	800d398 <__swbuf_r+0x6c>
 800d3c2:	bf00      	nop
 800d3c4:	0800e4e4 	.word	0x0800e4e4
 800d3c8:	0800e504 	.word	0x0800e504
 800d3cc:	0800e4c4 	.word	0x0800e4c4

0800d3d0 <__swsetup_r>:
 800d3d0:	4b32      	ldr	r3, [pc, #200]	; (800d49c <__swsetup_r+0xcc>)
 800d3d2:	b570      	push	{r4, r5, r6, lr}
 800d3d4:	681d      	ldr	r5, [r3, #0]
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	460c      	mov	r4, r1
 800d3da:	b125      	cbz	r5, 800d3e6 <__swsetup_r+0x16>
 800d3dc:	69ab      	ldr	r3, [r5, #24]
 800d3de:	b913      	cbnz	r3, 800d3e6 <__swsetup_r+0x16>
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	f7ff fd69 	bl	800ceb8 <__sinit>
 800d3e6:	4b2e      	ldr	r3, [pc, #184]	; (800d4a0 <__swsetup_r+0xd0>)
 800d3e8:	429c      	cmp	r4, r3
 800d3ea:	d10f      	bne.n	800d40c <__swsetup_r+0x3c>
 800d3ec:	686c      	ldr	r4, [r5, #4]
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3f4:	0719      	lsls	r1, r3, #28
 800d3f6:	d42c      	bmi.n	800d452 <__swsetup_r+0x82>
 800d3f8:	06dd      	lsls	r5, r3, #27
 800d3fa:	d411      	bmi.n	800d420 <__swsetup_r+0x50>
 800d3fc:	2309      	movs	r3, #9
 800d3fe:	6033      	str	r3, [r6, #0]
 800d400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d404:	81a3      	strh	r3, [r4, #12]
 800d406:	f04f 30ff 	mov.w	r0, #4294967295
 800d40a:	e03e      	b.n	800d48a <__swsetup_r+0xba>
 800d40c:	4b25      	ldr	r3, [pc, #148]	; (800d4a4 <__swsetup_r+0xd4>)
 800d40e:	429c      	cmp	r4, r3
 800d410:	d101      	bne.n	800d416 <__swsetup_r+0x46>
 800d412:	68ac      	ldr	r4, [r5, #8]
 800d414:	e7eb      	b.n	800d3ee <__swsetup_r+0x1e>
 800d416:	4b24      	ldr	r3, [pc, #144]	; (800d4a8 <__swsetup_r+0xd8>)
 800d418:	429c      	cmp	r4, r3
 800d41a:	bf08      	it	eq
 800d41c:	68ec      	ldreq	r4, [r5, #12]
 800d41e:	e7e6      	b.n	800d3ee <__swsetup_r+0x1e>
 800d420:	0758      	lsls	r0, r3, #29
 800d422:	d512      	bpl.n	800d44a <__swsetup_r+0x7a>
 800d424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d426:	b141      	cbz	r1, 800d43a <__swsetup_r+0x6a>
 800d428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d42c:	4299      	cmp	r1, r3
 800d42e:	d002      	beq.n	800d436 <__swsetup_r+0x66>
 800d430:	4630      	mov	r0, r6
 800d432:	f7fb f89d 	bl	8008570 <_free_r>
 800d436:	2300      	movs	r3, #0
 800d438:	6363      	str	r3, [r4, #52]	; 0x34
 800d43a:	89a3      	ldrh	r3, [r4, #12]
 800d43c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d440:	81a3      	strh	r3, [r4, #12]
 800d442:	2300      	movs	r3, #0
 800d444:	6063      	str	r3, [r4, #4]
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	89a3      	ldrh	r3, [r4, #12]
 800d44c:	f043 0308 	orr.w	r3, r3, #8
 800d450:	81a3      	strh	r3, [r4, #12]
 800d452:	6923      	ldr	r3, [r4, #16]
 800d454:	b94b      	cbnz	r3, 800d46a <__swsetup_r+0x9a>
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d45c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d460:	d003      	beq.n	800d46a <__swsetup_r+0x9a>
 800d462:	4621      	mov	r1, r4
 800d464:	4630      	mov	r0, r6
 800d466:	f000 f84d 	bl	800d504 <__smakebuf_r>
 800d46a:	89a0      	ldrh	r0, [r4, #12]
 800d46c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d470:	f010 0301 	ands.w	r3, r0, #1
 800d474:	d00a      	beq.n	800d48c <__swsetup_r+0xbc>
 800d476:	2300      	movs	r3, #0
 800d478:	60a3      	str	r3, [r4, #8]
 800d47a:	6963      	ldr	r3, [r4, #20]
 800d47c:	425b      	negs	r3, r3
 800d47e:	61a3      	str	r3, [r4, #24]
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	b943      	cbnz	r3, 800d496 <__swsetup_r+0xc6>
 800d484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d488:	d1ba      	bne.n	800d400 <__swsetup_r+0x30>
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	0781      	lsls	r1, r0, #30
 800d48e:	bf58      	it	pl
 800d490:	6963      	ldrpl	r3, [r4, #20]
 800d492:	60a3      	str	r3, [r4, #8]
 800d494:	e7f4      	b.n	800d480 <__swsetup_r+0xb0>
 800d496:	2000      	movs	r0, #0
 800d498:	e7f7      	b.n	800d48a <__swsetup_r+0xba>
 800d49a:	bf00      	nop
 800d49c:	2000001c 	.word	0x2000001c
 800d4a0:	0800e4e4 	.word	0x0800e4e4
 800d4a4:	0800e504 	.word	0x0800e504
 800d4a8:	0800e4c4 	.word	0x0800e4c4

0800d4ac <abort>:
 800d4ac:	b508      	push	{r3, lr}
 800d4ae:	2006      	movs	r0, #6
 800d4b0:	f000 f898 	bl	800d5e4 <raise>
 800d4b4:	2001      	movs	r0, #1
 800d4b6:	f7f5 f8e7 	bl	8002688 <_exit>

0800d4ba <__swhatbuf_r>:
 800d4ba:	b570      	push	{r4, r5, r6, lr}
 800d4bc:	460e      	mov	r6, r1
 800d4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c2:	2900      	cmp	r1, #0
 800d4c4:	b096      	sub	sp, #88	; 0x58
 800d4c6:	4614      	mov	r4, r2
 800d4c8:	461d      	mov	r5, r3
 800d4ca:	da08      	bge.n	800d4de <__swhatbuf_r+0x24>
 800d4cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	602a      	str	r2, [r5, #0]
 800d4d4:	061a      	lsls	r2, r3, #24
 800d4d6:	d410      	bmi.n	800d4fa <__swhatbuf_r+0x40>
 800d4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4dc:	e00e      	b.n	800d4fc <__swhatbuf_r+0x42>
 800d4de:	466a      	mov	r2, sp
 800d4e0:	f000 f89c 	bl	800d61c <_fstat_r>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	dbf1      	blt.n	800d4cc <__swhatbuf_r+0x12>
 800d4e8:	9a01      	ldr	r2, [sp, #4]
 800d4ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d4ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d4f2:	425a      	negs	r2, r3
 800d4f4:	415a      	adcs	r2, r3
 800d4f6:	602a      	str	r2, [r5, #0]
 800d4f8:	e7ee      	b.n	800d4d8 <__swhatbuf_r+0x1e>
 800d4fa:	2340      	movs	r3, #64	; 0x40
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	6023      	str	r3, [r4, #0]
 800d500:	b016      	add	sp, #88	; 0x58
 800d502:	bd70      	pop	{r4, r5, r6, pc}

0800d504 <__smakebuf_r>:
 800d504:	898b      	ldrh	r3, [r1, #12]
 800d506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d508:	079d      	lsls	r5, r3, #30
 800d50a:	4606      	mov	r6, r0
 800d50c:	460c      	mov	r4, r1
 800d50e:	d507      	bpl.n	800d520 <__smakebuf_r+0x1c>
 800d510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	6123      	str	r3, [r4, #16]
 800d518:	2301      	movs	r3, #1
 800d51a:	6163      	str	r3, [r4, #20]
 800d51c:	b002      	add	sp, #8
 800d51e:	bd70      	pop	{r4, r5, r6, pc}
 800d520:	ab01      	add	r3, sp, #4
 800d522:	466a      	mov	r2, sp
 800d524:	f7ff ffc9 	bl	800d4ba <__swhatbuf_r>
 800d528:	9900      	ldr	r1, [sp, #0]
 800d52a:	4605      	mov	r5, r0
 800d52c:	4630      	mov	r0, r6
 800d52e:	f7fb f88b 	bl	8008648 <_malloc_r>
 800d532:	b948      	cbnz	r0, 800d548 <__smakebuf_r+0x44>
 800d534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d538:	059a      	lsls	r2, r3, #22
 800d53a:	d4ef      	bmi.n	800d51c <__smakebuf_r+0x18>
 800d53c:	f023 0303 	bic.w	r3, r3, #3
 800d540:	f043 0302 	orr.w	r3, r3, #2
 800d544:	81a3      	strh	r3, [r4, #12]
 800d546:	e7e3      	b.n	800d510 <__smakebuf_r+0xc>
 800d548:	4b0d      	ldr	r3, [pc, #52]	; (800d580 <__smakebuf_r+0x7c>)
 800d54a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d54c:	89a3      	ldrh	r3, [r4, #12]
 800d54e:	6020      	str	r0, [r4, #0]
 800d550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	9b00      	ldr	r3, [sp, #0]
 800d558:	6163      	str	r3, [r4, #20]
 800d55a:	9b01      	ldr	r3, [sp, #4]
 800d55c:	6120      	str	r0, [r4, #16]
 800d55e:	b15b      	cbz	r3, 800d578 <__smakebuf_r+0x74>
 800d560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d564:	4630      	mov	r0, r6
 800d566:	f000 f86b 	bl	800d640 <_isatty_r>
 800d56a:	b128      	cbz	r0, 800d578 <__smakebuf_r+0x74>
 800d56c:	89a3      	ldrh	r3, [r4, #12]
 800d56e:	f023 0303 	bic.w	r3, r3, #3
 800d572:	f043 0301 	orr.w	r3, r3, #1
 800d576:	81a3      	strh	r3, [r4, #12]
 800d578:	89a0      	ldrh	r0, [r4, #12]
 800d57a:	4305      	orrs	r5, r0
 800d57c:	81a5      	strh	r5, [r4, #12]
 800d57e:	e7cd      	b.n	800d51c <__smakebuf_r+0x18>
 800d580:	0800ce51 	.word	0x0800ce51

0800d584 <_malloc_usable_size_r>:
 800d584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d588:	1f18      	subs	r0, r3, #4
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	bfbc      	itt	lt
 800d58e:	580b      	ldrlt	r3, [r1, r0]
 800d590:	18c0      	addlt	r0, r0, r3
 800d592:	4770      	bx	lr

0800d594 <_raise_r>:
 800d594:	291f      	cmp	r1, #31
 800d596:	b538      	push	{r3, r4, r5, lr}
 800d598:	4604      	mov	r4, r0
 800d59a:	460d      	mov	r5, r1
 800d59c:	d904      	bls.n	800d5a8 <_raise_r+0x14>
 800d59e:	2316      	movs	r3, #22
 800d5a0:	6003      	str	r3, [r0, #0]
 800d5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a6:	bd38      	pop	{r3, r4, r5, pc}
 800d5a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5aa:	b112      	cbz	r2, 800d5b2 <_raise_r+0x1e>
 800d5ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5b0:	b94b      	cbnz	r3, 800d5c6 <_raise_r+0x32>
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f000 f830 	bl	800d618 <_getpid_r>
 800d5b8:	462a      	mov	r2, r5
 800d5ba:	4601      	mov	r1, r0
 800d5bc:	4620      	mov	r0, r4
 800d5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5c2:	f000 b817 	b.w	800d5f4 <_kill_r>
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d00a      	beq.n	800d5e0 <_raise_r+0x4c>
 800d5ca:	1c59      	adds	r1, r3, #1
 800d5cc:	d103      	bne.n	800d5d6 <_raise_r+0x42>
 800d5ce:	2316      	movs	r3, #22
 800d5d0:	6003      	str	r3, [r0, #0]
 800d5d2:	2001      	movs	r0, #1
 800d5d4:	e7e7      	b.n	800d5a6 <_raise_r+0x12>
 800d5d6:	2400      	movs	r4, #0
 800d5d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5dc:	4628      	mov	r0, r5
 800d5de:	4798      	blx	r3
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	e7e0      	b.n	800d5a6 <_raise_r+0x12>

0800d5e4 <raise>:
 800d5e4:	4b02      	ldr	r3, [pc, #8]	; (800d5f0 <raise+0xc>)
 800d5e6:	4601      	mov	r1, r0
 800d5e8:	6818      	ldr	r0, [r3, #0]
 800d5ea:	f7ff bfd3 	b.w	800d594 <_raise_r>
 800d5ee:	bf00      	nop
 800d5f0:	2000001c 	.word	0x2000001c

0800d5f4 <_kill_r>:
 800d5f4:	b538      	push	{r3, r4, r5, lr}
 800d5f6:	4d07      	ldr	r5, [pc, #28]	; (800d614 <_kill_r+0x20>)
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	4608      	mov	r0, r1
 800d5fe:	4611      	mov	r1, r2
 800d600:	602b      	str	r3, [r5, #0]
 800d602:	f7f5 f831 	bl	8002668 <_kill>
 800d606:	1c43      	adds	r3, r0, #1
 800d608:	d102      	bne.n	800d610 <_kill_r+0x1c>
 800d60a:	682b      	ldr	r3, [r5, #0]
 800d60c:	b103      	cbz	r3, 800d610 <_kill_r+0x1c>
 800d60e:	6023      	str	r3, [r4, #0]
 800d610:	bd38      	pop	{r3, r4, r5, pc}
 800d612:	bf00      	nop
 800d614:	20004fb0 	.word	0x20004fb0

0800d618 <_getpid_r>:
 800d618:	f7f5 b81e 	b.w	8002658 <_getpid>

0800d61c <_fstat_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4d07      	ldr	r5, [pc, #28]	; (800d63c <_fstat_r+0x20>)
 800d620:	2300      	movs	r3, #0
 800d622:	4604      	mov	r4, r0
 800d624:	4608      	mov	r0, r1
 800d626:	4611      	mov	r1, r2
 800d628:	602b      	str	r3, [r5, #0]
 800d62a:	f7f5 f87c 	bl	8002726 <_fstat>
 800d62e:	1c43      	adds	r3, r0, #1
 800d630:	d102      	bne.n	800d638 <_fstat_r+0x1c>
 800d632:	682b      	ldr	r3, [r5, #0]
 800d634:	b103      	cbz	r3, 800d638 <_fstat_r+0x1c>
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	bd38      	pop	{r3, r4, r5, pc}
 800d63a:	bf00      	nop
 800d63c:	20004fb0 	.word	0x20004fb0

0800d640 <_isatty_r>:
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	4d06      	ldr	r5, [pc, #24]	; (800d65c <_isatty_r+0x1c>)
 800d644:	2300      	movs	r3, #0
 800d646:	4604      	mov	r4, r0
 800d648:	4608      	mov	r0, r1
 800d64a:	602b      	str	r3, [r5, #0]
 800d64c:	f7f5 f87b 	bl	8002746 <_isatty>
 800d650:	1c43      	adds	r3, r0, #1
 800d652:	d102      	bne.n	800d65a <_isatty_r+0x1a>
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	b103      	cbz	r3, 800d65a <_isatty_r+0x1a>
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	20004fb0 	.word	0x20004fb0

0800d660 <_init>:
 800d660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d662:	bf00      	nop
 800d664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d666:	bc08      	pop	{r3}
 800d668:	469e      	mov	lr, r3
 800d66a:	4770      	bx	lr

0800d66c <_fini>:
 800d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66e:	bf00      	nop
 800d670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d672:	bc08      	pop	{r3}
 800d674:	469e      	mov	lr, r3
 800d676:	4770      	bx	lr
