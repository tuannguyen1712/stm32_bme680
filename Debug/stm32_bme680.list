
stm32_bme680.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  0800b038  0800b038  0001b038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7ec  0800b7ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7ec  0800b7ec  0001b7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f4  0800b7f4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f4  0800b7f4  0001b7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7f8  0800b7f8  0001b7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001e0  0800b9dc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800b9dc  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012448  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c9  00000000  00000000  00032658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00034828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00035868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018165  00000000  00000000  000367e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013742  00000000  00000000  0004e94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093626  00000000  00000000  0006208f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f56b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb0  00000000  00000000  000f5708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b020 	.word	0x0800b020

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b020 	.word	0x0800b020

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001028:	6838      	ldr	r0, [r7, #0]
 800102a:	f001 fc94 	bl	8002956 <null_ptr_check>
 800102e:	4603      	mov	r3, r0
 8001030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8001034:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001038:	2b00      	cmp	r3, #0
 800103a:	d16c      	bne.n	8001116 <bme68x_set_regs+0x10e>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d069      	beq.n	8001116 <bme68x_set_regs+0x10e>
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d066      	beq.n	8001116 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d05d      	beq.n	800110a <bme68x_set_regs+0x102>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0a      	cmp	r3, #10
 8001052:	d85a      	bhi.n	800110a <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8001054:	2300      	movs	r3, #0
 8001056:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001058:	e034      	b.n	80010c4 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	7b1b      	ldrb	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d118      	bne.n	8001094 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8001062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	6839      	ldr	r1, [r7, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fbe0 	bl	8002832 <set_mem_page>
 8001072:	4603      	mov	r3, r0
 8001074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	3328      	adds	r3, #40	; 0x28
 800108c:	443b      	add	r3, r7
 800108e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001092:	e009      	b.n	80010a8 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8001094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	441a      	add	r2, r3
 800109a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	3328      	adds	r3, #40	; 0x28
 80010a2:	443b      	add	r3, r7
 80010a4:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 80010a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	441a      	add	r2, r3
 80010ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	3301      	adds	r3, #1
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	3328      	adds	r3, #40	; 0x28
 80010b8:	443b      	add	r3, r7
 80010ba:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 80010be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c0:	3301      	adds	r3, #1
 80010c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8c6      	bhi.n	800105a <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 80010cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d11e      	bne.n	8001112 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80010d8:	7c38      	ldrb	r0, [r7, #16]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	1e5a      	subs	r2, r3, #1
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685d      	ldr	r5, [r3, #4]
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	1c59      	adds	r1, r3, #1
 80010ea:	462b      	mov	r3, r5
 80010ec:	47a0      	blx	r4
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001102:	23fe      	movs	r3, #254	; 0xfe
 8001104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (rslt == BME68X_OK)
 8001108:	e003      	b.n	8001112 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 800110a:	23fc      	movs	r3, #252	; 0xfc
 800110c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001110:	e004      	b.n	800111c <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8001112:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001114:	e002      	b.n	800111c <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800111c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001120:	4618      	mov	r0, r3
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bdb0      	pop	{r4, r5, r7, pc}

08001128 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f001 fc0c 	bl	8002956 <null_ptr_check>
 800113e:	4603      	mov	r3, r0
 8001140:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8001142:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d12a      	bne.n	80011a0 <bme68x_get_regs+0x78>
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d027      	beq.n	80011a0 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	7b1b      	ldrb	r3, [r3, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10e      	bne.n	8001176 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fb68 	bl	8002832 <set_mem_page>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8001166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d103      	bne.n	8001176 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001174:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	7bf8      	ldrb	r0, [r7, #15]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	47a0      	blx	r4
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 800119a:	23fe      	movs	r3, #254	; 0xfe
 800119c:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 800119e:	e001      	b.n	80011a4 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80011a0:	23ff      	movs	r3, #255	; 0xff
 80011a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80011a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}

080011b0 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	77bb      	strb	r3, [r7, #30]
 80011be:	2301      	movs	r3, #1
 80011c0:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 80011c2:	4a7c      	ldr	r2, [pc, #496]	; (80013b4 <bme68x_set_conf+0x204>)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011cc:	6018      	str	r0, [r3, #0]
 80011ce:	3304      	adds	r3, #4
 80011d0:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	2300      	movs	r3, #0
 80011d8:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f94a 	bl	800147a <bme68x_get_op_mode>
 80011e6:	4603      	mov	r3, r0
 80011e8:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 80011ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d105      	bne.n	80011fe <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f8df 	bl	80013b8 <bme68x_set_op_mode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	77fb      	strb	r3, [r7, #31]
 8001208:	e0b2      	b.n	8001370 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 800120a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f040 80ae 	bne.w	8001370 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001214:	7d38      	ldrb	r0, [r7, #20]
 8001216:	f107 010c 	add.w	r1, r7, #12
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2205      	movs	r2, #5
 800121e:	f7ff ff83 	bl	8001128 <bme68x_get_regs>
 8001222:	4603      	mov	r3, r0
 8001224:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (rslt == BME68X_OK)
 800122e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d108      	bne.n	8001248 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3303      	adds	r3, #3
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	2107      	movs	r1, #7
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fb5c 	bl	80028fc <boundary_check>
 8001244:	4603      	mov	r3, r0
 8001246:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001248:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d108      	bne.n	8001262 <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3301      	adds	r3, #1
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	2105      	movs	r1, #5
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fb4f 	bl	80028fc <boundary_check>
 800125e:	4603      	mov	r3, r0
 8001260:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001262:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d108      	bne.n	800127c <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3302      	adds	r3, #2
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	2105      	movs	r1, #5
 8001272:	4618      	mov	r0, r3
 8001274:	f001 fb42 	bl	80028fc <boundary_check>
 8001278:	4603      	mov	r3, r0
 800127a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800127c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d107      	bne.n	8001294 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	2105      	movs	r1, #5
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fb36 	bl	80028fc <boundary_check>
 8001290:	4603      	mov	r3, r0
 8001292:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001294:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d108      	bne.n	80012ae <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3304      	adds	r3, #4
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	2108      	movs	r1, #8
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fb29 	bl	80028fc <boundary_check>
 80012aa:	4603      	mov	r3, r0
 80012ac:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d15c      	bne.n	8001370 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 80012b6:	7c3b      	ldrb	r3, [r7, #16]
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	f023 031c 	bic.w	r3, r3, #28
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	78db      	ldrb	r3, [r3, #3]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	f003 031c 	and.w	r3, r3, #28
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	785b      	ldrb	r3, [r3, #1]
 80012e4:	015b      	lsls	r3, r3, #5
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	f023 031c 	bic.w	r3, r3, #28
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	789b      	ldrb	r3, [r3, #2]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	b25b      	sxtb	r3, r3
 8001302:	f003 031c 	and.w	r3, r3, #28
 8001306:	b25b      	sxtb	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b25b      	sxtb	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	b25b      	sxtb	r3, r3
 8001314:	f023 0307 	bic.w	r3, r3, #7
 8001318:	b25a      	sxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b25b      	sxtb	r3, r3
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	b25b      	sxtb	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b25b      	sxtb	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	791b      	ldrb	r3, [r3, #4]
 8001332:	2b08      	cmp	r3, #8
 8001334:	d004      	beq.n	8001340 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001340:	7c3b      	ldrb	r3, [r7, #16]
 8001342:	b25b      	sxtb	r3, r3
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	b25a      	sxtb	r2, r3
 800134a:	7fbb      	ldrb	r3, [r7, #30]
 800134c:	015b      	lsls	r3, r3, #5
 800134e:	b25b      	sxtb	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b25b      	sxtb	r3, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001358:	7b3b      	ldrb	r3, [r7, #12]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001360:	b25a      	sxtb	r2, r3
 8001362:	7f7b      	ldrb	r3, [r7, #29]
 8001364:	01db      	lsls	r3, r3, #7
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8001370:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d109      	bne.n	800138c <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	f107 0014 	add.w	r0, r7, #20
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2205      	movs	r2, #5
 8001384:	f7ff fe40 	bl	8001008 <bme68x_set_regs>
 8001388:	4603      	mov	r3, r0
 800138a:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 800138c:	7f3b      	ldrb	r3, [r7, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00a      	beq.n	80013a8 <bme68x_set_conf+0x1f8>
 8001392:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 800139a:	7f3b      	ldrb	r3, [r7, #28]
 800139c:	6839      	ldr	r1, [r7, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f80a 	bl	80013b8 <bme68x_set_op_mode>
 80013a4:	4603      	mov	r3, r0
 80013a6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80013a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0800b038 	.word	0x0800b038

080013b8 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80013c8:	2374      	movs	r3, #116	; 0x74
 80013ca:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80013cc:	f107 010d 	add.w	r1, r7, #13
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	2201      	movs	r2, #1
 80013d4:	2074      	movs	r0, #116	; 0x74
 80013d6:	f7ff fea7 	bl	8001128 <bme68x_get_regs>
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d11d      	bne.n	8001422 <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d016      	beq.n	8001422 <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80013f4:	7b7b      	ldrb	r3, [r7, #13]
 80013f6:	f023 0303 	bic.w	r3, r3, #3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80013fe:	f107 010d 	add.w	r1, r7, #13
 8001402:	f107 000c 	add.w	r0, r7, #12
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	f7ff fdfd 	bl	8001008 <bme68x_set_regs>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	6852      	ldr	r2, [r2, #4]
 800141a:	4611      	mov	r1, r2
 800141c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001420:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <bme68x_set_op_mode+0x78>
 8001428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0cd      	beq.n	80013cc <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01b      	beq.n	800146e <bme68x_set_op_mode+0xb6>
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d117      	bne.n	800146e <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	b25b      	sxtb	r3, r3
 8001442:	f023 0303 	bic.w	r3, r3, #3
 8001446:	b25a      	sxtb	r2, r3
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	b25b      	sxtb	r3, r3
 8001452:	4313      	orrs	r3, r2
 8001454:	b25b      	sxtb	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800145a:	f107 010d 	add.w	r1, r7, #13
 800145e:	f107 000c 	add.w	r0, r7, #12
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	f7ff fdcf 	bl	8001008 <bme68x_set_regs>
 800146a:	4603      	mov	r3, r0
 800146c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00f      	beq.n	80014aa <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 800148a:	f107 010e 	add.w	r1, r7, #14
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	2074      	movs	r0, #116	; 0x74
 8001494:	f7ff fe48 	bl	8001128 <bme68x_get_regs>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 80014ce:	4a34      	ldr	r2, [pc, #208]	; (80015a0 <bme68x_get_meas_dur+0xe4>)
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d8:	6018      	str	r0, [r3, #0]
 80014da:	3304      	adds	r3, #4
 80014dc:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d058      	beq.n	8001596 <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	2105      	movs	r1, #5
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fa05 	bl	80028fc <boundary_check>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME68X_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d109      	bne.n	8001514 <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	3302      	adds	r3, #2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	2105      	movs	r1, #5
 8001508:	4618      	mov	r0, r3
 800150a:	f001 f9f7 	bl	80028fc <boundary_check>
 800150e:	4603      	mov	r3, r0
 8001510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 8001514:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001518:	2b00      	cmp	r3, #0
 800151a:	d108      	bne.n	800152e <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	2105      	movs	r1, #5
 8001522:	4618      	mov	r0, r3
 8001524:	f001 f9ea 	bl	80028fc <boundary_check>
 8001528:	4603      	mov	r3, r0
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001532:	2b00      	cmp	r3, #0
 8001534:	d12f      	bne.n	8001596 <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	3328      	adds	r3, #40	; 0x28
 800153c:	443b      	add	r3, r7
 800153e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001542:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	3328      	adds	r3, #40	; 0x28
 800154a:	443b      	add	r3, r7
 800154c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001550:	461a      	mov	r2, r3
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3328      	adds	r3, #40	; 0x28
 800155e:	443b      	add	r3, r7
 8001560:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001564:	461a      	mov	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	f203 7374 	addw	r3, r3, #1908	; 0x774
 800157e:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8001586:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d003      	beq.n	8001596 <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001594:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8001596:	6a3b      	ldr	r3, [r7, #32]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0800b040 	.word	0x0800b040

080015a4 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b09a      	sub	sp, #104	; 0x68
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4603      	mov	r3, r0
 80015b2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 80015c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	2248      	movs	r2, #72	; 0x48
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 f8b6 	bl	800674c <memset>

    field_ptr[0] = &field_data[0];
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	65bb      	str	r3, [r7, #88]	; 0x58
    field_ptr[1] = &field_data[1];
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	3318      	adds	r3, #24
 80015ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    field_ptr[2] = &field_data[2];
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	3330      	adds	r3, #48	; 0x30
 80015f4:	663b      	str	r3, [r7, #96]	; 0x60

    rslt = null_ptr_check(dev);
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f001 f9ad 	bl	8002956 <null_ptr_check>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 8001602:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 80c1 	bne.w	800178e <bme68x_get_data+0x1ea>
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80bd 	beq.w	800178e <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d11c      	bne.n	8001654 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	2000      	movs	r0, #0
 8001620:	f000 fd8b 	bl	800213a <read_field_data>
 8001624:	4603      	mov	r3, r0
 8001626:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (rslt == BME68X_OK)
 800162a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 80a1 	bne.w	8001776 <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	da03      	bge.n	8001646 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001644:	e097      	b.n	8001776 <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 800164c:	2302      	movs	r3, #2
 800164e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001652:	e090      	b.n	8001776 <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d003      	beq.n	8001662 <bme68x_get_data+0xbe>
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b03      	cmp	r3, #3
 800165e:	f040 8087 	bne.w	8001770 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 feb0 	bl	80023ce <read_all_field_data>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

            new_fields = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001680:	e014      	b.n	80016ac <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8001682:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	3368      	adds	r3, #104	; 0x68
 800168a:	443b      	add	r3, r7
 800168c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b25b      	sxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	da04      	bge.n	80016a2 <bme68x_get_data+0xfe>
                {
                    new_fields++;
 8001698:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800169c:	3301      	adds	r3, #1
 800169e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80016a2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016a6:	3301      	adds	r3, #1
 80016a8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80016ac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d803      	bhi.n	80016bc <bme68x_get_data+0x118>
 80016b4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0e2      	beq.n	8001682 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80016c2:	e01c      	b.n	80016fe <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 80016c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016c8:	3301      	adds	r3, #1
 80016ca:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80016ce:	e00d      	b.n	80016ec <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 80016d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80016d4:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 80016d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fae5 	bl	8002cac <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 80016e2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80016e6:	3301      	adds	r3, #1
 80016e8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80016ec:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d9ed      	bls.n	80016d0 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80016f4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016f8:	3301      	adds	r3, #1
 80016fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80016fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001702:	2b01      	cmp	r3, #1
 8001704:	d803      	bhi.n	800170e <bme68x_get_data+0x16a>
 8001706:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0da      	beq.n	80016c4 <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800170e:	2300      	movs	r3, #0
 8001710:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001714:	e01c      	b.n	8001750 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 8001716:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	3368      	adds	r3, #104	; 0x68
 800171e:	443b      	add	r3, r7
 8001720:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001724:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	461a      	mov	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	461c      	mov	r4, r3
 8001738:	460d      	mov	r5, r1
 800173a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001742:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001746:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800174a:	3301      	adds	r3, #1
 800174c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001750:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001754:	2b02      	cmp	r3, #2
 8001756:	d803      	bhi.n	8001760 <bme68x_get_data+0x1bc>
 8001758:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0da      	beq.n	8001716 <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8001760:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001764:	2b00      	cmp	r3, #0
 8001766:	d106      	bne.n	8001776 <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8001768:	2302      	movs	r3, #2
 800176a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (new_fields == 0)
 800176e:	e002      	b.n	8001776 <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8001770:	2301      	movs	r3, #1
 8001772:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if (n_data == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 800177c:	23ff      	movs	r3, #255	; 0xff
 800177e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (n_data == NULL)
 8001782:	e007      	b.n	8001794 <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800178a:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 800178c:	e002      	b.n	8001794 <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800178e:	23ff      	movs	r3, #255	; 0xff
 8001790:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }

    return rslt;
 8001794:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8001798:	4618      	mov	r0, r3
 800179a:	3768      	adds	r7, #104	; 0x68
 800179c:	46bd      	mov	sp, r7
 800179e:	bdb0      	pop	{r4, r5, r7, pc}

080017a0 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80017b6:	f247 1370 	movw	r3, #29040	; 0x7170
 80017ba:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d06e      	beq.n	80018a0 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff fdf7 	bl	80013b8 <bme68x_set_op_mode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 80017ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d108      	bne.n	80017e8 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80017d6:	f107 021c 	add.w	r2, r7, #28
 80017da:	7bf9      	ldrb	r1, [r7, #15]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68b8      	ldr	r0, [r7, #8]
 80017e0:	f001 f8d8 	bl	8002994 <set_conf>
 80017e4:	4603      	mov	r3, r0
 80017e6:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80017e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d159      	bne.n	80018a4 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80017f0:	f107 0118 	add.w	r1, r7, #24
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	2070      	movs	r0, #112	; 0x70
 80017fa:	f7ff fc95 	bl	8001128 <bme68x_get_regs>
 80017fe:	4603      	mov	r3, r0
 8001800:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 8001802:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d14c      	bne.n	80018a4 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10b      	bne.n	800182a <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8001812:	2300      	movs	r3, #0
 8001814:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d102      	bne.n	8001824 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 800181e:	2302      	movs	r3, #2
 8001820:	777b      	strb	r3, [r7, #29]
 8001822:	e006      	b.n	8001832 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8001824:	2301      	movs	r3, #1
 8001826:	777b      	strb	r3, [r7, #29]
 8001828:	e003      	b.n	8001832 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 800182a:	2301      	movs	r3, #1
 800182c:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 800182e:	2300      	movs	r3, #0
 8001830:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8001832:	7e3b      	ldrb	r3, [r7, #24]
 8001834:	b25b      	sxtb	r3, r3
 8001836:	f023 0308 	bic.w	r3, r3, #8
 800183a:	b25a      	sxtb	r2, r3
 800183c:	7fbb      	ldrb	r3, [r7, #30]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	b25b      	sxtb	r3, r3
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	b25b      	sxtb	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b25b      	sxtb	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001850:	7e7b      	ldrb	r3, [r7, #25]
 8001852:	b25b      	sxtb	r3, r3
 8001854:	f023 030f 	bic.w	r3, r3, #15
 8001858:	b25a      	sxtb	r2, r3
 800185a:	7f3b      	ldrb	r3, [r7, #28]
 800185c:	b25b      	sxtb	r3, r3
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	b25b      	sxtb	r3, r3
 8001864:	4313      	orrs	r3, r2
 8001866:	b25b      	sxtb	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800186c:	7e7b      	ldrb	r3, [r7, #25]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001874:	b25a      	sxtb	r2, r3
 8001876:	7f7b      	ldrb	r3, [r7, #29]
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	b25b      	sxtb	r3, r3
 800187c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001880:	b25b      	sxtb	r3, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	b25b      	sxtb	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 800188a:	f107 0118 	add.w	r1, r7, #24
 800188e:	f107 0014 	add.w	r0, r7, #20
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2202      	movs	r2, #2
 8001896:	f7ff fbb7 	bl	8001008 <bme68x_set_regs>
 800189a:	4603      	mov	r3, r0
 800189c:	77fb      	strb	r3, [r7, #31]
 800189e:	e001      	b.n	80018a4 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80018a0:	23ff      	movs	r3, #255	; 0xff
 80018a2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80018a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c4:	eddf 6a38 	vldr	s13, [pc, #224]	; 80019a8 <calc_temperature+0xf8>
 80018c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	8bdb      	ldrh	r3, [r3, #30]
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018d8:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80019ac <calc_temperature+0xfc>
 80018dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f6:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001904:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80019b0 <calc_temperature+0x100>
 8001908:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	8bdb      	ldrh	r3, [r3, #30]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001918:	ed9f 6a26 	vldr	s12, [pc, #152]	; 80019b4 <calc_temperature+0x104>
 800191c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001920:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192e:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80019b0 <calc_temperature+0x100>
 8001932:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	8bdb      	ldrh	r3, [r3, #30]
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001942:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80019b4 <calc_temperature+0x104>
 8001946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800194a:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800194e:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001960:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001964:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8001968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8001970:	ed97 7a05 	vldr	s14, [r7, #20]
 8001974:	edd7 7a04 	vldr	s15, [r7, #16]
 8001978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001988:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80019b8 <calc_temperature+0x108>
 800198c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001990:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	ee07 3a90 	vmov	s15, r3
}
 800199a:	eeb0 0a67 	vmov.f32	s0, s15
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	46800000 	.word	0x46800000
 80019ac:	44800000 	.word	0x44800000
 80019b0:	48000000 	.word	0x48000000
 80019b4:	46000000 	.word	0x46000000
 80019b8:	45a00000 	.word	0x45a00000

080019bc <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80019cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d4:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001c10 <calc_pressure+0x254>
 80019d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019dc:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 80019e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019e4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019f6:	ed9f 6a87 	vldr	s12, [pc, #540]	; 8001c14 <calc_pressure+0x258>
 80019fa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a14:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a20:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a28:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8001a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a30:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a46:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001c18 <calc_pressure+0x25c>
 8001a4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a52:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a74:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001c1c <calc_pressure+0x260>
 8001a78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a96:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001c20 <calc_pressure+0x264>
 8001a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9e:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8001aa2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001aa6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001c24 <calc_pressure+0x268>
 8001aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001c28 <calc_pressure+0x26c>
 8001ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001adc:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001ae0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae8:	ee17 3a90 	vmov	r3, s15
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8081 	beq.w	8001bf4 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001af2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001af6:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001c2c <calc_pressure+0x270>
 8001afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b06:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001c30 <calc_pressure+0x274>
 8001b0a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b16:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b38:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001c34 <calc_pressure+0x278>
 8001b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b40:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b52:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001c24 <calc_pressure+0x268>
 8001b56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b62:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001b66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b6a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001c38 <calc_pressure+0x27c>
 8001b6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b72:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b76:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8001c38 <calc_pressure+0x27c>
 8001b7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b82:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b86:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8001c38 <calc_pressure+0x27c>
 8001b8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ba0:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001c14 <calc_pressure+0x258>
 8001ba4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001bb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001c3c <calc_pressure+0x280>
 8001bd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bde:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bee:	edc7 7a05 	vstr	s15, [r7, #20]
 8001bf2:	e002      	b.n	8001bfa <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	ee07 3a90 	vmov	s15, r3
}
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	477a0000 	.word	0x477a0000
 8001c14:	48000000 	.word	0x48000000
 8001c18:	47800000 	.word	0x47800000
 8001c1c:	46800000 	.word	0x46800000
 8001c20:	49000000 	.word	0x49000000
 8001c24:	47000000 	.word	0x47000000
 8001c28:	49800000 	.word	0x49800000
 8001c2c:	45800000 	.word	0x45800000
 8001c30:	45c35000 	.word	0x45c35000
 8001c34:	4f000000 	.word	0x4f000000
 8001c38:	43800000 	.word	0x43800000
 8001c3c:	43000000 	.word	0x43000000

08001c40 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001c52:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001dbc <calc_humidity+0x17c>
 8001c56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c5a:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	8a1b      	ldrh	r3, [r3, #16]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c74:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001c78:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001c8e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001c92:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca2:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	8a5b      	ldrh	r3, [r3, #18]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb2:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001dc0 <calc_humidity+0x180>
 8001cb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8001dc4 <calc_humidity+0x184>
 8001ccc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001cd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cdc:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cee:	eddf 5a36 	vldr	s11, [pc, #216]	; 8001dc8 <calc_humidity+0x188>
 8001cf2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001cf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d02:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001d0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d16:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	7ddb      	ldrb	r3, [r3, #23]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d26:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001dc4 <calc_humidity+0x184>
 8001d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d2e:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d40:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001dcc <calc_humidity+0x18c>
 8001d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d48:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001d4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001d7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d80:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001dd0 <calc_humidity+0x190>
 8001d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	dd02      	ble.n	8001d94 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <calc_humidity+0x194>)
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e009      	b.n	8001da8 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001d94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	d502      	bpl.n	8001da8 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	ee07 3a90 	vmov	s15, r3
}
 8001dae:	eeb0 0a67 	vmov.f32	s0, s15
 8001db2:	3724      	adds	r7, #36	; 0x24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	45a00000 	.word	0x45a00000
 8001dc0:	48800000 	.word	0x48800000
 8001dc4:	46800000 	.word	0x46800000
 8001dc8:	49800000 	.word	0x49800000
 8001dcc:	4a000000 	.word	0x4a000000
 8001dd0:	42c80000 	.word	0x42c80000
 8001dd4:	42c80000 	.word	0x42c80000

08001dd8 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001dd8:	b4b0      	push	{r4, r5, r7}
 8001dda:	b0a9      	sub	sp, #164	; 0xa4
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	603a      	str	r2, [r7, #0]
 8001de2:	80fb      	strh	r3, [r7, #6]
 8001de4:	460b      	mov	r3, r1
 8001de6:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001df6:	797b      	ldrb	r3, [r7, #5]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e06:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    const float lookup_k1_range[16] = {
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <calc_gas_resistance_low+0x12c>)
 8001e0c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001e10:	461d      	mov	r5, r3
 8001e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001e26:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <calc_gas_resistance_low+0x130>)
 8001e28:	f107 0408 	add.w	r4, r7, #8
 8001e2c:	461d      	mov	r5, r3
 8001e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e50:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e58:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001f0c <calc_gas_resistance_low+0x134>
 8001e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e60:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001e64:	797b      	ldrb	r3, [r7, #5]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	33a0      	adds	r3, #160	; 0xa0
 8001e6a:	443b      	add	r3, r7
 8001e6c:	3b58      	subs	r3, #88	; 0x58
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001f10 <calc_gas_resistance_low+0x138>
 8001e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e82:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001e8e:	797b      	ldrb	r3, [r7, #5]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	33a0      	adds	r3, #160	; 0xa0
 8001e94:	443b      	add	r3, r7
 8001e96:	3b98      	subs	r3, #152	; 0x98
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001f10 <calc_gas_resistance_low+0x138>
 8001ea0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ea8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eac:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001eb0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001eb4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f14 <calc_gas_resistance_low+0x13c>
 8001eb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ebc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001ec8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001f18 <calc_gas_resistance_low+0x140>
 8001ecc:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001ed0:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001ed4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eec:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    return calc_gas_res;
 8001ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ef4:	ee07 3a90 	vmov	s15, r3
}
 8001ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8001efc:	37a4      	adds	r7, #164	; 0xa4
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bcb0      	pop	{r4, r5, r7}
 8001f02:	4770      	bx	lr
 8001f04:	0800b048 	.word	0x0800b048
 8001f08:	0800b088 	.word	0x0800b088
 8001f0c:	44a78000 	.word	0x44a78000
 8001f10:	42c80000 	.word	0x42c80000
 8001f14:	340637bd 	.word	0x340637bd
 8001f18:	44000000 	.word	0x44000000

08001f1c <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	460a      	mov	r2, r1
 8001f26:	80fb      	strh	r3, [r7, #6]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001f2c:	797b      	ldrb	r3, [r7, #5]
 8001f2e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f32:	fa22 f303 	lsr.w	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001f3e:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f50:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f5c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001f8c <calc_gas_resistance_high+0x70>
 8001f60:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f72:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	ee07 3a90 	vmov	s15, r3
}
 8001f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	49742400 	.word	0x49742400

08001f90 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b08b      	sub	sp, #44	; 0x2c
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8001f9c:	89fb      	ldrh	r3, [r7, #14]
 8001f9e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001fa2:	d902      	bls.n	8001faa <calc_res_heat+0x1a>
    {
        temp = 400;
 8001fa4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001fa8:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80020d4 <calc_res_heat+0x144>
 8001fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fc8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fda:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80020d8 <calc_res_heat+0x148>
 8001fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80020dc <calc_res_heat+0x14c>
 8001fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fea:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80020e0 <calc_res_heat+0x150>
 8001fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ff2:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002004:	eddf 6a37 	vldr	s13, [pc, #220]	; 80020e4 <calc_res_heat+0x154>
 8002008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200c:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	edd7 7a08 	vldr	s15, [r7, #32]
 800201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002026:	ee77 7a87 	vadd.f32	s15, s15, s14
 800202a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800202e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002032:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002044:	edd7 7a07 	vldr	s15, [r7, #28]
 8002048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002054:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002066:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800206a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800206e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002076:	edd7 7a05 	vldr	s15, [r7, #20]
 800207a:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80020e8 <calc_res_heat+0x158>
 8002090:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002098:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800209c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80020a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80020a4:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80020a8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80020ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 80020b0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80020ec <calc_res_heat+0x15c>
 80020b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 80020b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80020c0:	793b      	ldrb	r3, [r7, #4]
 80020c2:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	372c      	adds	r7, #44	; 0x2c
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	42440000 	.word	0x42440000
 80020d8:	47000000 	.word	0x47000000
 80020dc:	3a03126f 	.word	0x3a03126f
 80020e0:	3b1a0275 	.word	0x3b1a0275
 80020e4:	44800000 	.word	0x44800000
 80020e8:	3b03126f 	.word	0x3b03126f
 80020ec:	4059999a 	.word	0x4059999a

080020f0 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8002104:	d308      	bcc.n	8002118 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8002106:	23ff      	movs	r3, #255	; 0xff
 8002108:	73bb      	strb	r3, [r7, #14]
 800210a:	e00f      	b.n	800212c <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	3301      	adds	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	2b3f      	cmp	r3, #63	; 0x3f
 800211c:	d8f6      	bhi.n	800210c <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4413      	add	r3, r2
 800212a:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 800212c:	7bbb      	ldrb	r3, [r7, #14]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b08e      	sub	sp, #56	; 0x38
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8002160:	2305      	movs	r3, #5
 8002162:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    while ((tries) && (rslt == BME68X_OK))
 8002166:	e123      	b.n	80023b0 <read_field_data+0x276>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	461a      	mov	r2, r3
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	4413      	add	r3, r2
 8002170:	b2db      	uxtb	r3, r3
 8002172:	331d      	adds	r3, #29
 8002174:	b2d8      	uxtb	r0, r3
 8002176:	f107 0110 	add.w	r1, r7, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2211      	movs	r2, #17
 800217e:	f7fe ffd3 	bl	8001128 <bme68x_get_regs>
 8002182:	4603      	mov	r3, r0
 8002184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 800218e:	23ff      	movs	r3, #255	; 0xff
 8002190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8002194:	e115      	b.n	80023c2 <read_field_data+0x288>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002196:	7c3b      	ldrb	r3, [r7, #16]
 8002198:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 80021a2:	7c3b      	ldrb	r3, [r7, #16]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80021ae:	7c7a      	ldrb	r2, [r7, #17]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 80021b4:	7cbb      	ldrb	r3, [r7, #18]
 80021b6:	031a      	lsls	r2, r3, #12
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	4313      	orrs	r3, r2
 80021be:	7d3a      	ldrb	r2, [r7, #20]
 80021c0:	0912      	lsrs	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	4313      	orrs	r3, r2
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 80021c8:	7d7b      	ldrb	r3, [r7, #21]
 80021ca:	031a      	lsls	r2, r3, #12
 80021cc:	7dbb      	ldrb	r3, [r7, #22]
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	4313      	orrs	r3, r2
 80021d2:	7dfa      	ldrb	r2, [r7, #23]
 80021d4:	0912      	lsrs	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	4313      	orrs	r3, r2
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 80021dc:	7e3b      	ldrb	r3, [r7, #24]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	7e7b      	ldrb	r3, [r7, #25]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	857b      	strh	r3, [r7, #42]	; 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 80021ec:	7f7b      	ldrb	r3, [r7, #29]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	7fbb      	ldrb	r3, [r7, #30]
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	853b      	strh	r3, [r7, #40]	; 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8002200:	7ffb      	ldrb	r3, [r7, #31]
 8002202:	b29b      	uxth	r3, r3
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	b29a      	uxth	r2, r3
 8002208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	b2db      	uxtb	r3, r3
 8002210:	b29b      	uxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	84fb      	strh	r3, [r7, #38]	; 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002216:	7fbb      	ldrb	r3, [r7, #30]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002220:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d11c      	bne.n	800226e <read_field_data+0x134>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b25a      	sxtb	r2, r3
 800223a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800223e:	b25b      	sxtb	r3, r3
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	b25b      	sxtb	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	b2da      	uxtb	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b25a      	sxtb	r2, r3
 8002256:	f897 3020 	ldrb.w	r3, [r7, #32]
 800225a:	b25b      	sxtb	r3, r3
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	b25b      	sxtb	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b25b      	sxtb	r3, r3
 8002266:	b2da      	uxtb	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e019      	b.n	80022a2 <read_field_data+0x168>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b25a      	sxtb	r2, r3
 8002274:	7fbb      	ldrb	r3, [r7, #30]
 8002276:	b25b      	sxtb	r3, r3
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	b25b      	sxtb	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b25b      	sxtb	r3, r3
 8002282:	b2da      	uxtb	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b25a      	sxtb	r2, r3
 800228e:	7fbb      	ldrb	r3, [r7, #30]
 8002290:	b25b      	sxtb	r3, r3
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	b25b      	sxtb	r3, r3
 8002298:	4313      	orrs	r3, r2
 800229a:	b25b      	sxtb	r3, r3
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da70      	bge.n	800238e <read_field_data+0x254>
 80022ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d16c      	bne.n	800238e <read_field_data+0x254>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	335a      	adds	r3, #90	; 0x5a
 80022ba:	b2d8      	uxtb	r0, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1cd9      	adds	r1, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f7fe ff30 	bl	8001128 <bme68x_get_regs>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BME68X_OK)
 80022ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10c      	bne.n	80022f0 <read_field_data+0x1b6>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	785b      	ldrb	r3, [r3, #1]
 80022da:	3350      	adds	r3, #80	; 0x50
 80022dc:	b2d8      	uxtb	r0, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1d19      	adds	r1, r3, #4
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f7fe ff1f 	bl	8001128 <bme68x_get_regs>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 80022f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10c      	bne.n	8002312 <read_field_data+0x1d8>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	3364      	adds	r3, #100	; 0x64
 80022fe:	b2d8      	uxtb	r0, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	1d59      	adds	r1, r3, #5
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f7fe ff0e 	bl	8001128 <bme68x_get_regs>
 800230c:	4603      	mov	r3, r0
 800230e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 8002312:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002316:	2b00      	cmp	r3, #0
 8002318:	d139      	bne.n	800238e <read_field_data+0x254>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800231e:	f7ff fac7 	bl	80018b0 <calc_temperature>
 8002322:	eef0 7a40 	vmov.f32	s15, s0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002330:	f7ff fb44 	bl	80019bc <calc_pressure>
 8002334:	eef0 7a40 	vmov.f32	s15, s0
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 800233e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc7c 	bl	8001c40 <calc_humidity>
 8002348:	eef0 7a40 	vmov.f32	s15, s0
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10c      	bne.n	8002374 <read_field_data+0x23a>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 800235a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800235e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fdda 	bl	8001f1c <calc_gas_resistance_high>
 8002368:	eef0 7a40 	vmov.f32	s15, s0
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8002372:	e026      	b.n	80023c2 <read_field_data+0x288>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002374:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002378:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fd2b 	bl	8001dd8 <calc_gas_resistance_low>
 8002382:	eef0 7a40 	vmov.f32	s15, s0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 800238c:	e019      	b.n	80023c2 <read_field_data+0x288>
            }
        }

        if (rslt == BME68X_OK)
 800238e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <read_field_data+0x26c>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6852      	ldr	r2, [r2, #4]
 800239e:	4611      	mov	r1, r2
 80023a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80023a4:	4798      	blx	r3
        }

        tries--;
 80023a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023aa:	3b01      	subs	r3, #1
 80023ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while ((tries) && (rslt == BME68X_OK))
 80023b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <read_field_data+0x288>
 80023b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f43f aed3 	beq.w	8002168 <read_field_data+0x2e>
    }

    return rslt;
 80023c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3738      	adds	r7, #56	; 0x38
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 80023ce:	b590      	push	{r4, r7, lr}
 80023d0:	b09d      	sub	sp, #116	; 0x74
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 80023de:	2300      	movs	r3, #0
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	222f      	movs	r2, #47	; 0x2f
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 f9ae 	bl	800674c <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
 8002404:	615a      	str	r2, [r3, #20]
 8002406:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10c      	bne.n	800242a <read_all_field_data+0x5c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d107      	bne.n	800242a <read_all_field_data+0x5c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3308      	adds	r3, #8
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8002424:	23ff      	movs	r3, #255	; 0xff
 8002426:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 800242a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8002432:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2233      	movs	r2, #51	; 0x33
 800243a:	201d      	movs	r0, #29
 800243c:	f7fe fe74 	bl	8001128 <bme68x_get_regs>
 8002440:	4603      	mov	r3, r0
 8002442:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 8002446:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 800244e:	f107 0108 	add.w	r1, r7, #8
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	221e      	movs	r2, #30
 8002456:	2050      	movs	r0, #80	; 0x50
 8002458:	f7fe fe66 	bl	8001128 <bme68x_get_regs>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002462:	2300      	movs	r3, #0
 8002464:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002468:	e1d4      	b.n	8002814 <read_all_field_data+0x446>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 800246a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800246e:	461a      	mov	r2, r3
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	4413      	add	r3, r2
 8002474:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002478:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800247c:	3370      	adds	r3, #112	; 0x70
 800247e:	443b      	add	r3, r7
 8002480:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002484:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	440b      	add	r3, r1
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002498:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800249c:	3370      	adds	r3, #112	; 0x70
 800249e:	443b      	add	r3, r7
 80024a0:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 80024a4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	440b      	add	r3, r1
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f002 020f 	and.w	r2, r2, #15
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 80024b8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	440b      	add	r3, r1
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3270      	adds	r2, #112	; 0x70
 80024cc:	443a      	add	r2, r7
 80024ce:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80024d2:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 80024d4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024d8:	3302      	adds	r3, #2
 80024da:	3370      	adds	r3, #112	; 0x70
 80024dc:	443b      	add	r3, r7
 80024de:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024e2:	031a      	lsls	r2, r3, #12
 80024e4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024e8:	3303      	adds	r3, #3
 80024ea:	3370      	adds	r3, #112	; 0x70
 80024ec:	443b      	add	r3, r7
 80024ee:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 80024f6:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80024fa:	3204      	adds	r2, #4
 80024fc:	3270      	adds	r2, #112	; 0x70
 80024fe:	443a      	add	r2, r7
 8002500:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002504:	0912      	lsrs	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
        adc_pres =
 8002508:	4313      	orrs	r3, r2
 800250a:	66bb      	str	r3, [r7, #104]	; 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 800250c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002510:	3305      	adds	r3, #5
 8002512:	3370      	adds	r3, #112	; 0x70
 8002514:	443b      	add	r3, r7
 8002516:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800251a:	031a      	lsls	r2, r3, #12
 800251c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002520:	3306      	adds	r3, #6
 8002522:	3370      	adds	r3, #112	; 0x70
 8002524:	443b      	add	r3, r7
 8002526:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 800252e:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8002532:	3207      	adds	r2, #7
 8002534:	3270      	adds	r2, #112	; 0x70
 8002536:	443a      	add	r2, r7
 8002538:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800253c:	0912      	lsrs	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
        adc_temp =
 8002540:	4313      	orrs	r3, r2
 8002542:	667b      	str	r3, [r7, #100]	; 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8002544:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002548:	3308      	adds	r3, #8
 800254a:	3370      	adds	r3, #112	; 0x70
 800254c:	443b      	add	r3, r7
 800254e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002552:	b29b      	uxth	r3, r3
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	b29a      	uxth	r2, r3
 8002558:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800255c:	3309      	adds	r3, #9
 800255e:	3370      	adds	r3, #112	; 0x70
 8002560:	443b      	add	r3, r7
 8002562:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 800256e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002572:	330d      	adds	r3, #13
 8002574:	3370      	adds	r3, #112	; 0x70
 8002576:	443b      	add	r3, r7
 8002578:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800257c:	b29b      	uxth	r3, r3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	b29a      	uxth	r2, r3
 8002582:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002586:	330e      	adds	r3, #14
 8002588:	3370      	adds	r3, #112	; 0x70
 800258a:	443b      	add	r3, r7
 800258c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	b2db      	uxtb	r3, r3
 8002594:	b29b      	uxth	r3, r3
 8002596:	4313      	orrs	r3, r2
 8002598:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 800259c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025a0:	330f      	adds	r3, #15
 80025a2:	3370      	adds	r3, #112	; 0x70
 80025a4:	443b      	add	r3, r7
 80025a6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025b4:	3310      	adds	r3, #16
 80025b6:	3370      	adds	r3, #112	; 0x70
 80025b8:	443b      	add	r3, r7
 80025ba:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 80025ca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025ce:	330e      	adds	r3, #14
 80025d0:	3370      	adds	r3, #112	; 0x70
 80025d2:	443b      	add	r3, r7
 80025d4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 80025e0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025e4:	3310      	adds	r3, #16
 80025e6:	3370      	adds	r3, #112	; 0x70
 80025e8:	443b      	add	r3, r7
 80025ea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d13a      	bne.n	8002674 <read_all_field_data+0x2a6>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 80025fe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b25a      	sxtb	r2, r3
 800260e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002612:	3310      	adds	r3, #16
 8002614:	3370      	adds	r3, #112	; 0x70
 8002616:	443b      	add	r3, r7
 8002618:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800261c:	b25b      	sxtb	r3, r3
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	b25b      	sxtb	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b259      	sxtb	r1, r3
 8002628:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	b2ca      	uxtb	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8002638:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b25a      	sxtb	r2, r3
 8002648:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800264c:	3310      	adds	r3, #16
 800264e:	3370      	adds	r3, #112	; 0x70
 8002650:	443b      	add	r3, r7
 8002652:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002656:	b25b      	sxtb	r3, r3
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	b25b      	sxtb	r3, r3
 800265e:	4313      	orrs	r3, r2
 8002660:	b259      	sxtb	r1, r3
 8002662:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b2ca      	uxtb	r2, r1
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e039      	b.n	80026e8 <read_all_field_data+0x31a>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8002674:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b25a      	sxtb	r2, r3
 8002684:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002688:	330e      	adds	r3, #14
 800268a:	3370      	adds	r3, #112	; 0x70
 800268c:	443b      	add	r3, r7
 800268e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002692:	b25b      	sxtb	r3, r3
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	b25b      	sxtb	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b259      	sxtb	r1, r3
 800269e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b2ca      	uxtb	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80026ae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b25a      	sxtb	r2, r3
 80026be:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80026c2:	330e      	adds	r3, #14
 80026c4:	3370      	adds	r3, #112	; 0x70
 80026c6:	443b      	add	r3, r7
 80026c8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80026cc:	b25b      	sxtb	r3, r3
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b259      	sxtb	r1, r3
 80026d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b2ca      	uxtb	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 80026e8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	4619      	mov	r1, r3
 80026f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f101 0270 	add.w	r2, r1, #112	; 0x70
 8002708:	443a      	add	r2, r7
 800270a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800270e:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8002710:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	f103 020a 	add.w	r2, r3, #10
 8002722:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	440b      	add	r3, r1
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3270      	adds	r2, #112	; 0x70
 8002730:	443a      	add	r2, r7
 8002732:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002736:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8002738:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	f103 0214 	add.w	r2, r3, #20
 800274a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	440b      	add	r3, r1
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3270      	adds	r2, #112	; 0x70
 8002758:	443a      	add	r2, r7
 800275a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800275e:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8002760:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	681c      	ldr	r4, [r3, #0]
 800276c:	6839      	ldr	r1, [r7, #0]
 800276e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002770:	f7ff f89e 	bl	80018b0 <calc_temperature>
 8002774:	eef0 7a40 	vmov.f32	s15, s0
 8002778:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 800277c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	681c      	ldr	r4, [r3, #0]
 8002788:	6839      	ldr	r1, [r7, #0]
 800278a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800278c:	f7ff f916 	bl	80019bc <calc_pressure>
 8002790:	eef0 7a40 	vmov.f32	s15, s0
 8002794:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8002798:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	681c      	ldr	r4, [r3, #0]
 80027a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fa48 	bl	8001c40 <calc_humidity>
 80027b0:	eef0 7a40 	vmov.f32	s15, s0
 80027b4:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d112      	bne.n	80027e6 <read_all_field_data+0x418>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80027c0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	681c      	ldr	r4, [r3, #0]
 80027cc:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80027d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fba0 	bl	8001f1c <calc_gas_resistance_high>
 80027dc:	eef0 7a40 	vmov.f32	s15, s0
 80027e0:	edc4 7a05 	vstr	s15, [r4, #20]
 80027e4:	e011      	b.n	800280a <read_all_field_data+0x43c>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80027e6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	681c      	ldr	r4, [r3, #0]
 80027f2:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 80027f6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff faeb 	bl	8001dd8 <calc_gas_resistance_low>
 8002802:	eef0 7a40 	vmov.f32	s15, s0
 8002806:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800280a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800280e:	3301      	adds	r3, #1
 8002810:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002814:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002818:	2b02      	cmp	r3, #2
 800281a:	d804      	bhi.n	8002826 <read_all_field_data+0x458>
 800281c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002820:	2b00      	cmp	r3, #0
 8002822:	f43f ae22 	beq.w	800246a <read_all_field_data+0x9c>
        }
    }

    return rslt;
 8002826:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800282a:	4618      	mov	r0, r3
 800282c:	3774      	adds	r7, #116	; 0x74
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}

08002832 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8002832:	b590      	push	{r4, r7, lr}
 8002834:	b085      	sub	sp, #20
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	6039      	str	r1, [r7, #0]
 800283c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800283e:	6838      	ldr	r0, [r7, #0]
 8002840:	f000 f889 	bl	8002956 <null_ptr_check>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8002848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d14f      	bne.n	80028f0 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	da02      	bge.n	800285e <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8002858:	2300      	movs	r3, #0
 800285a:	73bb      	strb	r3, [r7, #14]
 800285c:	e001      	b.n	8002862 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800285e:	2310      	movs	r3, #16
 8002860:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	7b5b      	ldrb	r3, [r3, #13]
 8002866:	7bba      	ldrb	r2, [r7, #14]
 8002868:	429a      	cmp	r2, r3
 800286a:	d041      	beq.n	80028f0 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	7bba      	ldrb	r2, [r7, #14]
 8002870:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f107 010d 	add.w	r1, r7, #13
 800287e:	2201      	movs	r2, #1
 8002880:	20f3      	movs	r0, #243	; 0xf3
 8002882:	47a0      	blx	r4
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8002898:	23fe      	movs	r3, #254	; 0xfe
 800289a:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 800289c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d125      	bne.n	80028f0 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80028a4:	7b7b      	ldrb	r3, [r7, #13]
 80028a6:	f023 0310 	bic.w	r3, r3, #16
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	7b5b      	ldrb	r3, [r3, #13]
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	b25a      	sxtb	r2, r3
 80028ba:	7b7b      	ldrb	r3, [r7, #13]
 80028bc:	b25b      	sxtb	r3, r3
 80028be:	4313      	orrs	r3, r2
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f107 010d 	add.w	r1, r7, #13
 80028d2:	2201      	movs	r2, #1
 80028d4:	2073      	movs	r0, #115	; 0x73
 80028d6:	47a0      	blx	r4
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 80028ec:	23fe      	movs	r3, #254	; 0xfe
 80028ee:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80028f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}

080028fc <boundary_check>:
    return rslt;
}

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	460b      	mov	r3, r1
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f823 	bl	8002956 <null_ptr_check>
 8002910:	4603      	mov	r3, r0
 8002912:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <boundary_check+0x4a>
 800291a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d111      	bne.n	8002946 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	7afa      	ldrb	r2, [r7, #11]
 8002928:	429a      	cmp	r2, r3
 800292a:	d20e      	bcs.n	800294a <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	7afa      	ldrb	r2, [r7, #11]
 8002930:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (*value > max)
 8002944:	e001      	b.n	800294a <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002946:	23ff      	movs	r3, #255	; 0xff
 8002948:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800294a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <null_ptr_check+0x2a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <null_ptr_check+0x2a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <null_ptr_check+0x2a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8002980:	23ff      	movs	r3, #255	; 0xff
 8002982:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b093      	sub	sp, #76	; 0x4c
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	460b      	mov	r3, r1
 80029a2:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80029b0:	236e      	movs	r3, #110	; 0x6e
 80029b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029b6:	4aa1      	ldr	r2, [pc, #644]	; (8002c3c <set_conf+0x2a8>)
 80029b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80029be:	c303      	stmia	r3!, {r0, r1}
 80029c0:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029c2:	4a9e      	ldr	r2, [pc, #632]	; (8002c3c <set_conf+0x2a8>)
 80029c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ca:	c303      	stmia	r3!, {r0, r1}
 80029cc:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029ce:	4a9b      	ldr	r2, [pc, #620]	; (8002c3c <set_conf+0x2a8>)
 80029d0:	f107 0320 	add.w	r3, r7, #32
 80029d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80029d6:	c303      	stmia	r3!, {r0, r1}
 80029d8:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029da:	4a98      	ldr	r2, [pc, #608]	; (8002c3c <set_conf+0x2a8>)
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80029e2:	c303      	stmia	r3!, {r0, r1}
 80029e4:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 80029e6:	7afb      	ldrb	r3, [r7, #11]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d024      	beq.n	8002a36 <set_conf+0xa2>
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	f300 80f9 	bgt.w	8002be4 <set_conf+0x250>
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d002      	beq.n	80029fc <set_conf+0x68>
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d07c      	beq.n	8002af4 <set_conf+0x160>
 80029fa:	e0f3      	b.n	8002be4 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80029fc:	235a      	movs	r3, #90	; 0x5a
 80029fe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	885b      	ldrh	r3, [r3, #2]
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fac1 	bl	8001f90 <calc_res_heat>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8002a14:	2364      	movs	r3, #100	; 0x64
 8002a16:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	889b      	ldrh	r3, [r3, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fb66 	bl	80020f0 <calc_gas_wait>
 8002a24:	4603      	mov	r3, r0
 8002a26:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002a34:	e0db      	b.n	8002bee <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <set_conf+0xb2>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8002a46:	23ff      	movs	r3, #255	; 0xff
 8002a48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002a4c:	e0cf      	b.n	8002bee <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002a54:	e03f      	b.n	8002ad6 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002a56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a5a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a5e:	325a      	adds	r2, #90	; 0x5a
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	3348      	adds	r3, #72	; 0x48
 8002a64:	443b      	add	r3, r7
 8002a66:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002a7c:	6839      	ldr	r1, [r7, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fa86 	bl	8001f90 <calc_res_heat>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002a8c:	443b      	add	r3, r7
 8002a8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002a92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a96:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a9a:	3264      	adds	r2, #100	; 0x64
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	3348      	adds	r3, #72	; 0x48
 8002aa0:	443b      	add	r3, r7
 8002aa2:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fb19 	bl	80020f0 <calc_gas_wait>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002ac6:	443b      	add	r3, r7
 8002ac8:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002acc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	7c1b      	ldrb	r3, [r3, #16]
 8002ada:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d3b9      	bcc.n	8002a56 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	7c1a      	ldrb	r2, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	7c1b      	ldrb	r3, [r3, #16]
 8002aee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002af2:	e07c      	b.n	8002bee <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <set_conf+0x170>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d103      	bne.n	8002b0c <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8002b04:	23ff      	movs	r3, #255	; 0xff
 8002b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002b0a:	e070      	b.n	8002bee <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8a5b      	ldrh	r3, [r3, #18]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002b14:	2303      	movs	r3, #3
 8002b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002b20:	e03a      	b.n	8002b98 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002b22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b26:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b2a:	325a      	adds	r2, #90	; 0x5a
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	3348      	adds	r3, #72	; 0x48
 8002b30:	443b      	add	r3, r7
 8002b32:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002b48:	6839      	ldr	r1, [r7, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fa20 	bl	8001f90 <calc_res_heat>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002b58:	443b      	add	r3, r7
 8002b5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002b5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b62:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b66:	3264      	adds	r2, #100	; 0x64
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	3348      	adds	r3, #72	; 0x48
 8002b6c:	443b      	add	r3, r7
 8002b6e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	3348      	adds	r3, #72	; 0x48
 8002b88:	443b      	add	r3, r7
 8002b8a:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002b8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b92:	3301      	adds	r3, #1
 8002b94:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	7c1b      	ldrb	r3, [r3, #16]
 8002b9c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3be      	bcc.n	8002b22 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	7c1a      	ldrb	r2, [r3, #16]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	7c1b      	ldrb	r3, [r3, #16]
 8002bb0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8a5b      	ldrh	r3, [r3, #18]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f841 	bl	8002c40 <calc_heatr_dur_shared>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            if (rslt == BME68X_OK)
 8002bc4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10f      	bne.n	8002bec <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002bcc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002bd0:	f107 0043 	add.w	r0, r7, #67	; 0x43
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f7fe fa16 	bl	8001008 <bme68x_set_regs>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            break;
 8002be2:	e003      	b.n	8002bec <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002bea:	e000      	b.n	8002bee <set_conf+0x25a>
            break;
 8002bec:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002bee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002bf6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002bfa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002bfe:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f7fe fa00 	bl	8001008 <bme68x_set_regs>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    if (rslt == BME68X_OK)
 8002c0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002c16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c1a:	f107 0114 	add.w	r1, r7, #20
 8002c1e:	f107 0020 	add.w	r0, r7, #32
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f7fe f9f0 	bl	8001008 <bme68x_set_regs>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8002c2e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	374c      	adds	r7, #76	; 0x4c
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	0800b0c8 	.word	0x0800b0c8

08002c40 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	f240 7282 	movw	r2, #1922	; 0x782
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d902      	bls.n	8002c5e <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002c58:	23ff      	movs	r3, #255	; 0xff
 8002c5a:	73bb      	strb	r3, [r7, #14]
 8002c5c:	e01d      	b.n	8002c9a <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c64:	fb03 f202 	mul.w	r2, r3, r2
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <calc_heatr_dur_shared+0x68>)
 8002c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6e:	1ad2      	subs	r2, r2, r3
 8002c70:	0852      	lsrs	r2, r2, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002c78:	e005      	b.n	8002c86 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	3301      	adds	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b3f      	cmp	r3, #63	; 0x3f
 8002c8a:	d8f6      	bhi.n	8002c7a <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	019b      	lsls	r3, r3, #6
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	12c8b89f 	.word	0x12c8b89f

08002cac <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	603a      	str	r2, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	789b      	ldrb	r3, [r3, #2]
 8002cc8:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	789b      	ldrb	r3, [r3, #2]
 8002cd6:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b25b      	sxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da21      	bge.n	8002d2e <sort_sensor_data+0x82>
 8002cea:	79bb      	ldrb	r3, [r7, #6]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b25b      	sxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	da18      	bge.n	8002d2e <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002cfc:	89ba      	ldrh	r2, [r7, #12]
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002d06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d0a:	f113 0f02 	cmn.w	r3, #2
 8002d0e:	db03      	blt.n	8002d18 <sort_sensor_data+0x6c>
 8002d10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db03      	blt.n	8002d20 <sort_sensor_data+0x74>
 8002d18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	dd16      	ble.n	8002d4e <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002d20:	79b9      	ldrb	r1, [r7, #6]
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f816 	bl	8002d58 <swap_fields>
    {
 8002d2c:	e00f      	b.n	8002d4e <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002d2e:	79bb      	ldrb	r3, [r7, #6]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	da07      	bge.n	8002d50 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002d40:	79b9      	ldrb	r1, [r7, #6]
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f806 	bl	8002d58 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002d4c:	e000      	b.n	8002d50 <sort_sensor_data+0xa4>
    {
 8002d4e:	bf00      	nop
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	603a      	str	r2, [r7, #0]
 8002d62:	71fb      	strb	r3, [r7, #7]
 8002d64:	460b      	mov	r3, r1
 8002d66:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002d74:	79bb      	ldrb	r3, [r7, #6]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	440b      	add	r3, r1
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002d88:	79bb      	ldrb	r3, [r7, #6]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <bme68x_i2c_read>:

/*!
 * I2C read function map to COINES platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]
    uint8_t device_addr = *(uint8_t*)intf_ptr;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	75fb      	strb	r3, [r7, #23]

    (void)intf_ptr;
    if (HAL_I2C_Master_Transmit(&hi2c, 0x76 , &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 8002db6:	f107 020f 	add.w	r2, r7, #15
 8002dba:	23c8      	movs	r3, #200	; 0xc8
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	2176      	movs	r1, #118	; 0x76
 8002dc2:	480e      	ldr	r0, [pc, #56]	; (8002dfc <bme68x_i2c_read+0x5c>)
 8002dc4:	f001 fb24 	bl	8004410 <HAL_I2C_Master_Transmit>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <bme68x_i2c_read+0x34>
    	return - 1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e00f      	b.n	8002df4 <bme68x_i2c_read+0x54>
    }
//    return coines_read_i2c(COINES_I2C_BUS_0, device_addr, reg_addr, reg_data, (uint16_t)len);
    if (HAL_I2C_Master_Receive(&hi2c, 0x76 , reg_data, len, I2C_TIMEOUT) != HAL_OK) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	22c8      	movs	r2, #200	; 0xc8
 8002dda:	9200      	str	r2, [sp, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	2176      	movs	r1, #118	; 0x76
 8002de0:	4806      	ldr	r0, [pc, #24]	; (8002dfc <bme68x_i2c_read+0x5c>)
 8002de2:	f001 fc13 	bl	800460c <HAL_I2C_Master_Receive>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <bme68x_i2c_read+0x52>
    	return -1;
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
 8002df0:	e000      	b.n	8002df4 <bme68x_i2c_read+0x54>
    }
    else
    	return 0;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000260 	.word	0x20000260

08002e00 <bme68x_i2c_write>:

/*!
 * I2C write function map to COINES platform
 */
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8002e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e04:	b08b      	sub	sp, #44	; 0x2c
 8002e06:	af02      	add	r7, sp, #8
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]
 8002e12:	466b      	mov	r3, sp
 8002e14:	461e      	mov	r6, r3
    uint8_t device_addr = *(uint8_t*)intf_ptr;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	76fb      	strb	r3, [r7, #27]
    uint8_t info[len + 1];
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	1c59      	adds	r1, r3, #1
 8002e20:	460b      	mov	r3, r1
 8002e22:	3b01      	subs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	2300      	movs	r3, #0
 8002e28:	4688      	mov	r8, r1
 8002e2a:	4699      	mov	r9, r3
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e40:	2300      	movs	r3, #0
 8002e42:	460c      	mov	r4, r1
 8002e44:	461d      	mov	r5, r3
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	00eb      	lsls	r3, r5, #3
 8002e50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e54:	00e2      	lsls	r2, r4, #3
 8002e56:	1dcb      	adds	r3, r1, #7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	ebad 0d03 	sub.w	sp, sp, r3
 8002e60:	ab02      	add	r3, sp, #8
 8002e62:	3300      	adds	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
	info[0] = reg_addr;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	e00a      	b.n	8002e88 <bme68x_i2c_write+0x88>
		info[i + 1] = reg_data[i];
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	441a      	add	r2, r3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	7811      	ldrb	r1, [r2, #0]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < len; i++) {
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d8f0      	bhi.n	8002e72 <bme68x_i2c_write+0x72>
	}

    (void)intf_ptr;

//    return coines_write_i2c(COINES_I2C_BUS_0, device_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
    if (HAL_I2C_Master_Transmit(&hi2c, 0x76 , info, len + 1, I2C_TIMEOUT) != HAL_OK) {
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	22c8      	movs	r2, #200	; 0xc8
 8002e9a:	9200      	str	r2, [sp, #0]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	2176      	movs	r1, #118	; 0x76
 8002ea0:	4807      	ldr	r0, [pc, #28]	; (8002ec0 <bme68x_i2c_write+0xc0>)
 8002ea2:	f001 fab5 	bl	8004410 <HAL_I2C_Master_Transmit>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <bme68x_i2c_write+0xb2>
    	return -1;
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb0:	e000      	b.n	8002eb4 <bme68x_i2c_write+0xb4>
    }
    else
    	return 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	46b5      	mov	sp, r6
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ec0:	20000260 	.word	0x20000260

08002ec4 <bme68x_check_rslt>:

void bme68x_check_rslt(const char api_name[], int8_t rslt)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 8002ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed4:	3305      	adds	r3, #5
 8002ed6:	2b07      	cmp	r3, #7
 8002ed8:	f200 808f 	bhi.w	8002ffa <bme68x_check_rslt+0x136>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <bme68x_check_rslt+0x20>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002fb3 	.word	0x08002fb3
 8002ee8:	08002f6b 	.word	0x08002f6b
 8002eec:	08002f8f 	.word	0x08002f8f
 8002ef0:	08002f47 	.word	0x08002f47
 8002ef4:	08002f23 	.word	0x08002f23
 8002ef8:	08002f05 	.word	0x08002f05
 8002efc:	08002ffb 	.word	0x08002ffb
 8002f00:	08002fd7 	.word	0x08002fd7
    {
        case BME68X_OK:
        	sprintf((char*) tx1, "OK\n");
 8002f04:	4948      	ldr	r1, [pc, #288]	; (8003028 <bme68x_check_rslt+0x164>)
 8002f06:	4849      	ldr	r0, [pc, #292]	; (800302c <bme68x_check_rslt+0x168>)
 8002f08:	f004 faa8 	bl	800745c <siprintf>
			HAL_UART_Transmit(&huart, tx1, strlen((char*) tx1), 200);
 8002f0c:	4847      	ldr	r0, [pc, #284]	; (800302c <bme68x_check_rslt+0x168>)
 8002f0e:	f7fd f967 	bl	80001e0 <strlen>
 8002f12:	4603      	mov	r3, r0
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	23c8      	movs	r3, #200	; 0xc8
 8002f18:	4944      	ldr	r1, [pc, #272]	; (800302c <bme68x_check_rslt+0x168>)
 8002f1a:	4845      	ldr	r0, [pc, #276]	; (8003030 <bme68x_check_rslt+0x16c>)
 8002f1c:	f003 f869 	bl	8005ff2 <HAL_UART_Transmit>
			break;
 8002f20:	e07d      	b.n	800301e <bme68x_check_rslt+0x15a>
        case BME68X_E_NULL_PTR:
            sprintf((char*) tx1, "API name [%s]  Error [%d] : Null pointer\r\n", api_name, rslt);
 8002f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4942      	ldr	r1, [pc, #264]	; (8003034 <bme68x_check_rslt+0x170>)
 8002f2a:	4840      	ldr	r0, [pc, #256]	; (800302c <bme68x_check_rslt+0x168>)
 8002f2c:	f004 fa96 	bl	800745c <siprintf>
            HAL_UART_Transmit(&huart, tx1, strlen((char*) tx1), 200);
 8002f30:	483e      	ldr	r0, [pc, #248]	; (800302c <bme68x_check_rslt+0x168>)
 8002f32:	f7fd f955 	bl	80001e0 <strlen>
 8002f36:	4603      	mov	r3, r0
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	23c8      	movs	r3, #200	; 0xc8
 8002f3c:	493b      	ldr	r1, [pc, #236]	; (800302c <bme68x_check_rslt+0x168>)
 8002f3e:	483c      	ldr	r0, [pc, #240]	; (8003030 <bme68x_check_rslt+0x16c>)
 8002f40:	f003 f857 	bl	8005ff2 <HAL_UART_Transmit>
            break;
 8002f44:	e06b      	b.n	800301e <bme68x_check_rslt+0x15a>
        case BME68X_E_COM_FAIL:
        	sprintf((char*) tx1, "API name [%s]  Error [%d] : Communication failure\r\n", api_name, rslt);
 8002f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	493a      	ldr	r1, [pc, #232]	; (8003038 <bme68x_check_rslt+0x174>)
 8002f4e:	4837      	ldr	r0, [pc, #220]	; (800302c <bme68x_check_rslt+0x168>)
 8002f50:	f004 fa84 	bl	800745c <siprintf>
        	HAL_UART_Transmit(&huart, tx1, strlen((char*) tx1), 200);
 8002f54:	4835      	ldr	r0, [pc, #212]	; (800302c <bme68x_check_rslt+0x168>)
 8002f56:	f7fd f943 	bl	80001e0 <strlen>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	23c8      	movs	r3, #200	; 0xc8
 8002f60:	4932      	ldr	r1, [pc, #200]	; (800302c <bme68x_check_rslt+0x168>)
 8002f62:	4833      	ldr	r0, [pc, #204]	; (8003030 <bme68x_check_rslt+0x16c>)
 8002f64:	f003 f845 	bl	8005ff2 <HAL_UART_Transmit>
            break;
 8002f68:	e059      	b.n	800301e <bme68x_check_rslt+0x15a>
        case BME68X_E_INVALID_LENGTH:
        	sprintf((char*) tx1, "API name [%s]  Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
 8002f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4932      	ldr	r1, [pc, #200]	; (800303c <bme68x_check_rslt+0x178>)
 8002f72:	482e      	ldr	r0, [pc, #184]	; (800302c <bme68x_check_rslt+0x168>)
 8002f74:	f004 fa72 	bl	800745c <siprintf>
        	HAL_UART_Transmit(&huart, tx1, strlen((char*) tx1), 200);
 8002f78:	482c      	ldr	r0, [pc, #176]	; (800302c <bme68x_check_rslt+0x168>)
 8002f7a:	f7fd f931 	bl	80001e0 <strlen>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	23c8      	movs	r3, #200	; 0xc8
 8002f84:	4929      	ldr	r1, [pc, #164]	; (800302c <bme68x_check_rslt+0x168>)
 8002f86:	482a      	ldr	r0, [pc, #168]	; (8003030 <bme68x_check_rslt+0x16c>)
 8002f88:	f003 f833 	bl	8005ff2 <HAL_UART_Transmit>
            break;
 8002f8c:	e047      	b.n	800301e <bme68x_check_rslt+0x15a>
        case BME68X_E_DEV_NOT_FOUND:
        	sprintf((char*) tx1, "API name [%s]  Error [%d] : Device not found\r\n", api_name, rslt);
 8002f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	492a      	ldr	r1, [pc, #168]	; (8003040 <bme68x_check_rslt+0x17c>)
 8002f96:	4825      	ldr	r0, [pc, #148]	; (800302c <bme68x_check_rslt+0x168>)
 8002f98:	f004 fa60 	bl	800745c <siprintf>
        	HAL_UART_Transmit(&huart, tx1, strlen((char*) tx1), 200);
 8002f9c:	4823      	ldr	r0, [pc, #140]	; (800302c <bme68x_check_rslt+0x168>)
 8002f9e:	f7fd f91f 	bl	80001e0 <strlen>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	23c8      	movs	r3, #200	; 0xc8
 8002fa8:	4920      	ldr	r1, [pc, #128]	; (800302c <bme68x_check_rslt+0x168>)
 8002faa:	4821      	ldr	r0, [pc, #132]	; (8003030 <bme68x_check_rslt+0x16c>)
 8002fac:	f003 f821 	bl	8005ff2 <HAL_UART_Transmit>
            break;
 8002fb0:	e035      	b.n	800301e <bme68x_check_rslt+0x15a>
        case BME68X_E_SELF_TEST:
        	sprintf((char*) tx1, "API name [%s]  Error [%d] : Self test error\r\n", api_name, rslt);
 8002fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4922      	ldr	r1, [pc, #136]	; (8003044 <bme68x_check_rslt+0x180>)
 8002fba:	481c      	ldr	r0, [pc, #112]	; (800302c <bme68x_check_rslt+0x168>)
 8002fbc:	f004 fa4e 	bl	800745c <siprintf>
        	HAL_UART_Transmit(&huart, tx1, strlen((char*) tx1), 200);
 8002fc0:	481a      	ldr	r0, [pc, #104]	; (800302c <bme68x_check_rslt+0x168>)
 8002fc2:	f7fd f90d 	bl	80001e0 <strlen>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	23c8      	movs	r3, #200	; 0xc8
 8002fcc:	4917      	ldr	r1, [pc, #92]	; (800302c <bme68x_check_rslt+0x168>)
 8002fce:	4818      	ldr	r0, [pc, #96]	; (8003030 <bme68x_check_rslt+0x16c>)
 8002fd0:	f003 f80f 	bl	8005ff2 <HAL_UART_Transmit>
            break;
 8002fd4:	e023      	b.n	800301e <bme68x_check_rslt+0x15a>
        case BME68X_W_NO_NEW_DATA:
        	sprintf((char*) tx1, "API name [%s]  Warning [%d] : No new data found\r\n", api_name, rslt);
 8002fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	491a      	ldr	r1, [pc, #104]	; (8003048 <bme68x_check_rslt+0x184>)
 8002fde:	4813      	ldr	r0, [pc, #76]	; (800302c <bme68x_check_rslt+0x168>)
 8002fe0:	f004 fa3c 	bl	800745c <siprintf>
        	HAL_UART_Transmit(&huart, tx1, strlen((char*) tx1), 200);
 8002fe4:	4811      	ldr	r0, [pc, #68]	; (800302c <bme68x_check_rslt+0x168>)
 8002fe6:	f7fd f8fb 	bl	80001e0 <strlen>
 8002fea:	4603      	mov	r3, r0
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	23c8      	movs	r3, #200	; 0xc8
 8002ff0:	490e      	ldr	r1, [pc, #56]	; (800302c <bme68x_check_rslt+0x168>)
 8002ff2:	480f      	ldr	r0, [pc, #60]	; (8003030 <bme68x_check_rslt+0x16c>)
 8002ff4:	f002 fffd 	bl	8005ff2 <HAL_UART_Transmit>
            break;
 8002ff8:	e011      	b.n	800301e <bme68x_check_rslt+0x15a>
        default:
        	sprintf((char*) tx1, "API name [%s]  Error [%d] : Unknown error code\r\n", api_name, rslt);
 8002ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4912      	ldr	r1, [pc, #72]	; (800304c <bme68x_check_rslt+0x188>)
 8003002:	480a      	ldr	r0, [pc, #40]	; (800302c <bme68x_check_rslt+0x168>)
 8003004:	f004 fa2a 	bl	800745c <siprintf>
        	HAL_UART_Transmit(&huart, tx1, strlen((char*) tx1), 200);
 8003008:	4808      	ldr	r0, [pc, #32]	; (800302c <bme68x_check_rslt+0x168>)
 800300a:	f7fd f8e9 	bl	80001e0 <strlen>
 800300e:	4603      	mov	r3, r0
 8003010:	b29a      	uxth	r2, r3
 8003012:	23c8      	movs	r3, #200	; 0xc8
 8003014:	4905      	ldr	r1, [pc, #20]	; (800302c <bme68x_check_rslt+0x168>)
 8003016:	4806      	ldr	r0, [pc, #24]	; (8003030 <bme68x_check_rslt+0x16c>)
 8003018:	f002 ffeb 	bl	8005ff2 <HAL_UART_Transmit>
            break;
 800301c:	bf00      	nop
    }
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	0800b0d4 	.word	0x0800b0d4
 800302c:	200001fc 	.word	0x200001fc
 8003030:	200002fc 	.word	0x200002fc
 8003034:	0800b0d8 	.word	0x0800b0d8
 8003038:	0800b104 	.word	0x0800b104
 800303c:	0800b138 	.word	0x0800b138
 8003040:	0800b174 	.word	0x0800b174
 8003044:	0800b1a4 	.word	0x0800b1a4
 8003048:	0800b1d4 	.word	0x0800b1d4
 800304c:	0800b208 	.word	0x0800b208

08003050 <bme68x_delay_us>:

void bme68x_delay_us(uint32_t us, void *intf_ptr) {
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
	(void)intf_ptr;
	__HAL_TIM_SetCounter(&htim, 0);
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <bme68x_delay_us+0x30>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GetCounter(&htim) < us);
 8003062:	bf00      	nop
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <bme68x_delay_us+0x30>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f9      	bhi.n	8003064 <bme68x_delay_us+0x14>
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	200002b4 	.word	0x200002b4

08003084 <bme68x_interface_init>:

int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf, I2C_HandleTypeDef hi2cx, TIM_HandleTypeDef htimx, UART_HandleTypeDef huartx)
{
 8003084:	b082      	sub	sp, #8
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	f107 0018 	add.w	r0, r7, #24
 8003092:	e880 000c 	stmia.w	r0, {r2, r3}
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]

    int8_t rslt = BME68X_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
    hi2c = hi2cx;
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <bme68x_interface_init+0x98>)
 80030a0:	4618      	mov	r0, r3
 80030a2:	f107 0318 	add.w	r3, r7, #24
 80030a6:	2254      	movs	r2, #84	; 0x54
 80030a8:	4619      	mov	r1, r3
 80030aa:	f003 fb41 	bl	8006730 <memcpy>
    htim = htimx;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <bme68x_interface_init+0x9c>)
 80030b0:	4618      	mov	r0, r3
 80030b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030b6:	2248      	movs	r2, #72	; 0x48
 80030b8:	4619      	mov	r1, r3
 80030ba:	f003 fb39 	bl	8006730 <memcpy>
    huart = huartx;
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <bme68x_interface_init+0xa0>)
 80030c0:	4618      	mov	r0, r3
 80030c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030c6:	2244      	movs	r2, #68	; 0x44
 80030c8:	4619      	mov	r1, r3
 80030ca:	f003 fb31 	bl	8006730 <memcpy>
    if (bme != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d018      	beq.n	8003106 <bme68x_interface_init+0x82>
    {
        /* Bus configuration : I2C */
		dev_addr = BME68X_I2C_ADDR_LOW;
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <bme68x_interface_init+0xa4>)
 80030d6:	2276      	movs	r2, #118	; 0x76
 80030d8:	701a      	strb	r2, [r3, #0]
		bme->read = bme68x_i2c_read;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a13      	ldr	r2, [pc, #76]	; (800312c <bme68x_interface_init+0xa8>)
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
		bme->write = bme68x_i2c_write;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <bme68x_interface_init+0xac>)
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44
		bme->intf = BME68X_I2C_INTF;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	731a      	strb	r2, [r3, #12]
		HAL_Delay(200);
 80030ec:	20c8      	movs	r0, #200	; 0xc8
 80030ee:	f000 fd89 	bl	8003c04 <HAL_Delay>
        bme->delay_us = bme68x_delay_us;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <bme68x_interface_init+0xb0>)
 80030f6:	649a      	str	r2, [r3, #72]	; 0x48
        bme->intf_ptr = &dev_addr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <bme68x_interface_init+0xa4>)
 80030fc:	605a      	str	r2, [r3, #4]
        bme->amb_temp = 25; /* The ambient temperature in deg C is used for defining the heater temperature */
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2219      	movs	r2, #25
 8003102:	739a      	strb	r2, [r3, #14]
 8003104:	e001      	b.n	800310a <bme68x_interface_init+0x86>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003106:	23ff      	movs	r3, #255	; 0xff
 8003108:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800310a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003118:	b002      	add	sp, #8
 800311a:	4770      	bx	lr
 800311c:	20000260 	.word	0x20000260
 8003120:	200002b4 	.word	0x200002b4
 8003124:	200002fc 	.word	0x200002fc
 8003128:	20000340 	.word	0x20000340
 800312c:	08002da1 	.word	0x08002da1
 8003130:	08002e01 	.word	0x08002e01
 8003134:	08003051 	.word	0x08003051

08003138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313c:	b0dd      	sub	sp, #372	; 0x174
 800313e:	af36      	add	r7, sp, #216	; 0xd8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003140:	f000 fcee 	bl	8003b20 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003144:	f000 f92a 	bl	800339c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003148:	f000 fa78 	bl	800363c <MX_GPIO_Init>
  MX_I2C1_Init();
 800314c:	f000 f984 	bl	8003458 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003150:	f000 f9b0 	bl	80034b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003154:	f000 fa48 	bl	80035e8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8003158:	f000 f9f8 	bl	800354c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800315c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003160:	4882      	ldr	r0, [pc, #520]	; (800336c <main+0x234>)
 8003162:	f000 fff6 	bl	8004152 <HAL_GPIO_TogglePin>
	HAL_Delay(5000);
 8003166:	f241 3088 	movw	r0, #5000	; 0x1388
 800316a:	f000 fd4b 	bl	8003c04 <HAL_Delay>
	HAL_TIM_Base_Start(&htim2);
 800316e:	4880      	ldr	r0, [pc, #512]	; (8003370 <main+0x238>)
 8003170:	f002 fc48 	bl	8005a04 <HAL_TIM_Base_Start>
	int8_t rslt;
	struct bme68x_conf conf;
	struct bme68x_heatr_conf heatr_conf;
	struct bme68x_data data;
	uint32_t del_period;
	uint32_t time_ms = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint8_t n_fields;
	uint16_t sample_count = 1;
 800317a:	2301      	movs	r3, #1
 800317c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	rslt = bme68x_interface_init(&bme, BME68X_I2C_INTF, hi2c1, htim2, huart1);
 8003180:	4c7c      	ldr	r4, [pc, #496]	; (8003374 <main+0x23c>)
 8003182:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8003186:	4a7c      	ldr	r2, [pc, #496]	; (8003378 <main+0x240>)
 8003188:	ab25      	add	r3, sp, #148	; 0x94
 800318a:	4611      	mov	r1, r2
 800318c:	2244      	movs	r2, #68	; 0x44
 800318e:	4618      	mov	r0, r3
 8003190:	f003 face 	bl	8006730 <memcpy>
 8003194:	4a76      	ldr	r2, [pc, #472]	; (8003370 <main+0x238>)
 8003196:	ab13      	add	r3, sp, #76	; 0x4c
 8003198:	4611      	mov	r1, r2
 800319a:	2248      	movs	r2, #72	; 0x48
 800319c:	4618      	mov	r0, r3
 800319e:	f003 fac7 	bl	8006730 <memcpy>
 80031a2:	4668      	mov	r0, sp
 80031a4:	f104 0308 	add.w	r3, r4, #8
 80031a8:	224c      	movs	r2, #76	; 0x4c
 80031aa:	4619      	mov	r1, r3
 80031ac:	f003 fac0 	bl	8006730 <memcpy>
 80031b0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80031b4:	2101      	movs	r1, #1
 80031b6:	4628      	mov	r0, r5
 80031b8:	f7ff ff64 	bl	8003084 <bme68x_interface_init>
 80031bc:	4603      	mov	r3, r0
 80031be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	bme68x_check_rslt("bme68x_interface_init", rslt);
 80031c2:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80031c6:	4619      	mov	r1, r3
 80031c8:	486c      	ldr	r0, [pc, #432]	; (800337c <main+0x244>)
 80031ca:	f7ff fe7b 	bl	8002ec4 <bme68x_check_rslt>

	conf.filter = BME68X_FILTER_OFF;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	conf.odr = BME68X_ODR_NONE;
 80031d4:	2308      	movs	r3, #8
 80031d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	conf.os_hum = BME68X_OS_16X;
 80031da:	2305      	movs	r3, #5
 80031dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	conf.os_pres = BME68X_OS_1X;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	conf.os_temp = BME68X_OS_2X;
 80031e6:	2302      	movs	r3, #2
 80031e8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	rslt = bme68x_set_conf(&conf, &bme);
 80031ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd ffda 	bl	80011b0 <bme68x_set_conf>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	bme68x_check_rslt("bme68x_set_conf", rslt);
 8003202:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003206:	4619      	mov	r1, r3
 8003208:	485d      	ldr	r0, [pc, #372]	; (8003380 <main+0x248>)
 800320a:	f7ff fe5b 	bl	8002ec4 <bme68x_check_rslt>

	heatr_conf.enable = BME68X_ENABLE;
 800320e:	2301      	movs	r3, #1
 8003210:	773b      	strb	r3, [r7, #28]
	heatr_conf.heatr_temp = 300;
 8003212:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003216:	83fb      	strh	r3, [r7, #30]
	heatr_conf.heatr_dur = 100;
 8003218:	2364      	movs	r3, #100	; 0x64
 800321a:	843b      	strh	r3, [r7, #32]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 800321c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	4619      	mov	r1, r3
 8003226:	2001      	movs	r0, #1
 8003228:	f7fe faba 	bl	80017a0 <bme68x_set_heatr_conf>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	bme68x_check_rslt("bme68x_set_heatr_conf", rslt);
 8003232:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003236:	4619      	mov	r1, r3
 8003238:	4852      	ldr	r0, [pc, #328]	; (8003384 <main+0x24c>)
 800323a:	f7ff fe43 	bl	8002ec4 <bme68x_check_rslt>

	sprintf((char*) tx,
 800323e:	4952      	ldr	r1, [pc, #328]	; (8003388 <main+0x250>)
 8003240:	4852      	ldr	r0, [pc, #328]	; (800338c <main+0x254>)
 8003242:	f004 f90b 	bl	800745c <siprintf>
			"Sample, TimeStamp(ms), Temperature(deg C), Pressure(Pa), Humidity(%%), Gas resistance(ohm), Status\n");
	HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8003246:	4851      	ldr	r0, [pc, #324]	; (800338c <main+0x254>)
 8003248:	f7fc ffca 	bl	80001e0 <strlen>
 800324c:	4603      	mov	r3, r0
 800324e:	b29a      	uxth	r2, r3
 8003250:	23c8      	movs	r3, #200	; 0xc8
 8003252:	494e      	ldr	r1, [pc, #312]	; (800338c <main+0x254>)
 8003254:	4848      	ldr	r0, [pc, #288]	; (8003378 <main+0x240>)
 8003256:	f002 fecc 	bl	8005ff2 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (sample_count <= 300) {
 800325a:	e07a      	b.n	8003352 <main+0x21a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800325c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003260:	4842      	ldr	r0, [pc, #264]	; (800336c <main+0x234>)
 8003262:	f000 ff76 	bl	8004152 <HAL_GPIO_TogglePin>
		rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8003266:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800326a:	4619      	mov	r1, r3
 800326c:	2001      	movs	r0, #1
 800326e:	f7fe f8a3 	bl	80013b8 <bme68x_set_op_mode>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		bme68x_check_rslt("bme68x_set_op_mode", rslt);
 8003278:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800327c:	4619      	mov	r1, r3
 800327e:	4844      	ldr	r0, [pc, #272]	; (8003390 <main+0x258>)
 8003280:	f7ff fe20 	bl	8002ec4 <bme68x_check_rslt>

		/* Calculate delay period in microseconds */
		del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003284:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003288:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800328c:	4619      	mov	r1, r3
 800328e:	2001      	movs	r0, #1
 8003290:	f7fe f914 	bl	80014bc <bme68x_get_meas_dur>
 8003294:	4603      	mov	r3, r0
				+ (heatr_conf.heatr_dur * 1000);
 8003296:	8c3a      	ldrh	r2, [r7, #32]
 8003298:	4611      	mov	r1, r2
 800329a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800329e:	fb01 f202 	mul.w	r2, r1, r2
		del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 80032a2:	4413      	add	r3, r2
 80032a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		bme.delay_us(del_period, bme.intf_ptr);
 80032a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ae:	4611      	mov	r1, r2
 80032b0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80032b4:	4798      	blx	r3


		/* Check if rslt == BME68X_OK, report or handle if otherwise */
		rslt = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme);
 80032b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032ba:	1cfa      	adds	r2, r7, #3
 80032bc:	1d39      	adds	r1, r7, #4
 80032be:	2001      	movs	r0, #1
 80032c0:	f7fe f970 	bl	80015a4 <bme68x_get_data>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		bme68x_check_rslt("bme68x_get_data", rslt);
 80032ca:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80032ce:	4619      	mov	r1, r3
 80032d0:	4830      	ldr	r0, [pc, #192]	; (8003394 <main+0x25c>)
 80032d2:	f7ff fdf7 	bl	8002ec4 <bme68x_check_rslt>
		sprintf((char*) tx, "%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 80032d6:	f8b7 6096 	ldrh.w	r6, [r7, #150]	; 0x96
				sample_count, (long unsigned int) time_ms, data.temperature,
 80032da:	68fb      	ldr	r3, [r7, #12]
		sprintf((char*) tx, "%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd f93b 	bl	8000558 <__aeabi_f2d>
 80032e2:	4604      	mov	r4, r0
 80032e4:	460d      	mov	r5, r1
				data.pressure, data.humidity, data.gas_resistance, data.status);
 80032e6:	693b      	ldr	r3, [r7, #16]
		sprintf((char*) tx, "%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f935 	bl	8000558 <__aeabi_f2d>
 80032ee:	4680      	mov	r8, r0
 80032f0:	4689      	mov	r9, r1
				data.pressure, data.humidity, data.gas_resistance, data.status);
 80032f2:	697b      	ldr	r3, [r7, #20]
		sprintf((char*) tx, "%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f92f 	bl	8000558 <__aeabi_f2d>
 80032fa:	4682      	mov	sl, r0
 80032fc:	468b      	mov	fp, r1
				data.pressure, data.humidity, data.gas_resistance, data.status);
 80032fe:	69bb      	ldr	r3, [r7, #24]
		sprintf((char*) tx, "%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f929 	bl	8000558 <__aeabi_f2d>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
				data.pressure, data.humidity, data.gas_resistance, data.status);
 800330a:	7939      	ldrb	r1, [r7, #4]
		sprintf((char*) tx, "%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 800330c:	9108      	str	r1, [sp, #32]
 800330e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003312:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003316:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800331a:	e9cd 4500 	strd	r4, r5, [sp]
 800331e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003322:	4632      	mov	r2, r6
 8003324:	491c      	ldr	r1, [pc, #112]	; (8003398 <main+0x260>)
 8003326:	4819      	ldr	r0, [pc, #100]	; (800338c <main+0x254>)
 8003328:	f004 f898 	bl	800745c <siprintf>
		HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800332c:	4817      	ldr	r0, [pc, #92]	; (800338c <main+0x254>)
 800332e:	f7fc ff57 	bl	80001e0 <strlen>
 8003332:	4603      	mov	r3, r0
 8003334:	b29a      	uxth	r2, r3
 8003336:	23c8      	movs	r3, #200	; 0xc8
 8003338:	4914      	ldr	r1, [pc, #80]	; (800338c <main+0x254>)
 800333a:	480f      	ldr	r0, [pc, #60]	; (8003378 <main+0x240>)
 800333c:	f002 fe59 	bl	8005ff2 <HAL_UART_Transmit>
		sample_count++;
 8003340:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003344:	3301      	adds	r3, #1
 8003346:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		HAL_Delay(500);
 800334a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800334e:	f000 fc59 	bl	8003c04 <HAL_Delay>
	while (sample_count <= 300) {
 8003352:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003356:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800335a:	f67f af7f 	bls.w	800325c <main+0x124>
 800335e:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8003360:	4618      	mov	r0, r3
 8003362:	379c      	adds	r7, #156	; 0x9c
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336a:	bf00      	nop
 800336c:	40020800 	.word	0x40020800
 8003370:	20000398 	.word	0x20000398
 8003374:	20000344 	.word	0x20000344
 8003378:	20000428 	.word	0x20000428
 800337c:	0800b23c 	.word	0x0800b23c
 8003380:	0800b254 	.word	0x0800b254
 8003384:	0800b264 	.word	0x0800b264
 8003388:	0800b27c 	.word	0x0800b27c
 800338c:	2000046c 	.word	0x2000046c
 8003390:	0800b2e0 	.word	0x0800b2e0
 8003394:	0800b2f4 	.word	0x0800b2f4
 8003398:	0800b304 	.word	0x0800b304

0800339c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b094      	sub	sp, #80	; 0x50
 80033a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033a2:	f107 0320 	add.w	r3, r7, #32
 80033a6:	2230      	movs	r2, #48	; 0x30
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 f9ce 	bl	800674c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033b0:	f107 030c 	add.w	r3, r7, #12
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	4b22      	ldr	r3, [pc, #136]	; (8003450 <SystemClock_Config+0xb4>)
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <SystemClock_Config+0xb4>)
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	6413      	str	r3, [r2, #64]	; 0x40
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <SystemClock_Config+0xb4>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033dc:	2300      	movs	r3, #0
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <SystemClock_Config+0xb8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <SystemClock_Config+0xb8>)
 80033e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b19      	ldr	r3, [pc, #100]	; (8003454 <SystemClock_Config+0xb8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033f8:	2302      	movs	r3, #2
 80033fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033fc:	2301      	movs	r3, #1
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003400:	2310      	movs	r3, #16
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003404:	2300      	movs	r3, #0
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003408:	f107 0320 	add.w	r3, r7, #32
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fe51 	bl	80050b4 <HAL_RCC_OscConfig>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003418:	f000 f962 	bl	80036e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800341c:	230f      	movs	r3, #15
 800341e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800342c:	2300      	movs	r3, #0
 800342e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003430:	f107 030c 	add.w	r3, r7, #12
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f002 f8b4 	bl	80055a4 <HAL_RCC_ClockConfig>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003442:	f000 f94d 	bl	80036e0 <Error_Handler>
  }
}
 8003446:	bf00      	nop
 8003448:	3750      	adds	r7, #80	; 0x50
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000

08003458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <MX_I2C1_Init+0x50>)
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <MX_I2C1_Init+0x54>)
 8003460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <MX_I2C1_Init+0x50>)
 8003464:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <MX_I2C1_Init+0x58>)
 8003466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <MX_I2C1_Init+0x50>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <MX_I2C1_Init+0x50>)
 8003470:	2200      	movs	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <MX_I2C1_Init+0x50>)
 8003476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800347a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <MX_I2C1_Init+0x50>)
 800347e:	2200      	movs	r2, #0
 8003480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <MX_I2C1_Init+0x50>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <MX_I2C1_Init+0x50>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <MX_I2C1_Init+0x50>)
 8003490:	2200      	movs	r2, #0
 8003492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003494:	4804      	ldr	r0, [pc, #16]	; (80034a8 <MX_I2C1_Init+0x50>)
 8003496:	f000 fe77 	bl	8004188 <HAL_I2C_Init>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034a0:	f000 f91e 	bl	80036e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000344 	.word	0x20000344
 80034ac:	40005400 	.word	0x40005400
 80034b0:	000186a0 	.word	0x000186a0

080034b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ba:	f107 0308 	add.w	r3, r7, #8
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c8:	463b      	mov	r3, r7
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034d0:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <MX_TIM2_Init+0x94>)
 80034d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <MX_TIM2_Init+0x94>)
 80034da:	220f      	movs	r2, #15
 80034dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <MX_TIM2_Init+0x94>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <MX_TIM2_Init+0x94>)
 80034e6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ec:	4b16      	ldr	r3, [pc, #88]	; (8003548 <MX_TIM2_Init+0x94>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <MX_TIM2_Init+0x94>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034f8:	4813      	ldr	r0, [pc, #76]	; (8003548 <MX_TIM2_Init+0x94>)
 80034fa:	f002 fa33 	bl	8005964 <HAL_TIM_Base_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003504:	f000 f8ec 	bl	80036e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800350c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800350e:	f107 0308 	add.w	r3, r7, #8
 8003512:	4619      	mov	r1, r3
 8003514:	480c      	ldr	r0, [pc, #48]	; (8003548 <MX_TIM2_Init+0x94>)
 8003516:	f002 facf 	bl	8005ab8 <HAL_TIM_ConfigClockSource>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003520:	f000 f8de 	bl	80036e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003524:	2300      	movs	r3, #0
 8003526:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003528:	2300      	movs	r3, #0
 800352a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800352c:	463b      	mov	r3, r7
 800352e:	4619      	mov	r1, r3
 8003530:	4805      	ldr	r0, [pc, #20]	; (8003548 <MX_TIM2_Init+0x94>)
 8003532:	f002 fca3 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800353c:	f000 f8d0 	bl	80036e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003540:	bf00      	nop
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000398 	.word	0x20000398

0800354c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003552:	f107 0308 	add.w	r3, r7, #8
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	605a      	str	r2, [r3, #4]
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003560:	463b      	mov	r3, r7
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <MX_TIM3_Init+0x94>)
 800356a:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <MX_TIM3_Init+0x98>)
 800356c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <MX_TIM3_Init+0x94>)
 8003570:	2200      	movs	r2, #0
 8003572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <MX_TIM3_Init+0x94>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <MX_TIM3_Init+0x94>)
 800357c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <MX_TIM3_Init+0x94>)
 8003584:	2200      	movs	r2, #0
 8003586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <MX_TIM3_Init+0x94>)
 800358a:	2200      	movs	r2, #0
 800358c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800358e:	4814      	ldr	r0, [pc, #80]	; (80035e0 <MX_TIM3_Init+0x94>)
 8003590:	f002 f9e8 	bl	8005964 <HAL_TIM_Base_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800359a:	f000 f8a1 	bl	80036e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800359e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035a4:	f107 0308 	add.w	r3, r7, #8
 80035a8:	4619      	mov	r1, r3
 80035aa:	480d      	ldr	r0, [pc, #52]	; (80035e0 <MX_TIM3_Init+0x94>)
 80035ac:	f002 fa84 	bl	8005ab8 <HAL_TIM_ConfigClockSource>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80035b6:	f000 f893 	bl	80036e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035c2:	463b      	mov	r3, r7
 80035c4:	4619      	mov	r1, r3
 80035c6:	4806      	ldr	r0, [pc, #24]	; (80035e0 <MX_TIM3_Init+0x94>)
 80035c8:	f002 fc58 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80035d2:	f000 f885 	bl	80036e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200003e0 	.word	0x200003e0
 80035e4:	40000400 	.word	0x40000400

080035e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <MX_USART1_UART_Init+0x4c>)
 80035ee:	4a12      	ldr	r2, [pc, #72]	; (8003638 <MX_USART1_UART_Init+0x50>)
 80035f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <MX_USART1_UART_Init+0x4c>)
 80035f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <MX_USART1_UART_Init+0x4c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <MX_USART1_UART_Init+0x4c>)
 8003602:	2200      	movs	r2, #0
 8003604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <MX_USART1_UART_Init+0x4c>)
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <MX_USART1_UART_Init+0x4c>)
 800360e:	220c      	movs	r2, #12
 8003610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <MX_USART1_UART_Init+0x4c>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <MX_USART1_UART_Init+0x4c>)
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800361e:	4805      	ldr	r0, [pc, #20]	; (8003634 <MX_USART1_UART_Init+0x4c>)
 8003620:	f002 fc9a 	bl	8005f58 <HAL_UART_Init>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800362a:	f000 f859 	bl	80036e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000428 	.word	0x20000428
 8003638:	40011000 	.word	0x40011000

0800363c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003642:	f107 030c 	add.w	r3, r7, #12
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <MX_GPIO_Init+0x9c>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <MX_GPIO_Init+0x9c>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <MX_GPIO_Init+0x9c>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <MX_GPIO_Init+0x9c>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <MX_GPIO_Init+0x9c>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <MX_GPIO_Init+0x9c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <MX_GPIO_Init+0x9c>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <MX_GPIO_Init+0x9c>)
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <MX_GPIO_Init+0x9c>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80036a6:	2200      	movs	r2, #0
 80036a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <MX_GPIO_Init+0xa0>)
 80036ae:	f000 fd37 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b8:	2301      	movs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c4:	f107 030c 	add.w	r3, r7, #12
 80036c8:	4619      	mov	r1, r3
 80036ca:	4804      	ldr	r0, [pc, #16]	; (80036dc <MX_GPIO_Init+0xa0>)
 80036cc:	f000 fba4 	bl	8003e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036d0:	bf00      	nop
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40020800 	.word	0x40020800

080036e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036e4:	b672      	cpsid	i
}
 80036e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80036e8:	e7fe      	b.n	80036e8 <Error_Handler+0x8>
	...

080036ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_MspInit+0x4c>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	4a0f      	ldr	r2, [pc, #60]	; (8003738 <HAL_MspInit+0x4c>)
 80036fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003700:	6453      	str	r3, [r2, #68]	; 0x44
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <HAL_MspInit+0x4c>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_MspInit+0x4c>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <HAL_MspInit+0x4c>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_MspInit+0x4c>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800

0800373c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_I2C_MspInit+0x84>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d12b      	bne.n	80037b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <HAL_I2C_MspInit+0x88>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_I2C_MspInit+0x88>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_I2C_MspInit+0x88>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800377a:	23c0      	movs	r3, #192	; 0xc0
 800377c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800377e:	2312      	movs	r3, #18
 8003780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003786:	2303      	movs	r3, #3
 8003788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800378a:	2304      	movs	r3, #4
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378e:	f107 0314 	add.w	r3, r7, #20
 8003792:	4619      	mov	r1, r3
 8003794:	480c      	ldr	r0, [pc, #48]	; (80037c8 <HAL_I2C_MspInit+0x8c>)
 8003796:	f000 fb3f 	bl	8003e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_I2C_MspInit+0x88>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <HAL_I2C_MspInit+0x88>)
 80037a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_I2C_MspInit+0x88>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80037b6:	bf00      	nop
 80037b8:	3728      	adds	r7, #40	; 0x28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40005400 	.word	0x40005400
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40020400 	.word	0x40020400

080037cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037dc:	d10e      	bne.n	80037fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_TIM_Base_MspInit+0x64>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_TIM_Base_MspInit+0x64>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6413      	str	r3, [r2, #64]	; 0x40
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_TIM_Base_MspInit+0x64>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037fa:	e012      	b.n	8003822 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0c      	ldr	r2, [pc, #48]	; (8003834 <HAL_TIM_Base_MspInit+0x68>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10d      	bne.n	8003822 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_TIM_Base_MspInit+0x64>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a08      	ldr	r2, [pc, #32]	; (8003830 <HAL_TIM_Base_MspInit+0x64>)
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_TIM_Base_MspInit+0x64>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
}
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	40000400 	.word	0x40000400

08003838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a19      	ldr	r2, [pc, #100]	; (80038bc <HAL_UART_MspInit+0x84>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d12c      	bne.n	80038b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <HAL_UART_MspInit+0x88>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <HAL_UART_MspInit+0x88>)
 8003864:	f043 0310 	orr.w	r3, r3, #16
 8003868:	6453      	str	r3, [r2, #68]	; 0x44
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_UART_MspInit+0x88>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_UART_MspInit+0x88>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4a10      	ldr	r2, [pc, #64]	; (80038c0 <HAL_UART_MspInit+0x88>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <HAL_UART_MspInit+0x88>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003892:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003898:	2302      	movs	r3, #2
 800389a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a0:	2303      	movs	r3, #3
 80038a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038a4:	2307      	movs	r3, #7
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4619      	mov	r1, r3
 80038ae:	4805      	ldr	r0, [pc, #20]	; (80038c4 <HAL_UART_MspInit+0x8c>)
 80038b0:	f000 fab2 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80038b4:	bf00      	nop
 80038b6:	3728      	adds	r7, #40	; 0x28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40011000 	.word	0x40011000
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40020000 	.word	0x40020000

080038c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038cc:	e7fe      	b.n	80038cc <NMI_Handler+0x4>

080038ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038d2:	e7fe      	b.n	80038d2 <HardFault_Handler+0x4>

080038d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038d8:	e7fe      	b.n	80038d8 <MemManage_Handler+0x4>

080038da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038de:	e7fe      	b.n	80038de <BusFault_Handler+0x4>

080038e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <UsageFault_Handler+0x4>

080038e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003914:	f000 f956 	bl	8003bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}

0800391c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return 1;
 8003920:	2301      	movs	r3, #1
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <_kill>:

int _kill(int pid, int sig)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003936:	f002 fed1 	bl	80066dc <__errno>
 800393a:	4603      	mov	r3, r0
 800393c:	2216      	movs	r2, #22
 800393e:	601a      	str	r2, [r3, #0]
  return -1;
 8003940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_exit>:

void _exit (int status)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003954:	f04f 31ff 	mov.w	r1, #4294967295
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ffe7 	bl	800392c <_kill>
  while (1) {}    /* Make sure we hang here */
 800395e:	e7fe      	b.n	800395e <_exit+0x12>

08003960 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e00a      	b.n	8003988 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003972:	f3af 8000 	nop.w
 8003976:	4601      	mov	r1, r0
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	60ba      	str	r2, [r7, #8]
 800397e:	b2ca      	uxtb	r2, r1
 8003980:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3301      	adds	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	dbf0      	blt.n	8003972 <_read+0x12>
  }

  return len;
 8003990:	687b      	ldr	r3, [r7, #4]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e009      	b.n	80039c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	60ba      	str	r2, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	dbf1      	blt.n	80039ac <_write+0x12>
  }
  return len;
 80039c8:	687b      	ldr	r3, [r7, #4]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_close>:

int _close(int file)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fa:	605a      	str	r2, [r3, #4]
  return 0;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <_isatty>:

int _isatty(int file)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <_sbrk+0x5c>)
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <_sbrk+0x60>)
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <_sbrk+0x64>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <_sbrk+0x64>)
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <_sbrk+0x68>)
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <_sbrk+0x64>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d207      	bcs.n	8003a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a6c:	f002 fe36 	bl	80066dc <__errno>
 8003a70:	4603      	mov	r3, r0
 8003a72:	220c      	movs	r2, #12
 8003a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	e009      	b.n	8003a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <_sbrk+0x64>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <_sbrk+0x64>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	4a05      	ldr	r2, [pc, #20]	; (8003aa0 <_sbrk+0x64>)
 8003a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20020000 	.word	0x20020000
 8003a9c:	00000400 	.word	0x00000400
 8003aa0:	200004d0 	.word	0x200004d0
 8003aa4:	200004e8 	.word	0x200004e8

08003aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <SystemInit+0x20>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	4a05      	ldr	r2, [pc, #20]	; (8003ac8 <SystemInit+0x20>)
 8003ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ad0:	480d      	ldr	r0, [pc, #52]	; (8003b08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ad2:	490e      	ldr	r1, [pc, #56]	; (8003b0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ad4:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad8:	e002      	b.n	8003ae0 <LoopCopyDataInit>

08003ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ade:	3304      	adds	r3, #4

08003ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae4:	d3f9      	bcc.n	8003ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ae8:	4c0b      	ldr	r4, [pc, #44]	; (8003b18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aec:	e001      	b.n	8003af2 <LoopFillZerobss>

08003aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af0:	3204      	adds	r2, #4

08003af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af4:	d3fb      	bcc.n	8003aee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003af6:	f7ff ffd7 	bl	8003aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003afa:	f002 fdf5 	bl	80066e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003afe:	f7ff fb1b 	bl	8003138 <main>
  bx  lr    
 8003b02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b0c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003b10:	0800b7fc 	.word	0x0800b7fc
  ldr r2, =_sbss
 8003b14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003b18:	200004e8 	.word	0x200004e8

08003b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b1c:	e7fe      	b.n	8003b1c <ADC_IRQHandler>
	...

08003b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b24:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <HAL_Init+0x40>)
 8003b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_Init+0x40>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_Init+0x40>)
 8003b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <HAL_Init+0x40>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a07      	ldr	r2, [pc, #28]	; (8003b60 <HAL_Init+0x40>)
 8003b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b48:	2003      	movs	r0, #3
 8003b4a:	f000 f931 	bl	8003db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b4e:	200f      	movs	r0, #15
 8003b50:	f000 f808 	bl	8003b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b54:	f7ff fdca 	bl	80036ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023c00 	.word	0x40023c00

08003b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_InitTick+0x54>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_InitTick+0x58>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	4619      	mov	r1, r3
 8003b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f93b 	bl	8003dfe <HAL_SYSTICK_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00e      	b.n	8003bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	d80a      	bhi.n	8003bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	f000 f911 	bl	8003dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <HAL_InitTick+0x5c>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	20000008 	.word	0x20000008
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_IncTick+0x20>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_IncTick+0x24>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_IncTick+0x24>)
 8003bd6:	6013      	str	r3, [r2, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000008 	.word	0x20000008
 8003be8:	200004d4 	.word	0x200004d4

08003bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_GetTick+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	200004d4 	.word	0x200004d4

08003c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c0c:	f7ff ffee 	bl	8003bec <HAL_GetTick>
 8003c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d005      	beq.n	8003c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <HAL_Delay+0x44>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c2a:	bf00      	nop
 8003c2c:	f7ff ffde 	bl	8003bec <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d8f7      	bhi.n	8003c2c <HAL_Delay+0x28>
  {
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000008 	.word	0x20000008

08003c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <__NVIC_SetPriorityGrouping+0x44>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c7e:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <__NVIC_SetPriorityGrouping+0x44>)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	60d3      	str	r3, [r2, #12]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c98:	4b04      	ldr	r3, [pc, #16]	; (8003cac <__NVIC_GetPriorityGrouping+0x18>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	f003 0307 	and.w	r3, r3, #7
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	6039      	str	r1, [r7, #0]
 8003cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	db0a      	blt.n	8003cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	490c      	ldr	r1, [pc, #48]	; (8003cfc <__NVIC_SetPriority+0x4c>)
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	0112      	lsls	r2, r2, #4
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd8:	e00a      	b.n	8003cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4908      	ldr	r1, [pc, #32]	; (8003d00 <__NVIC_SetPriority+0x50>)
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	3b04      	subs	r3, #4
 8003ce8:	0112      	lsls	r2, r2, #4
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	440b      	add	r3, r1
 8003cee:	761a      	strb	r2, [r3, #24]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	e000e100 	.word	0xe000e100
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f1c3 0307 	rsb	r3, r3, #7
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	bf28      	it	cs
 8003d22:	2304      	movcs	r3, #4
 8003d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d902      	bls.n	8003d34 <NVIC_EncodePriority+0x30>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3b03      	subs	r3, #3
 8003d32:	e000      	b.n	8003d36 <NVIC_EncodePriority+0x32>
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	401a      	ands	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43d9      	mvns	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	4313      	orrs	r3, r2
         );
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d7c:	d301      	bcc.n	8003d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00f      	b.n	8003da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d82:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <SysTick_Config+0x40>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d8a:	210f      	movs	r1, #15
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d90:	f7ff ff8e 	bl	8003cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <SysTick_Config+0x40>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d9a:	4b04      	ldr	r3, [pc, #16]	; (8003dac <SysTick_Config+0x40>)
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	e000e010 	.word	0xe000e010

08003db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff47 	bl	8003c4c <__NVIC_SetPriorityGrouping>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd8:	f7ff ff5c 	bl	8003c94 <__NVIC_GetPriorityGrouping>
 8003ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	6978      	ldr	r0, [r7, #20]
 8003de4:	f7ff ff8e 	bl	8003d04 <NVIC_EncodePriority>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ff5d 	bl	8003cb0 <__NVIC_SetPriority>
}
 8003df6:	bf00      	nop
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ffb0 	bl	8003d6c <SysTick_Config>
 8003e0c:	4603      	mov	r3, r0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b089      	sub	sp, #36	; 0x24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e159      	b.n	80040e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e34:	2201      	movs	r2, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	f040 8148 	bne.w	80040e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d005      	beq.n	8003e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d130      	bne.n	8003ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	2203      	movs	r2, #3
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 0201 	and.w	r2, r3, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d017      	beq.n	8003f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d123      	bne.n	8003f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	220f      	movs	r2, #15
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	08da      	lsrs	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3208      	adds	r2, #8
 8003f56:	69b9      	ldr	r1, [r7, #24]
 8003f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2203      	movs	r2, #3
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0203 	and.w	r2, r3, #3
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a2 	beq.w	80040e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	4b57      	ldr	r3, [pc, #348]	; (8004100 <HAL_GPIO_Init+0x2e8>)
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	4a56      	ldr	r2, [pc, #344]	; (8004100 <HAL_GPIO_Init+0x2e8>)
 8003fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fac:	6453      	str	r3, [r2, #68]	; 0x44
 8003fae:	4b54      	ldr	r3, [pc, #336]	; (8004100 <HAL_GPIO_Init+0x2e8>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fba:	4a52      	ldr	r2, [pc, #328]	; (8004104 <HAL_GPIO_Init+0x2ec>)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	220f      	movs	r2, #15
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a49      	ldr	r2, [pc, #292]	; (8004108 <HAL_GPIO_Init+0x2f0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d019      	beq.n	800401a <HAL_GPIO_Init+0x202>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a48      	ldr	r2, [pc, #288]	; (800410c <HAL_GPIO_Init+0x2f4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_GPIO_Init+0x1fe>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a47      	ldr	r2, [pc, #284]	; (8004110 <HAL_GPIO_Init+0x2f8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00d      	beq.n	8004012 <HAL_GPIO_Init+0x1fa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a46      	ldr	r2, [pc, #280]	; (8004114 <HAL_GPIO_Init+0x2fc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d007      	beq.n	800400e <HAL_GPIO_Init+0x1f6>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a45      	ldr	r2, [pc, #276]	; (8004118 <HAL_GPIO_Init+0x300>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <HAL_GPIO_Init+0x1f2>
 8004006:	2304      	movs	r3, #4
 8004008:	e008      	b.n	800401c <HAL_GPIO_Init+0x204>
 800400a:	2307      	movs	r3, #7
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x204>
 800400e:	2303      	movs	r3, #3
 8004010:	e004      	b.n	800401c <HAL_GPIO_Init+0x204>
 8004012:	2302      	movs	r3, #2
 8004014:	e002      	b.n	800401c <HAL_GPIO_Init+0x204>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_GPIO_Init+0x204>
 800401a:	2300      	movs	r3, #0
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f002 0203 	and.w	r2, r2, #3
 8004022:	0092      	lsls	r2, r2, #2
 8004024:	4093      	lsls	r3, r2
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402c:	4935      	ldr	r1, [pc, #212]	; (8004104 <HAL_GPIO_Init+0x2ec>)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_GPIO_Init+0x304>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405e:	4a2f      	ldr	r2, [pc, #188]	; (800411c <HAL_GPIO_Init+0x304>)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004064:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_GPIO_Init+0x304>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004088:	4a24      	ldr	r2, [pc, #144]	; (800411c <HAL_GPIO_Init+0x304>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800408e:	4b23      	ldr	r3, [pc, #140]	; (800411c <HAL_GPIO_Init+0x304>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b2:	4a1a      	ldr	r2, [pc, #104]	; (800411c <HAL_GPIO_Init+0x304>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <HAL_GPIO_Init+0x304>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040dc:	4a0f      	ldr	r2, [pc, #60]	; (800411c <HAL_GPIO_Init+0x304>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	f67f aea2 	bls.w	8003e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	40013800 	.word	0x40013800
 8004108:	40020000 	.word	0x40020000
 800410c:	40020400 	.word	0x40020400
 8004110:	40020800 	.word	0x40020800
 8004114:	40020c00 	.word	0x40020c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40013c00 	.word	0x40013c00

08004120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
 800412c:	4613      	mov	r3, r2
 800412e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004130:	787b      	ldrb	r3, [r7, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800413c:	e003      	b.n	8004146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	041a      	lsls	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004164:	887a      	ldrh	r2, [r7, #2]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4013      	ands	r3, r2
 800416a:	041a      	lsls	r2, r3, #16
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	43d9      	mvns	r1, r3
 8004170:	887b      	ldrh	r3, [r7, #2]
 8004172:	400b      	ands	r3, r1
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	619a      	str	r2, [r3, #24]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e12b      	b.n	80043f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff fac4 	bl	800373c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2224      	movs	r2, #36	; 0x24
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041ec:	f001 fb92 	bl	8005914 <HAL_RCC_GetPCLK1Freq>
 80041f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4a81      	ldr	r2, [pc, #516]	; (80043fc <HAL_I2C_Init+0x274>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d807      	bhi.n	800420c <HAL_I2C_Init+0x84>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a80      	ldr	r2, [pc, #512]	; (8004400 <HAL_I2C_Init+0x278>)
 8004200:	4293      	cmp	r3, r2
 8004202:	bf94      	ite	ls
 8004204:	2301      	movls	r3, #1
 8004206:	2300      	movhi	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	e006      	b.n	800421a <HAL_I2C_Init+0x92>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a7d      	ldr	r2, [pc, #500]	; (8004404 <HAL_I2C_Init+0x27c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	bf94      	ite	ls
 8004214:	2301      	movls	r3, #1
 8004216:	2300      	movhi	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e0e7      	b.n	80043f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a78      	ldr	r2, [pc, #480]	; (8004408 <HAL_I2C_Init+0x280>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	0c9b      	lsrs	r3, r3, #18
 800422c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a6a      	ldr	r2, [pc, #424]	; (80043fc <HAL_I2C_Init+0x274>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d802      	bhi.n	800425c <HAL_I2C_Init+0xd4>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3301      	adds	r3, #1
 800425a:	e009      	b.n	8004270 <HAL_I2C_Init+0xe8>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	4a69      	ldr	r2, [pc, #420]	; (800440c <HAL_I2C_Init+0x284>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	099b      	lsrs	r3, r3, #6
 800426e:	3301      	adds	r3, #1
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	430b      	orrs	r3, r1
 8004276:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004282:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	495c      	ldr	r1, [pc, #368]	; (80043fc <HAL_I2C_Init+0x274>)
 800428c:	428b      	cmp	r3, r1
 800428e:	d819      	bhi.n	80042c4 <HAL_I2C_Init+0x13c>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1e59      	subs	r1, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	fbb1 f3f3 	udiv	r3, r1, r3
 800429e:	1c59      	adds	r1, r3, #1
 80042a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042a4:	400b      	ands	r3, r1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_I2C_Init+0x138>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e59      	subs	r1, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042be:	e051      	b.n	8004364 <HAL_I2C_Init+0x1dc>
 80042c0:	2304      	movs	r3, #4
 80042c2:	e04f      	b.n	8004364 <HAL_I2C_Init+0x1dc>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d111      	bne.n	80042f0 <HAL_I2C_Init+0x168>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1e58      	subs	r0, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	440b      	add	r3, r1
 80042da:	fbb0 f3f3 	udiv	r3, r0, r3
 80042de:	3301      	adds	r3, #1
 80042e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e012      	b.n	8004316 <HAL_I2C_Init+0x18e>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1e58      	subs	r0, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	0099      	lsls	r1, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	fbb0 f3f3 	udiv	r3, r0, r3
 8004306:	3301      	adds	r3, #1
 8004308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Init+0x196>
 800431a:	2301      	movs	r3, #1
 800431c:	e022      	b.n	8004364 <HAL_I2C_Init+0x1dc>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10e      	bne.n	8004344 <HAL_I2C_Init+0x1bc>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1e58      	subs	r0, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	440b      	add	r3, r1
 8004334:	fbb0 f3f3 	udiv	r3, r0, r3
 8004338:	3301      	adds	r3, #1
 800433a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004342:	e00f      	b.n	8004364 <HAL_I2C_Init+0x1dc>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e58      	subs	r0, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	0099      	lsls	r1, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	fbb0 f3f3 	udiv	r3, r0, r3
 800435a:	3301      	adds	r3, #1
 800435c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	6809      	ldr	r1, [r1, #0]
 8004368:	4313      	orrs	r3, r2
 800436a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6911      	ldr	r1, [r2, #16]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68d2      	ldr	r2, [r2, #12]
 800439e:	4311      	orrs	r1, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	000186a0 	.word	0x000186a0
 8004400:	001e847f 	.word	0x001e847f
 8004404:	003d08ff 	.word	0x003d08ff
 8004408:	431bde83 	.word	0x431bde83
 800440c:	10624dd3 	.word	0x10624dd3

08004410 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	461a      	mov	r2, r3
 800441c:	460b      	mov	r3, r1
 800441e:	817b      	strh	r3, [r7, #10]
 8004420:	4613      	mov	r3, r2
 8004422:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004424:	f7ff fbe2 	bl	8003bec <HAL_GetTick>
 8004428:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b20      	cmp	r3, #32
 8004434:	f040 80e0 	bne.w	80045f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2319      	movs	r3, #25
 800443e:	2201      	movs	r2, #1
 8004440:	4970      	ldr	r1, [pc, #448]	; (8004604 <HAL_I2C_Master_Transmit+0x1f4>)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fc58 	bl	8004cf8 <I2C_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
 8004450:	e0d3      	b.n	80045fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_I2C_Master_Transmit+0x50>
 800445c:	2302      	movs	r3, #2
 800445e:	e0cc      	b.n	80045fa <HAL_I2C_Master_Transmit+0x1ea>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d007      	beq.n	8004486 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004494:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2221      	movs	r2, #33	; 0x21
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2210      	movs	r2, #16
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	893a      	ldrh	r2, [r7, #8]
 80044b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a50      	ldr	r2, [pc, #320]	; (8004608 <HAL_I2C_Master_Transmit+0x1f8>)
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044c8:	8979      	ldrh	r1, [r7, #10]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fac2 	bl	8004a58 <I2C_MasterRequestWrite>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e08d      	b.n	80045fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044f4:	e066      	b.n	80045c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	6a39      	ldr	r1, [r7, #32]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fcd2 	bl	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00d      	beq.n	8004522 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2b04      	cmp	r3, #4
 800450c:	d107      	bne.n	800451e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06b      	b.n	80045fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	781a      	ldrb	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	d11b      	bne.n	8004598 <HAL_I2C_Master_Transmit+0x188>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	d017      	beq.n	8004598 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	6a39      	ldr	r1, [r7, #32]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fcc2 	bl	8004f26 <I2C_WaitOnBTFFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d107      	bne.n	80045c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e01a      	b.n	80045fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d194      	bne.n	80044f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	00100002 	.word	0x00100002
 8004608:	ffff0000 	.word	0xffff0000

0800460c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08c      	sub	sp, #48	; 0x30
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	460b      	mov	r3, r1
 800461a:	817b      	strh	r3, [r7, #10]
 800461c:	4613      	mov	r3, r2
 800461e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7ff fae4 	bl	8003bec <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b20      	cmp	r3, #32
 8004630:	f040 820b 	bne.w	8004a4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2319      	movs	r3, #25
 800463a:	2201      	movs	r2, #1
 800463c:	497c      	ldr	r1, [pc, #496]	; (8004830 <HAL_I2C_Master_Receive+0x224>)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fb5a 	bl	8004cf8 <I2C_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800464a:	2302      	movs	r3, #2
 800464c:	e1fe      	b.n	8004a4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_I2C_Master_Receive+0x50>
 8004658:	2302      	movs	r3, #2
 800465a:	e1f7      	b.n	8004a4c <HAL_I2C_Master_Receive+0x440>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b01      	cmp	r3, #1
 8004670:	d007      	beq.n	8004682 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004690:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2222      	movs	r2, #34	; 0x22
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2210      	movs	r2, #16
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	893a      	ldrh	r2, [r7, #8]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a5c      	ldr	r2, [pc, #368]	; (8004834 <HAL_I2C_Master_Receive+0x228>)
 80046c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046c4:	8979      	ldrh	r1, [r7, #10]
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fa46 	bl	8004b5c <I2C_MasterRequestRead>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e1b8      	b.n	8004a4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d113      	bne.n	800470a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e2:	2300      	movs	r3, #0
 80046e4:	623b      	str	r3, [r7, #32]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	623b      	str	r3, [r7, #32]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e18c      	b.n	8004a24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470e:	2b01      	cmp	r3, #1
 8004710:	d11b      	bne.n	800474a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e16c      	b.n	8004a24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474e:	2b02      	cmp	r3, #2
 8004750:	d11b      	bne.n	800478a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004760:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	e14c      	b.n	8004a24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004798:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047b0:	e138      	b.n	8004a24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	f200 80f1 	bhi.w	800499e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d123      	bne.n	800480c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fbed 	bl	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e139      	b.n	8004a4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	855a      	strh	r2, [r3, #42]	; 0x2a
 800480a:	e10b      	b.n	8004a24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	2b02      	cmp	r3, #2
 8004812:	d14e      	bne.n	80048b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	2200      	movs	r2, #0
 800481c:	4906      	ldr	r1, [pc, #24]	; (8004838 <HAL_I2C_Master_Receive+0x22c>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fa6a 	bl	8004cf8 <I2C_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e10e      	b.n	8004a4c <HAL_I2C_Master_Receive+0x440>
 800482e:	bf00      	nop
 8004830:	00100002 	.word	0x00100002
 8004834:	ffff0000 	.word	0xffff0000
 8004838:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048b0:	e0b8      	b.n	8004a24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	2200      	movs	r2, #0
 80048ba:	4966      	ldr	r1, [pc, #408]	; (8004a54 <HAL_I2C_Master_Receive+0x448>)
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fa1b 	bl	8004cf8 <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0bf      	b.n	8004a4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	2200      	movs	r2, #0
 8004916:	494f      	ldr	r1, [pc, #316]	; (8004a54 <HAL_I2C_Master_Receive+0x448>)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f9ed 	bl	8004cf8 <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e091      	b.n	8004a4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800499c:	e042      	b.n	8004a24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fb00 	bl	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e04c      	b.n	8004a4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d118      	bne.n	8004a24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f47f aec2 	bne.w	80047b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e000      	b.n	8004a4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3728      	adds	r7, #40	; 0x28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	00010004 	.word	0x00010004

08004a58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	460b      	mov	r3, r1
 8004a66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d006      	beq.n	8004a82 <I2C_MasterRequestWrite+0x2a>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d003      	beq.n	8004a82 <I2C_MasterRequestWrite+0x2a>
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a80:	d108      	bne.n	8004a94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e00b      	b.n	8004aac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	2b12      	cmp	r3, #18
 8004a9a:	d107      	bne.n	8004aac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f91d 	bl	8004cf8 <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad2:	d103      	bne.n	8004adc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e035      	b.n	8004b4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae8:	d108      	bne.n	8004afc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004af8:	611a      	str	r2, [r3, #16]
 8004afa:	e01b      	b.n	8004b34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004afc:	897b      	ldrh	r3, [r7, #10]
 8004afe:	11db      	asrs	r3, r3, #7
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f003 0306 	and.w	r3, r3, #6
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f063 030f 	orn	r3, r3, #15
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	490e      	ldr	r1, [pc, #56]	; (8004b54 <I2C_MasterRequestWrite+0xfc>)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f943 	bl	8004da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e010      	b.n	8004b4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b2a:	897b      	ldrh	r3, [r7, #10]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4907      	ldr	r1, [pc, #28]	; (8004b58 <I2C_MasterRequestWrite+0x100>)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f933 	bl	8004da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	00010008 	.word	0x00010008
 8004b58:	00010002 	.word	0x00010002

08004b5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d006      	beq.n	8004b96 <I2C_MasterRequestRead+0x3a>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d003      	beq.n	8004b96 <I2C_MasterRequestRead+0x3a>
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b94:	d108      	bne.n	8004ba8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e00b      	b.n	8004bc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	2b11      	cmp	r3, #17
 8004bae:	d107      	bne.n	8004bc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 f893 	bl	8004cf8 <I2C_WaitOnFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00d      	beq.n	8004bf4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be6:	d103      	bne.n	8004bf0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e079      	b.n	8004ce8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bfc:	d108      	bne.n	8004c10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bfe:	897b      	ldrh	r3, [r7, #10]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	611a      	str	r2, [r3, #16]
 8004c0e:	e05f      	b.n	8004cd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c10:	897b      	ldrh	r3, [r7, #10]
 8004c12:	11db      	asrs	r3, r3, #7
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	f003 0306 	and.w	r3, r3, #6
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f063 030f 	orn	r3, r3, #15
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4930      	ldr	r1, [pc, #192]	; (8004cf0 <I2C_MasterRequestRead+0x194>)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f8b9 	bl	8004da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e054      	b.n	8004ce8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c3e:	897b      	ldrh	r3, [r7, #10]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4929      	ldr	r1, [pc, #164]	; (8004cf4 <I2C_MasterRequestRead+0x198>)
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f8a9 	bl	8004da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e044      	b.n	8004ce8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f831 	bl	8004cf8 <I2C_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00d      	beq.n	8004cb8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004caa:	d103      	bne.n	8004cb4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e017      	b.n	8004ce8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004cb8:	897b      	ldrh	r3, [r7, #10]
 8004cba:	11db      	asrs	r3, r3, #7
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0306 	and.w	r3, r3, #6
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f063 030e 	orn	r3, r3, #14
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4907      	ldr	r1, [pc, #28]	; (8004cf4 <I2C_MasterRequestRead+0x198>)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f865 	bl	8004da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	00010008 	.word	0x00010008
 8004cf4:	00010002 	.word	0x00010002

08004cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d08:	e025      	b.n	8004d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d021      	beq.n	8004d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d12:	f7fe ff6b 	bl	8003bec <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d302      	bcc.n	8004d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d116      	bne.n	8004d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f043 0220 	orr.w	r2, r3, #32
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e023      	b.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10d      	bne.n	8004d7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	43da      	mvns	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	e00c      	b.n	8004d96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf0c      	ite	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	2300      	movne	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d0b6      	beq.n	8004d0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
 8004db2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db4:	e051      	b.n	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc4:	d123      	bne.n	8004e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f043 0204 	orr.w	r2, r3, #4
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e046      	b.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d021      	beq.n	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e16:	f7fe fee9 	bl	8003bec <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d116      	bne.n	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e020      	b.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d10c      	bne.n	8004e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bf14      	ite	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	2300      	moveq	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	e00b      	b.n	8004e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	43da      	mvns	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bf14      	ite	ne
 8004e90:	2301      	movne	r3, #1
 8004e92:	2300      	moveq	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d18d      	bne.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb0:	e02d      	b.n	8004f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f8ce 	bl	8005054 <I2C_IsAcknowledgeFailed>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e02d      	b.n	8004f1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d021      	beq.n	8004f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eca:	f7fe fe8f 	bl	8003bec <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d116      	bne.n	8004f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f043 0220 	orr.w	r2, r3, #32
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e007      	b.n	8004f1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	d1ca      	bne.n	8004eb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f32:	e02d      	b.n	8004f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f88d 	bl	8005054 <I2C_IsAcknowledgeFailed>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e02d      	b.n	8004fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d021      	beq.n	8004f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4c:	f7fe fe4e 	bl	8003bec <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d116      	bne.n	8004f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e007      	b.n	8004fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d1ca      	bne.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fb4:	e042      	b.n	800503c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d119      	bne.n	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0210 	mvn.w	r2, #16
 8004fcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e029      	b.n	800504c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff8:	f7fe fdf8 	bl	8003bec <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	429a      	cmp	r2, r3
 8005006:	d302      	bcc.n	800500e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d116      	bne.n	800503c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	f043 0220 	orr.w	r2, r3, #32
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e007      	b.n	800504c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d1b5      	bne.n	8004fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506a:	d11b      	bne.n	80050a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005074:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	f043 0204 	orr.w	r2, r3, #4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e267      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d075      	beq.n	80051be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050d2:	4b88      	ldr	r3, [pc, #544]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 030c 	and.w	r3, r3, #12
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d00c      	beq.n	80050f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050de:	4b85      	ldr	r3, [pc, #532]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d112      	bne.n	8005110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ea:	4b82      	ldr	r3, [pc, #520]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f6:	d10b      	bne.n	8005110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	4b7e      	ldr	r3, [pc, #504]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d05b      	beq.n	80051bc <HAL_RCC_OscConfig+0x108>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d157      	bne.n	80051bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e242      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005118:	d106      	bne.n	8005128 <HAL_RCC_OscConfig+0x74>
 800511a:	4b76      	ldr	r3, [pc, #472]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a75      	ldr	r2, [pc, #468]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e01d      	b.n	8005164 <HAL_RCC_OscConfig+0xb0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x98>
 8005132:	4b70      	ldr	r3, [pc, #448]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a6f      	ldr	r2, [pc, #444]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	4b6d      	ldr	r3, [pc, #436]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a6c      	ldr	r2, [pc, #432]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0xb0>
 800514c:	4b69      	ldr	r3, [pc, #420]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a68      	ldr	r2, [pc, #416]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	4b66      	ldr	r3, [pc, #408]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a65      	ldr	r2, [pc, #404]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 800515e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d013      	beq.n	8005194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fe fd3e 	bl	8003bec <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005174:	f7fe fd3a 	bl	8003bec <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e207      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005186:	4b5b      	ldr	r3, [pc, #364]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0xc0>
 8005192:	e014      	b.n	80051be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005194:	f7fe fd2a 	bl	8003bec <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800519c:	f7fe fd26 	bl	8003bec <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b64      	cmp	r3, #100	; 0x64
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e1f3      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ae:	4b51      	ldr	r3, [pc, #324]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0xe8>
 80051ba:	e000      	b.n	80051be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d063      	beq.n	8005292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ca:	4b4a      	ldr	r3, [pc, #296]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 030c 	and.w	r3, r3, #12
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00b      	beq.n	80051ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051d6:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d11c      	bne.n	800521c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051e2:	4b44      	ldr	r3, [pc, #272]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d116      	bne.n	800521c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ee:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_RCC_OscConfig+0x152>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d001      	beq.n	8005206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e1c7      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005206:	4b3b      	ldr	r3, [pc, #236]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4937      	ldr	r1, [pc, #220]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005216:	4313      	orrs	r3, r2
 8005218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521a:	e03a      	b.n	8005292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d020      	beq.n	8005266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005224:	4b34      	ldr	r3, [pc, #208]	; (80052f8 <HAL_RCC_OscConfig+0x244>)
 8005226:	2201      	movs	r2, #1
 8005228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fe fcdf 	bl	8003bec <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005232:	f7fe fcdb 	bl	8003bec <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e1a8      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005244:	4b2b      	ldr	r3, [pc, #172]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005250:	4b28      	ldr	r3, [pc, #160]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	4925      	ldr	r1, [pc, #148]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005260:	4313      	orrs	r3, r2
 8005262:	600b      	str	r3, [r1, #0]
 8005264:	e015      	b.n	8005292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <HAL_RCC_OscConfig+0x244>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fe fcbe 	bl	8003bec <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005274:	f7fe fcba 	bl	8003bec <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e187      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005286:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d036      	beq.n	800530c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d016      	beq.n	80052d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <HAL_RCC_OscConfig+0x248>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fe fc9e 	bl	8003bec <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b4:	f7fe fc9a 	bl	8003bec <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e167      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCC_OscConfig+0x240>)
 80052c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0x200>
 80052d2:	e01b      	b.n	800530c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_RCC_OscConfig+0x248>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052da:	f7fe fc87 	bl	8003bec <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e0:	e00e      	b.n	8005300 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e2:	f7fe fc83 	bl	8003bec <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d907      	bls.n	8005300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e150      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
 80052f4:	40023800 	.word	0x40023800
 80052f8:	42470000 	.word	0x42470000
 80052fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005300:	4b88      	ldr	r3, [pc, #544]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1ea      	bne.n	80052e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8097 	beq.w	8005448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531a:	2300      	movs	r3, #0
 800531c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531e:	4b81      	ldr	r3, [pc, #516]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10f      	bne.n	800534a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	4b7d      	ldr	r3, [pc, #500]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	4a7c      	ldr	r2, [pc, #496]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005338:	6413      	str	r3, [r2, #64]	; 0x40
 800533a:	4b7a      	ldr	r3, [pc, #488]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005342:	60bb      	str	r3, [r7, #8]
 8005344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534a:	4b77      	ldr	r3, [pc, #476]	; (8005528 <HAL_RCC_OscConfig+0x474>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d118      	bne.n	8005388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005356:	4b74      	ldr	r3, [pc, #464]	; (8005528 <HAL_RCC_OscConfig+0x474>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a73      	ldr	r2, [pc, #460]	; (8005528 <HAL_RCC_OscConfig+0x474>)
 800535c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005362:	f7fe fc43 	bl	8003bec <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536a:	f7fe fc3f 	bl	8003bec <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e10c      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537c:	4b6a      	ldr	r3, [pc, #424]	; (8005528 <HAL_RCC_OscConfig+0x474>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d106      	bne.n	800539e <HAL_RCC_OscConfig+0x2ea>
 8005390:	4b64      	ldr	r3, [pc, #400]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a63      	ldr	r2, [pc, #396]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
 800539c:	e01c      	b.n	80053d8 <HAL_RCC_OscConfig+0x324>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x30c>
 80053a6:	4b5f      	ldr	r3, [pc, #380]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	4a5e      	ldr	r2, [pc, #376]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80053ac:	f043 0304 	orr.w	r3, r3, #4
 80053b0:	6713      	str	r3, [r2, #112]	; 0x70
 80053b2:	4b5c      	ldr	r3, [pc, #368]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	4a5b      	ldr	r2, [pc, #364]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	6713      	str	r3, [r2, #112]	; 0x70
 80053be:	e00b      	b.n	80053d8 <HAL_RCC_OscConfig+0x324>
 80053c0:	4b58      	ldr	r3, [pc, #352]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	4a57      	ldr	r2, [pc, #348]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80053c6:	f023 0301 	bic.w	r3, r3, #1
 80053ca:	6713      	str	r3, [r2, #112]	; 0x70
 80053cc:	4b55      	ldr	r3, [pc, #340]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	4a54      	ldr	r2, [pc, #336]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80053d2:	f023 0304 	bic.w	r3, r3, #4
 80053d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d015      	beq.n	800540c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fe fc04 	bl	8003bec <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e8:	f7fe fc00 	bl	8003bec <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e0cb      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fe:	4b49      	ldr	r3, [pc, #292]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0ee      	beq.n	80053e8 <HAL_RCC_OscConfig+0x334>
 800540a:	e014      	b.n	8005436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800540c:	f7fe fbee 	bl	8003bec <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005412:	e00a      	b.n	800542a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005414:	f7fe fbea 	bl	8003bec <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e0b5      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542a:	4b3e      	ldr	r3, [pc, #248]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1ee      	bne.n	8005414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d105      	bne.n	8005448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800543c:	4b39      	ldr	r3, [pc, #228]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	4a38      	ldr	r2, [pc, #224]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005446:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80a1 	beq.w	8005594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005452:	4b34      	ldr	r3, [pc, #208]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 030c 	and.w	r3, r3, #12
 800545a:	2b08      	cmp	r3, #8
 800545c:	d05c      	beq.n	8005518 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d141      	bne.n	80054ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005466:	4b31      	ldr	r3, [pc, #196]	; (800552c <HAL_RCC_OscConfig+0x478>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546c:	f7fe fbbe 	bl	8003bec <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005474:	f7fe fbba 	bl	8003bec <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e087      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005486:	4b27      	ldr	r3, [pc, #156]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69da      	ldr	r2, [r3, #28]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	019b      	lsls	r3, r3, #6
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	3b01      	subs	r3, #1
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	061b      	lsls	r3, r3, #24
 80054b6:	491b      	ldr	r1, [pc, #108]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <HAL_RCC_OscConfig+0x478>)
 80054be:	2201      	movs	r2, #1
 80054c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7fe fb93 	bl	8003bec <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ca:	f7fe fb8f 	bl	8003bec <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e05c      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x416>
 80054e8:	e054      	b.n	8005594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ea:	4b10      	ldr	r3, [pc, #64]	; (800552c <HAL_RCC_OscConfig+0x478>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f0:	f7fe fb7c 	bl	8003bec <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f8:	f7fe fb78 	bl	8003bec <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e045      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550a:	4b06      	ldr	r3, [pc, #24]	; (8005524 <HAL_RCC_OscConfig+0x470>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x444>
 8005516:	e03d      	b.n	8005594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d107      	bne.n	8005530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e038      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
 8005524:	40023800 	.word	0x40023800
 8005528:	40007000 	.word	0x40007000
 800552c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005530:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <HAL_RCC_OscConfig+0x4ec>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d028      	beq.n	8005590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005548:	429a      	cmp	r2, r3
 800554a:	d121      	bne.n	8005590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005556:	429a      	cmp	r2, r3
 8005558:	d11a      	bne.n	8005590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005560:	4013      	ands	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005568:	4293      	cmp	r3, r2
 800556a:	d111      	bne.n	8005590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	3b01      	subs	r3, #1
 800557a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800557c:	429a      	cmp	r2, r3
 800557e:	d107      	bne.n	8005590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800

080055a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0cc      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055b8:	4b68      	ldr	r3, [pc, #416]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d90c      	bls.n	80055e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b65      	ldr	r3, [pc, #404]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ce:	4b63      	ldr	r3, [pc, #396]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d001      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0b8      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055f8:	4b59      	ldr	r3, [pc, #356]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4a58      	ldr	r2, [pc, #352]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005610:	4b53      	ldr	r3, [pc, #332]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a52      	ldr	r2, [pc, #328]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800561a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800561c:	4b50      	ldr	r3, [pc, #320]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	494d      	ldr	r1, [pc, #308]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d044      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d107      	bne.n	8005652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005642:	4b47      	ldr	r3, [pc, #284]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d119      	bne.n	8005682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e07f      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d003      	beq.n	8005662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800565e:	2b03      	cmp	r3, #3
 8005660:	d107      	bne.n	8005672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005662:	4b3f      	ldr	r3, [pc, #252]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e06f      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005672:	4b3b      	ldr	r3, [pc, #236]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e067      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005682:	4b37      	ldr	r3, [pc, #220]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f023 0203 	bic.w	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	4934      	ldr	r1, [pc, #208]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	4313      	orrs	r3, r2
 8005692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005694:	f7fe faaa 	bl	8003bec <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569a:	e00a      	b.n	80056b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569c:	f7fe faa6 	bl	8003bec <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e04f      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	4b2b      	ldr	r3, [pc, #172]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 020c 	and.w	r2, r3, #12
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d1eb      	bne.n	800569c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c4:	4b25      	ldr	r3, [pc, #148]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d20c      	bcs.n	80056ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	4b22      	ldr	r3, [pc, #136]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	4b20      	ldr	r3, [pc, #128]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d001      	beq.n	80056ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e032      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4916      	ldr	r1, [pc, #88]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	4313      	orrs	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	490e      	ldr	r1, [pc, #56]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	4313      	orrs	r3, r2
 8005728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800572a:	f000 f821 	bl	8005770 <HAL_RCC_GetSysClockFreq>
 800572e:	4602      	mov	r2, r0
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	490a      	ldr	r1, [pc, #40]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 800573c:	5ccb      	ldrb	r3, [r1, r3]
 800573e:	fa22 f303 	lsr.w	r3, r2, r3
 8005742:	4a09      	ldr	r2, [pc, #36]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fa0a 	bl	8003b64 <HAL_InitTick>

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40023c00 	.word	0x40023c00
 8005760:	40023800 	.word	0x40023800
 8005764:	0800b32c 	.word	0x0800b32c
 8005768:	20000000 	.word	0x20000000
 800576c:	20000004 	.word	0x20000004

08005770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005774:	b090      	sub	sp, #64	; 0x40
 8005776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
 800577c:	2300      	movs	r3, #0
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005780:	2300      	movs	r3, #0
 8005782:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005788:	4b59      	ldr	r3, [pc, #356]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 030c 	and.w	r3, r3, #12
 8005790:	2b08      	cmp	r3, #8
 8005792:	d00d      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005794:	2b08      	cmp	r3, #8
 8005796:	f200 80a1 	bhi.w	80058dc <HAL_RCC_GetSysClockFreq+0x16c>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_RCC_GetSysClockFreq+0x34>
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d003      	beq.n	80057aa <HAL_RCC_GetSysClockFreq+0x3a>
 80057a2:	e09b      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057a4:	4b53      	ldr	r3, [pc, #332]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80057a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80057a8:	e09b      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057aa:	4b53      	ldr	r3, [pc, #332]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057ae:	e098      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057b0:	4b4f      	ldr	r3, [pc, #316]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ba:	4b4d      	ldr	r3, [pc, #308]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d028      	beq.n	8005818 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c6:	4b4a      	ldr	r3, [pc, #296]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	099b      	lsrs	r3, r3, #6
 80057cc:	2200      	movs	r2, #0
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	627a      	str	r2, [r7, #36]	; 0x24
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057d8:	2100      	movs	r1, #0
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80057dc:	fb03 f201 	mul.w	r2, r3, r1
 80057e0:	2300      	movs	r3, #0
 80057e2:	fb00 f303 	mul.w	r3, r0, r3
 80057e6:	4413      	add	r3, r2
 80057e8:	4a43      	ldr	r2, [pc, #268]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80057ea:	fba0 1202 	umull	r1, r2, r0, r2
 80057ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057f0:	460a      	mov	r2, r1
 80057f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80057f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f6:	4413      	add	r3, r2
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	2200      	movs	r2, #0
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	61fa      	str	r2, [r7, #28]
 8005802:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005806:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800580a:	f7fb fa45 	bl	8000c98 <__aeabi_uldivmod>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4613      	mov	r3, r2
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005816:	e053      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005818:	4b35      	ldr	r3, [pc, #212]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	099b      	lsrs	r3, r3, #6
 800581e:	2200      	movs	r2, #0
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	617a      	str	r2, [r7, #20]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800582a:	f04f 0b00 	mov.w	fp, #0
 800582e:	4652      	mov	r2, sl
 8005830:	465b      	mov	r3, fp
 8005832:	f04f 0000 	mov.w	r0, #0
 8005836:	f04f 0100 	mov.w	r1, #0
 800583a:	0159      	lsls	r1, r3, #5
 800583c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005840:	0150      	lsls	r0, r2, #5
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	ebb2 080a 	subs.w	r8, r2, sl
 800584a:	eb63 090b 	sbc.w	r9, r3, fp
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800585a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800585e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005862:	ebb2 0408 	subs.w	r4, r2, r8
 8005866:	eb63 0509 	sbc.w	r5, r3, r9
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	00eb      	lsls	r3, r5, #3
 8005874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005878:	00e2      	lsls	r2, r4, #3
 800587a:	4614      	mov	r4, r2
 800587c:	461d      	mov	r5, r3
 800587e:	eb14 030a 	adds.w	r3, r4, sl
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	eb45 030b 	adc.w	r3, r5, fp
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005896:	4629      	mov	r1, r5
 8005898:	028b      	lsls	r3, r1, #10
 800589a:	4621      	mov	r1, r4
 800589c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058a0:	4621      	mov	r1, r4
 80058a2:	028a      	lsls	r2, r1, #10
 80058a4:	4610      	mov	r0, r2
 80058a6:	4619      	mov	r1, r3
 80058a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058aa:	2200      	movs	r2, #0
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	60fa      	str	r2, [r7, #12]
 80058b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058b4:	f7fb f9f0 	bl	8000c98 <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4613      	mov	r3, r2
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	3301      	adds	r3, #1
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80058d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058da:	e002      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80058de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3740      	adds	r7, #64	; 0x40
 80058e8:	46bd      	mov	sp, r7
 80058ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ee:	bf00      	nop
 80058f0:	40023800 	.word	0x40023800
 80058f4:	00f42400 	.word	0x00f42400
 80058f8:	017d7840 	.word	0x017d7840

080058fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <HAL_RCC_GetHCLKFreq+0x14>)
 8005902:	681b      	ldr	r3, [r3, #0]
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000000 	.word	0x20000000

08005914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005918:	f7ff fff0 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	0a9b      	lsrs	r3, r3, #10
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	4903      	ldr	r1, [pc, #12]	; (8005938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800592a:	5ccb      	ldrb	r3, [r1, r3]
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005930:	4618      	mov	r0, r3
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40023800 	.word	0x40023800
 8005938:	0800b33c 	.word	0x0800b33c

0800593c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005940:	f7ff ffdc 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 8005944:	4602      	mov	r2, r0
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	0b5b      	lsrs	r3, r3, #13
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	4903      	ldr	r1, [pc, #12]	; (8005960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005952:	5ccb      	ldrb	r3, [r1, r3]
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40023800 	.word	0x40023800
 8005960:	0800b33c 	.word	0x0800b33c

08005964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e041      	b.n	80059fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fd ff1e 	bl	80037cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f000 f950 	bl	8005c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d001      	beq.n	8005a1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e03c      	b.n	8005a96 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <HAL_TIM_Base_Start+0xa0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d018      	beq.n	8005a60 <HAL_TIM_Base_Start+0x5c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a36:	d013      	beq.n	8005a60 <HAL_TIM_Base_Start+0x5c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1a      	ldr	r2, [pc, #104]	; (8005aa8 <HAL_TIM_Base_Start+0xa4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00e      	beq.n	8005a60 <HAL_TIM_Base_Start+0x5c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a19      	ldr	r2, [pc, #100]	; (8005aac <HAL_TIM_Base_Start+0xa8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d009      	beq.n	8005a60 <HAL_TIM_Base_Start+0x5c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <HAL_TIM_Base_Start+0xac>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <HAL_TIM_Base_Start+0x5c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a16      	ldr	r2, [pc, #88]	; (8005ab4 <HAL_TIM_Base_Start+0xb0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d111      	bne.n	8005a84 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d010      	beq.n	8005a94 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0201 	orr.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	e007      	b.n	8005a94 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00
 8005ab4:	40014000 	.word	0x40014000

08005ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e0b4      	b.n	8005c3e <HAL_TIM_ConfigClockSource+0x186>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005afa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0c:	d03e      	beq.n	8005b8c <HAL_TIM_ConfigClockSource+0xd4>
 8005b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b12:	f200 8087 	bhi.w	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1a:	f000 8086 	beq.w	8005c2a <HAL_TIM_ConfigClockSource+0x172>
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	d87f      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b24:	2b70      	cmp	r3, #112	; 0x70
 8005b26:	d01a      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0xa6>
 8005b28:	2b70      	cmp	r3, #112	; 0x70
 8005b2a:	d87b      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b2c:	2b60      	cmp	r3, #96	; 0x60
 8005b2e:	d050      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x11a>
 8005b30:	2b60      	cmp	r3, #96	; 0x60
 8005b32:	d877      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b34:	2b50      	cmp	r3, #80	; 0x50
 8005b36:	d03c      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0xfa>
 8005b38:	2b50      	cmp	r3, #80	; 0x50
 8005b3a:	d873      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d058      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x13a>
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d86f      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d064      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x15a>
 8005b48:	2b30      	cmp	r3, #48	; 0x30
 8005b4a:	d86b      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d060      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x15a>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d867      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d05c      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x15a>
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d05a      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	e062      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6899      	ldr	r1, [r3, #8]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f000 f965 	bl	8005e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	609a      	str	r2, [r3, #8]
      break;
 8005b8a:	e04f      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	6899      	ldr	r1, [r3, #8]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f000 f94e 	bl	8005e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bae:	609a      	str	r2, [r3, #8]
      break;
 8005bb0:	e03c      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f000 f8c2 	bl	8005d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2150      	movs	r1, #80	; 0x50
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f91b 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005bd0:	e02c      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f000 f8e1 	bl	8005da6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2160      	movs	r1, #96	; 0x60
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f90b 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e01c      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6859      	ldr	r1, [r3, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f000 f8a2 	bl	8005d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2140      	movs	r1, #64	; 0x40
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 f8fb 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005c10:	e00c      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f000 f8f2 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005c22:	e003      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
      break;
 8005c28:	e000      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a34      	ldr	r2, [pc, #208]	; (8005d2c <TIM_Base_SetConfig+0xe4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00f      	beq.n	8005c80 <TIM_Base_SetConfig+0x38>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x38>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a31      	ldr	r2, [pc, #196]	; (8005d30 <TIM_Base_SetConfig+0xe8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x38>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a30      	ldr	r2, [pc, #192]	; (8005d34 <TIM_Base_SetConfig+0xec>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x38>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a2f      	ldr	r2, [pc, #188]	; (8005d38 <TIM_Base_SetConfig+0xf0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a25      	ldr	r2, [pc, #148]	; (8005d2c <TIM_Base_SetConfig+0xe4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01b      	beq.n	8005cd2 <TIM_Base_SetConfig+0x8a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d017      	beq.n	8005cd2 <TIM_Base_SetConfig+0x8a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <TIM_Base_SetConfig+0xe8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <TIM_Base_SetConfig+0x8a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <TIM_Base_SetConfig+0xec>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00f      	beq.n	8005cd2 <TIM_Base_SetConfig+0x8a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <TIM_Base_SetConfig+0xf0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00b      	beq.n	8005cd2 <TIM_Base_SetConfig+0x8a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <TIM_Base_SetConfig+0xf4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <TIM_Base_SetConfig+0x8a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <TIM_Base_SetConfig+0xf8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_Base_SetConfig+0x8a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <TIM_Base_SetConfig+0xfc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d108      	bne.n	8005ce4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <TIM_Base_SetConfig+0xe4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d103      	bne.n	8005d18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	615a      	str	r2, [r3, #20]
}
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800

08005d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f023 0201 	bic.w	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f023 030a 	bic.w	r3, r3, #10
 8005d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	621a      	str	r2, [r3, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b087      	sub	sp, #28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f023 0210 	bic.w	r2, r3, #16
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	031b      	lsls	r3, r3, #12
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f043 0307 	orr.w	r3, r3, #7
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	609a      	str	r2, [r3, #8]
}
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e050      	b.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d013      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d10c      	bne.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40000400 	.word	0x40000400
 8005f4c:	40000800 	.word	0x40000800
 8005f50:	40000c00 	.word	0x40000c00
 8005f54:	40014000 	.word	0x40014000

08005f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e03f      	b.n	8005fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fd fc5a 	bl	8003838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2224      	movs	r2, #36	; 0x24
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f929 	bl	80061f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b08a      	sub	sp, #40	; 0x28
 8005ff6:	af02      	add	r7, sp, #8
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b20      	cmp	r3, #32
 8006010:	d17c      	bne.n	800610c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_UART_Transmit+0x2c>
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e075      	b.n	800610e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_UART_Transmit+0x3e>
 800602c:	2302      	movs	r3, #2
 800602e:	e06e      	b.n	800610e <HAL_UART_Transmit+0x11c>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2221      	movs	r2, #33	; 0x21
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006046:	f7fd fdd1 	bl	8003bec <HAL_GetTick>
 800604a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006060:	d108      	bne.n	8006074 <HAL_UART_Transmit+0x82>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d104      	bne.n	8006074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	e003      	b.n	800607c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006078:	2300      	movs	r3, #0
 800607a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006084:	e02a      	b.n	80060dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2200      	movs	r2, #0
 800608e:	2180      	movs	r1, #128	; 0x80
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f840 	bl	8006116 <UART_WaitOnFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e036      	b.n	800610e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	3302      	adds	r3, #2
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	e007      	b.n	80060ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	781a      	ldrb	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	3301      	adds	r3, #1
 80060cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1cf      	bne.n	8006086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	2140      	movs	r1, #64	; 0x40
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f810 	bl	8006116 <UART_WaitOnFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e006      	b.n	800610e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e000      	b.n	800610e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b090      	sub	sp, #64	; 0x40
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	4613      	mov	r3, r2
 8006124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006126:	e050      	b.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d04c      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0x30>
 8006136:	f7fd fd59 	bl	8003bec <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006142:	429a      	cmp	r2, r3
 8006144:	d241      	bcs.n	80061ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800615c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	330c      	adds	r3, #12
 8006164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006166:	637a      	str	r2, [r7, #52]	; 0x34
 8006168:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800616c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e5      	bne.n	8006146 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	613b      	str	r3, [r7, #16]
   return(result);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	63bb      	str	r3, [r7, #56]	; 0x38
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3314      	adds	r3, #20
 8006198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619a:	623a      	str	r2, [r7, #32]
 800619c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	69f9      	ldr	r1, [r7, #28]
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e5      	bne.n	800617a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e00f      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	bf0c      	ite	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	2300      	movne	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d09f      	beq.n	8006128 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3740      	adds	r7, #64	; 0x40
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f8:	b0c0      	sub	sp, #256	; 0x100
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006210:	68d9      	ldr	r1, [r3, #12]
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	ea40 0301 	orr.w	r3, r0, r1
 800621c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	431a      	orrs	r2, r3
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800624c:	f021 010c 	bic.w	r1, r1, #12
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800625a:	430b      	orrs	r3, r1
 800625c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626e:	6999      	ldr	r1, [r3, #24]
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	ea40 0301 	orr.w	r3, r0, r1
 800627a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b8f      	ldr	r3, [pc, #572]	; (80064c0 <UART_SetConfig+0x2cc>)
 8006284:	429a      	cmp	r2, r3
 8006286:	d005      	beq.n	8006294 <UART_SetConfig+0xa0>
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b8d      	ldr	r3, [pc, #564]	; (80064c4 <UART_SetConfig+0x2d0>)
 8006290:	429a      	cmp	r2, r3
 8006292:	d104      	bne.n	800629e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006294:	f7ff fb52 	bl	800593c <HAL_RCC_GetPCLK2Freq>
 8006298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800629c:	e003      	b.n	80062a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800629e:	f7ff fb39 	bl	8005914 <HAL_RCC_GetPCLK1Freq>
 80062a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b0:	f040 810c 	bne.w	80064cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062c6:	4622      	mov	r2, r4
 80062c8:	462b      	mov	r3, r5
 80062ca:	1891      	adds	r1, r2, r2
 80062cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80062ce:	415b      	adcs	r3, r3
 80062d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062d6:	4621      	mov	r1, r4
 80062d8:	eb12 0801 	adds.w	r8, r2, r1
 80062dc:	4629      	mov	r1, r5
 80062de:	eb43 0901 	adc.w	r9, r3, r1
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062f6:	4690      	mov	r8, r2
 80062f8:	4699      	mov	r9, r3
 80062fa:	4623      	mov	r3, r4
 80062fc:	eb18 0303 	adds.w	r3, r8, r3
 8006300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006304:	462b      	mov	r3, r5
 8006306:	eb49 0303 	adc.w	r3, r9, r3
 800630a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800631a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800631e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006322:	460b      	mov	r3, r1
 8006324:	18db      	adds	r3, r3, r3
 8006326:	653b      	str	r3, [r7, #80]	; 0x50
 8006328:	4613      	mov	r3, r2
 800632a:	eb42 0303 	adc.w	r3, r2, r3
 800632e:	657b      	str	r3, [r7, #84]	; 0x54
 8006330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006338:	f7fa fcae 	bl	8000c98 <__aeabi_uldivmod>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4b61      	ldr	r3, [pc, #388]	; (80064c8 <UART_SetConfig+0x2d4>)
 8006342:	fba3 2302 	umull	r2, r3, r3, r2
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	011c      	lsls	r4, r3, #4
 800634a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800634e:	2200      	movs	r2, #0
 8006350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800635c:	4642      	mov	r2, r8
 800635e:	464b      	mov	r3, r9
 8006360:	1891      	adds	r1, r2, r2
 8006362:	64b9      	str	r1, [r7, #72]	; 0x48
 8006364:	415b      	adcs	r3, r3
 8006366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800636c:	4641      	mov	r1, r8
 800636e:	eb12 0a01 	adds.w	sl, r2, r1
 8006372:	4649      	mov	r1, r9
 8006374:	eb43 0b01 	adc.w	fp, r3, r1
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800638c:	4692      	mov	sl, r2
 800638e:	469b      	mov	fp, r3
 8006390:	4643      	mov	r3, r8
 8006392:	eb1a 0303 	adds.w	r3, sl, r3
 8006396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800639a:	464b      	mov	r3, r9
 800639c:	eb4b 0303 	adc.w	r3, fp, r3
 80063a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063b8:	460b      	mov	r3, r1
 80063ba:	18db      	adds	r3, r3, r3
 80063bc:	643b      	str	r3, [r7, #64]	; 0x40
 80063be:	4613      	mov	r3, r2
 80063c0:	eb42 0303 	adc.w	r3, r2, r3
 80063c4:	647b      	str	r3, [r7, #68]	; 0x44
 80063c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063ce:	f7fa fc63 	bl	8000c98 <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	4b3b      	ldr	r3, [pc, #236]	; (80064c8 <UART_SetConfig+0x2d4>)
 80063da:	fba3 2301 	umull	r2, r3, r3, r1
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	2264      	movs	r2, #100	; 0x64
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
 80063e6:	1acb      	subs	r3, r1, r3
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063ee:	4b36      	ldr	r3, [pc, #216]	; (80064c8 <UART_SetConfig+0x2d4>)
 80063f0:	fba3 2302 	umull	r2, r3, r3, r2
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063fc:	441c      	add	r4, r3
 80063fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800640c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006410:	4642      	mov	r2, r8
 8006412:	464b      	mov	r3, r9
 8006414:	1891      	adds	r1, r2, r2
 8006416:	63b9      	str	r1, [r7, #56]	; 0x38
 8006418:	415b      	adcs	r3, r3
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800641c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006420:	4641      	mov	r1, r8
 8006422:	1851      	adds	r1, r2, r1
 8006424:	6339      	str	r1, [r7, #48]	; 0x30
 8006426:	4649      	mov	r1, r9
 8006428:	414b      	adcs	r3, r1
 800642a:	637b      	str	r3, [r7, #52]	; 0x34
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006438:	4659      	mov	r1, fp
 800643a:	00cb      	lsls	r3, r1, #3
 800643c:	4651      	mov	r1, sl
 800643e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006442:	4651      	mov	r1, sl
 8006444:	00ca      	lsls	r2, r1, #3
 8006446:	4610      	mov	r0, r2
 8006448:	4619      	mov	r1, r3
 800644a:	4603      	mov	r3, r0
 800644c:	4642      	mov	r2, r8
 800644e:	189b      	adds	r3, r3, r2
 8006450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006454:	464b      	mov	r3, r9
 8006456:	460a      	mov	r2, r1
 8006458:	eb42 0303 	adc.w	r3, r2, r3
 800645c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800646c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006474:	460b      	mov	r3, r1
 8006476:	18db      	adds	r3, r3, r3
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
 800647a:	4613      	mov	r3, r2
 800647c:	eb42 0303 	adc.w	r3, r2, r3
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800648a:	f7fa fc05 	bl	8000c98 <__aeabi_uldivmod>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <UART_SetConfig+0x2d4>)
 8006494:	fba3 1302 	umull	r1, r3, r3, r2
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	2164      	movs	r1, #100	; 0x64
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	3332      	adds	r3, #50	; 0x32
 80064a6:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <UART_SetConfig+0x2d4>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	f003 0207 	and.w	r2, r3, #7
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4422      	add	r2, r4
 80064ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064bc:	e105      	b.n	80066ca <UART_SetConfig+0x4d6>
 80064be:	bf00      	nop
 80064c0:	40011000 	.word	0x40011000
 80064c4:	40011400 	.word	0x40011400
 80064c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064de:	4642      	mov	r2, r8
 80064e0:	464b      	mov	r3, r9
 80064e2:	1891      	adds	r1, r2, r2
 80064e4:	6239      	str	r1, [r7, #32]
 80064e6:	415b      	adcs	r3, r3
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064ee:	4641      	mov	r1, r8
 80064f0:	1854      	adds	r4, r2, r1
 80064f2:	4649      	mov	r1, r9
 80064f4:	eb43 0501 	adc.w	r5, r3, r1
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	00eb      	lsls	r3, r5, #3
 8006502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006506:	00e2      	lsls	r2, r4, #3
 8006508:	4614      	mov	r4, r2
 800650a:	461d      	mov	r5, r3
 800650c:	4643      	mov	r3, r8
 800650e:	18e3      	adds	r3, r4, r3
 8006510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006514:	464b      	mov	r3, r9
 8006516:	eb45 0303 	adc.w	r3, r5, r3
 800651a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800652a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800653a:	4629      	mov	r1, r5
 800653c:	008b      	lsls	r3, r1, #2
 800653e:	4621      	mov	r1, r4
 8006540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006544:	4621      	mov	r1, r4
 8006546:	008a      	lsls	r2, r1, #2
 8006548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800654c:	f7fa fba4 	bl	8000c98 <__aeabi_uldivmod>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4b60      	ldr	r3, [pc, #384]	; (80066d8 <UART_SetConfig+0x4e4>)
 8006556:	fba3 2302 	umull	r2, r3, r3, r2
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	011c      	lsls	r4, r3, #4
 800655e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800656c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006570:	4642      	mov	r2, r8
 8006572:	464b      	mov	r3, r9
 8006574:	1891      	adds	r1, r2, r2
 8006576:	61b9      	str	r1, [r7, #24]
 8006578:	415b      	adcs	r3, r3
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006580:	4641      	mov	r1, r8
 8006582:	1851      	adds	r1, r2, r1
 8006584:	6139      	str	r1, [r7, #16]
 8006586:	4649      	mov	r1, r9
 8006588:	414b      	adcs	r3, r1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006598:	4659      	mov	r1, fp
 800659a:	00cb      	lsls	r3, r1, #3
 800659c:	4651      	mov	r1, sl
 800659e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a2:	4651      	mov	r1, sl
 80065a4:	00ca      	lsls	r2, r1, #3
 80065a6:	4610      	mov	r0, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	4603      	mov	r3, r0
 80065ac:	4642      	mov	r2, r8
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065b4:	464b      	mov	r3, r9
 80065b6:	460a      	mov	r2, r1
 80065b8:	eb42 0303 	adc.w	r3, r2, r3
 80065bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80065ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065d8:	4649      	mov	r1, r9
 80065da:	008b      	lsls	r3, r1, #2
 80065dc:	4641      	mov	r1, r8
 80065de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065e2:	4641      	mov	r1, r8
 80065e4:	008a      	lsls	r2, r1, #2
 80065e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065ea:	f7fa fb55 	bl	8000c98 <__aeabi_uldivmod>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4b39      	ldr	r3, [pc, #228]	; (80066d8 <UART_SetConfig+0x4e4>)
 80065f4:	fba3 1302 	umull	r1, r3, r3, r2
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	2164      	movs	r1, #100	; 0x64
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	3332      	adds	r3, #50	; 0x32
 8006606:	4a34      	ldr	r2, [pc, #208]	; (80066d8 <UART_SetConfig+0x4e4>)
 8006608:	fba2 2303 	umull	r2, r3, r2, r3
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006612:	441c      	add	r4, r3
 8006614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006618:	2200      	movs	r2, #0
 800661a:	673b      	str	r3, [r7, #112]	; 0x70
 800661c:	677a      	str	r2, [r7, #116]	; 0x74
 800661e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006622:	4642      	mov	r2, r8
 8006624:	464b      	mov	r3, r9
 8006626:	1891      	adds	r1, r2, r2
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	415b      	adcs	r3, r3
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006632:	4641      	mov	r1, r8
 8006634:	1851      	adds	r1, r2, r1
 8006636:	6039      	str	r1, [r7, #0]
 8006638:	4649      	mov	r1, r9
 800663a:	414b      	adcs	r3, r1
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800664a:	4659      	mov	r1, fp
 800664c:	00cb      	lsls	r3, r1, #3
 800664e:	4651      	mov	r1, sl
 8006650:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006654:	4651      	mov	r1, sl
 8006656:	00ca      	lsls	r2, r1, #3
 8006658:	4610      	mov	r0, r2
 800665a:	4619      	mov	r1, r3
 800665c:	4603      	mov	r3, r0
 800665e:	4642      	mov	r2, r8
 8006660:	189b      	adds	r3, r3, r2
 8006662:	66bb      	str	r3, [r7, #104]	; 0x68
 8006664:	464b      	mov	r3, r9
 8006666:	460a      	mov	r2, r1
 8006668:	eb42 0303 	adc.w	r3, r2, r3
 800666c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	663b      	str	r3, [r7, #96]	; 0x60
 8006678:	667a      	str	r2, [r7, #100]	; 0x64
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006686:	4649      	mov	r1, r9
 8006688:	008b      	lsls	r3, r1, #2
 800668a:	4641      	mov	r1, r8
 800668c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006690:	4641      	mov	r1, r8
 8006692:	008a      	lsls	r2, r1, #2
 8006694:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006698:	f7fa fafe 	bl	8000c98 <__aeabi_uldivmod>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <UART_SetConfig+0x4e4>)
 80066a2:	fba3 1302 	umull	r1, r3, r3, r2
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	2164      	movs	r1, #100	; 0x64
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	3332      	adds	r3, #50	; 0x32
 80066b4:	4a08      	ldr	r2, [pc, #32]	; (80066d8 <UART_SetConfig+0x4e4>)
 80066b6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	f003 020f 	and.w	r2, r3, #15
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4422      	add	r2, r4
 80066c8:	609a      	str	r2, [r3, #8]
}
 80066ca:	bf00      	nop
 80066cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066d0:	46bd      	mov	sp, r7
 80066d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066d6:	bf00      	nop
 80066d8:	51eb851f 	.word	0x51eb851f

080066dc <__errno>:
 80066dc:	4b01      	ldr	r3, [pc, #4]	; (80066e4 <__errno+0x8>)
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	2000000c 	.word	0x2000000c

080066e8 <__libc_init_array>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	4d0d      	ldr	r5, [pc, #52]	; (8006720 <__libc_init_array+0x38>)
 80066ec:	4c0d      	ldr	r4, [pc, #52]	; (8006724 <__libc_init_array+0x3c>)
 80066ee:	1b64      	subs	r4, r4, r5
 80066f0:	10a4      	asrs	r4, r4, #2
 80066f2:	2600      	movs	r6, #0
 80066f4:	42a6      	cmp	r6, r4
 80066f6:	d109      	bne.n	800670c <__libc_init_array+0x24>
 80066f8:	4d0b      	ldr	r5, [pc, #44]	; (8006728 <__libc_init_array+0x40>)
 80066fa:	4c0c      	ldr	r4, [pc, #48]	; (800672c <__libc_init_array+0x44>)
 80066fc:	f004 fc90 	bl	800b020 <_init>
 8006700:	1b64      	subs	r4, r4, r5
 8006702:	10a4      	asrs	r4, r4, #2
 8006704:	2600      	movs	r6, #0
 8006706:	42a6      	cmp	r6, r4
 8006708:	d105      	bne.n	8006716 <__libc_init_array+0x2e>
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006710:	4798      	blx	r3
 8006712:	3601      	adds	r6, #1
 8006714:	e7ee      	b.n	80066f4 <__libc_init_array+0xc>
 8006716:	f855 3b04 	ldr.w	r3, [r5], #4
 800671a:	4798      	blx	r3
 800671c:	3601      	adds	r6, #1
 800671e:	e7f2      	b.n	8006706 <__libc_init_array+0x1e>
 8006720:	0800b7f4 	.word	0x0800b7f4
 8006724:	0800b7f4 	.word	0x0800b7f4
 8006728:	0800b7f4 	.word	0x0800b7f4
 800672c:	0800b7f8 	.word	0x0800b7f8

08006730 <memcpy>:
 8006730:	440a      	add	r2, r1
 8006732:	4291      	cmp	r1, r2
 8006734:	f100 33ff 	add.w	r3, r0, #4294967295
 8006738:	d100      	bne.n	800673c <memcpy+0xc>
 800673a:	4770      	bx	lr
 800673c:	b510      	push	{r4, lr}
 800673e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006746:	4291      	cmp	r1, r2
 8006748:	d1f9      	bne.n	800673e <memcpy+0xe>
 800674a:	bd10      	pop	{r4, pc}

0800674c <memset>:
 800674c:	4402      	add	r2, r0
 800674e:	4603      	mov	r3, r0
 8006750:	4293      	cmp	r3, r2
 8006752:	d100      	bne.n	8006756 <memset+0xa>
 8006754:	4770      	bx	lr
 8006756:	f803 1b01 	strb.w	r1, [r3], #1
 800675a:	e7f9      	b.n	8006750 <memset+0x4>

0800675c <__cvt>:
 800675c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	ec55 4b10 	vmov	r4, r5, d0
 8006764:	2d00      	cmp	r5, #0
 8006766:	460e      	mov	r6, r1
 8006768:	4619      	mov	r1, r3
 800676a:	462b      	mov	r3, r5
 800676c:	bfbb      	ittet	lt
 800676e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006772:	461d      	movlt	r5, r3
 8006774:	2300      	movge	r3, #0
 8006776:	232d      	movlt	r3, #45	; 0x2d
 8006778:	700b      	strb	r3, [r1, #0]
 800677a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800677c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006780:	4691      	mov	r9, r2
 8006782:	f023 0820 	bic.w	r8, r3, #32
 8006786:	bfbc      	itt	lt
 8006788:	4622      	movlt	r2, r4
 800678a:	4614      	movlt	r4, r2
 800678c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006790:	d005      	beq.n	800679e <__cvt+0x42>
 8006792:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006796:	d100      	bne.n	800679a <__cvt+0x3e>
 8006798:	3601      	adds	r6, #1
 800679a:	2102      	movs	r1, #2
 800679c:	e000      	b.n	80067a0 <__cvt+0x44>
 800679e:	2103      	movs	r1, #3
 80067a0:	ab03      	add	r3, sp, #12
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	ab02      	add	r3, sp, #8
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	ec45 4b10 	vmov	d0, r4, r5
 80067ac:	4653      	mov	r3, sl
 80067ae:	4632      	mov	r2, r6
 80067b0:	f001 fdae 	bl	8008310 <_dtoa_r>
 80067b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067b8:	4607      	mov	r7, r0
 80067ba:	d102      	bne.n	80067c2 <__cvt+0x66>
 80067bc:	f019 0f01 	tst.w	r9, #1
 80067c0:	d022      	beq.n	8006808 <__cvt+0xac>
 80067c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067c6:	eb07 0906 	add.w	r9, r7, r6
 80067ca:	d110      	bne.n	80067ee <__cvt+0x92>
 80067cc:	783b      	ldrb	r3, [r7, #0]
 80067ce:	2b30      	cmp	r3, #48	; 0x30
 80067d0:	d10a      	bne.n	80067e8 <__cvt+0x8c>
 80067d2:	2200      	movs	r2, #0
 80067d4:	2300      	movs	r3, #0
 80067d6:	4620      	mov	r0, r4
 80067d8:	4629      	mov	r1, r5
 80067da:	f7fa f97d 	bl	8000ad8 <__aeabi_dcmpeq>
 80067de:	b918      	cbnz	r0, 80067e8 <__cvt+0x8c>
 80067e0:	f1c6 0601 	rsb	r6, r6, #1
 80067e4:	f8ca 6000 	str.w	r6, [sl]
 80067e8:	f8da 3000 	ldr.w	r3, [sl]
 80067ec:	4499      	add	r9, r3
 80067ee:	2200      	movs	r2, #0
 80067f0:	2300      	movs	r3, #0
 80067f2:	4620      	mov	r0, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7fa f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 80067fa:	b108      	cbz	r0, 8006800 <__cvt+0xa4>
 80067fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006800:	2230      	movs	r2, #48	; 0x30
 8006802:	9b03      	ldr	r3, [sp, #12]
 8006804:	454b      	cmp	r3, r9
 8006806:	d307      	bcc.n	8006818 <__cvt+0xbc>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800680c:	1bdb      	subs	r3, r3, r7
 800680e:	4638      	mov	r0, r7
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	b004      	add	sp, #16
 8006814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006818:	1c59      	adds	r1, r3, #1
 800681a:	9103      	str	r1, [sp, #12]
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	e7f0      	b.n	8006802 <__cvt+0xa6>

08006820 <__exponent>:
 8006820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006822:	4603      	mov	r3, r0
 8006824:	2900      	cmp	r1, #0
 8006826:	bfb8      	it	lt
 8006828:	4249      	neglt	r1, r1
 800682a:	f803 2b02 	strb.w	r2, [r3], #2
 800682e:	bfb4      	ite	lt
 8006830:	222d      	movlt	r2, #45	; 0x2d
 8006832:	222b      	movge	r2, #43	; 0x2b
 8006834:	2909      	cmp	r1, #9
 8006836:	7042      	strb	r2, [r0, #1]
 8006838:	dd2a      	ble.n	8006890 <__exponent+0x70>
 800683a:	f10d 0407 	add.w	r4, sp, #7
 800683e:	46a4      	mov	ip, r4
 8006840:	270a      	movs	r7, #10
 8006842:	46a6      	mov	lr, r4
 8006844:	460a      	mov	r2, r1
 8006846:	fb91 f6f7 	sdiv	r6, r1, r7
 800684a:	fb07 1516 	mls	r5, r7, r6, r1
 800684e:	3530      	adds	r5, #48	; 0x30
 8006850:	2a63      	cmp	r2, #99	; 0x63
 8006852:	f104 34ff 	add.w	r4, r4, #4294967295
 8006856:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800685a:	4631      	mov	r1, r6
 800685c:	dcf1      	bgt.n	8006842 <__exponent+0x22>
 800685e:	3130      	adds	r1, #48	; 0x30
 8006860:	f1ae 0502 	sub.w	r5, lr, #2
 8006864:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006868:	1c44      	adds	r4, r0, #1
 800686a:	4629      	mov	r1, r5
 800686c:	4561      	cmp	r1, ip
 800686e:	d30a      	bcc.n	8006886 <__exponent+0x66>
 8006870:	f10d 0209 	add.w	r2, sp, #9
 8006874:	eba2 020e 	sub.w	r2, r2, lr
 8006878:	4565      	cmp	r5, ip
 800687a:	bf88      	it	hi
 800687c:	2200      	movhi	r2, #0
 800687e:	4413      	add	r3, r2
 8006880:	1a18      	subs	r0, r3, r0
 8006882:	b003      	add	sp, #12
 8006884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800688a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800688e:	e7ed      	b.n	800686c <__exponent+0x4c>
 8006890:	2330      	movs	r3, #48	; 0x30
 8006892:	3130      	adds	r1, #48	; 0x30
 8006894:	7083      	strb	r3, [r0, #2]
 8006896:	70c1      	strb	r1, [r0, #3]
 8006898:	1d03      	adds	r3, r0, #4
 800689a:	e7f1      	b.n	8006880 <__exponent+0x60>

0800689c <_printf_float>:
 800689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	ed2d 8b02 	vpush	{d8}
 80068a4:	b08d      	sub	sp, #52	; 0x34
 80068a6:	460c      	mov	r4, r1
 80068a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068ac:	4616      	mov	r6, r2
 80068ae:	461f      	mov	r7, r3
 80068b0:	4605      	mov	r5, r0
 80068b2:	f002 fe8b 	bl	80095cc <_localeconv_r>
 80068b6:	f8d0 a000 	ldr.w	sl, [r0]
 80068ba:	4650      	mov	r0, sl
 80068bc:	f7f9 fc90 	bl	80001e0 <strlen>
 80068c0:	2300      	movs	r3, #0
 80068c2:	930a      	str	r3, [sp, #40]	; 0x28
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	9305      	str	r3, [sp, #20]
 80068c8:	f8d8 3000 	ldr.w	r3, [r8]
 80068cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068d0:	3307      	adds	r3, #7
 80068d2:	f023 0307 	bic.w	r3, r3, #7
 80068d6:	f103 0208 	add.w	r2, r3, #8
 80068da:	f8c8 2000 	str.w	r2, [r8]
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068ee:	9307      	str	r3, [sp, #28]
 80068f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80068f4:	ee08 0a10 	vmov	s16, r0
 80068f8:	4b9f      	ldr	r3, [pc, #636]	; (8006b78 <_printf_float+0x2dc>)
 80068fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006902:	f7fa f91b 	bl	8000b3c <__aeabi_dcmpun>
 8006906:	bb88      	cbnz	r0, 800696c <_printf_float+0xd0>
 8006908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800690c:	4b9a      	ldr	r3, [pc, #616]	; (8006b78 <_printf_float+0x2dc>)
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	f7fa f8f5 	bl	8000b00 <__aeabi_dcmple>
 8006916:	bb48      	cbnz	r0, 800696c <_printf_float+0xd0>
 8006918:	2200      	movs	r2, #0
 800691a:	2300      	movs	r3, #0
 800691c:	4640      	mov	r0, r8
 800691e:	4649      	mov	r1, r9
 8006920:	f7fa f8e4 	bl	8000aec <__aeabi_dcmplt>
 8006924:	b110      	cbz	r0, 800692c <_printf_float+0x90>
 8006926:	232d      	movs	r3, #45	; 0x2d
 8006928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800692c:	4b93      	ldr	r3, [pc, #588]	; (8006b7c <_printf_float+0x2e0>)
 800692e:	4894      	ldr	r0, [pc, #592]	; (8006b80 <_printf_float+0x2e4>)
 8006930:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006934:	bf94      	ite	ls
 8006936:	4698      	movls	r8, r3
 8006938:	4680      	movhi	r8, r0
 800693a:	2303      	movs	r3, #3
 800693c:	6123      	str	r3, [r4, #16]
 800693e:	9b05      	ldr	r3, [sp, #20]
 8006940:	f023 0204 	bic.w	r2, r3, #4
 8006944:	6022      	str	r2, [r4, #0]
 8006946:	f04f 0900 	mov.w	r9, #0
 800694a:	9700      	str	r7, [sp, #0]
 800694c:	4633      	mov	r3, r6
 800694e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f9d8 	bl	8006d08 <_printf_common>
 8006958:	3001      	adds	r0, #1
 800695a:	f040 8090 	bne.w	8006a7e <_printf_float+0x1e2>
 800695e:	f04f 30ff 	mov.w	r0, #4294967295
 8006962:	b00d      	add	sp, #52	; 0x34
 8006964:	ecbd 8b02 	vpop	{d8}
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	4640      	mov	r0, r8
 8006972:	4649      	mov	r1, r9
 8006974:	f7fa f8e2 	bl	8000b3c <__aeabi_dcmpun>
 8006978:	b140      	cbz	r0, 800698c <_printf_float+0xf0>
 800697a:	464b      	mov	r3, r9
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfbc      	itt	lt
 8006980:	232d      	movlt	r3, #45	; 0x2d
 8006982:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006986:	487f      	ldr	r0, [pc, #508]	; (8006b84 <_printf_float+0x2e8>)
 8006988:	4b7f      	ldr	r3, [pc, #508]	; (8006b88 <_printf_float+0x2ec>)
 800698a:	e7d1      	b.n	8006930 <_printf_float+0x94>
 800698c:	6863      	ldr	r3, [r4, #4]
 800698e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006992:	9206      	str	r2, [sp, #24]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	d13f      	bne.n	8006a18 <_printf_float+0x17c>
 8006998:	2306      	movs	r3, #6
 800699a:	6063      	str	r3, [r4, #4]
 800699c:	9b05      	ldr	r3, [sp, #20]
 800699e:	6861      	ldr	r1, [r4, #4]
 80069a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069a4:	2300      	movs	r3, #0
 80069a6:	9303      	str	r3, [sp, #12]
 80069a8:	ab0a      	add	r3, sp, #40	; 0x28
 80069aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069ae:	ab09      	add	r3, sp, #36	; 0x24
 80069b0:	ec49 8b10 	vmov	d0, r8, r9
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6022      	str	r2, [r4, #0]
 80069b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069bc:	4628      	mov	r0, r5
 80069be:	f7ff fecd 	bl	800675c <__cvt>
 80069c2:	9b06      	ldr	r3, [sp, #24]
 80069c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c6:	2b47      	cmp	r3, #71	; 0x47
 80069c8:	4680      	mov	r8, r0
 80069ca:	d108      	bne.n	80069de <_printf_float+0x142>
 80069cc:	1cc8      	adds	r0, r1, #3
 80069ce:	db02      	blt.n	80069d6 <_printf_float+0x13a>
 80069d0:	6863      	ldr	r3, [r4, #4]
 80069d2:	4299      	cmp	r1, r3
 80069d4:	dd41      	ble.n	8006a5a <_printf_float+0x1be>
 80069d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80069da:	fa5f fb8b 	uxtb.w	fp, fp
 80069de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069e2:	d820      	bhi.n	8006a26 <_printf_float+0x18a>
 80069e4:	3901      	subs	r1, #1
 80069e6:	465a      	mov	r2, fp
 80069e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069ec:	9109      	str	r1, [sp, #36]	; 0x24
 80069ee:	f7ff ff17 	bl	8006820 <__exponent>
 80069f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f4:	1813      	adds	r3, r2, r0
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	4681      	mov	r9, r0
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	dc02      	bgt.n	8006a04 <_printf_float+0x168>
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	07d2      	lsls	r2, r2, #31
 8006a02:	d501      	bpl.n	8006a08 <_printf_float+0x16c>
 8006a04:	3301      	adds	r3, #1
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d09c      	beq.n	800694a <_printf_float+0xae>
 8006a10:	232d      	movs	r3, #45	; 0x2d
 8006a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a16:	e798      	b.n	800694a <_printf_float+0xae>
 8006a18:	9a06      	ldr	r2, [sp, #24]
 8006a1a:	2a47      	cmp	r2, #71	; 0x47
 8006a1c:	d1be      	bne.n	800699c <_printf_float+0x100>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1bc      	bne.n	800699c <_printf_float+0x100>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e7b9      	b.n	800699a <_printf_float+0xfe>
 8006a26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a2a:	d118      	bne.n	8006a5e <_printf_float+0x1c2>
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	6863      	ldr	r3, [r4, #4]
 8006a30:	dd0b      	ble.n	8006a4a <_printf_float+0x1ae>
 8006a32:	6121      	str	r1, [r4, #16]
 8006a34:	b913      	cbnz	r3, 8006a3c <_printf_float+0x1a0>
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	07d0      	lsls	r0, r2, #31
 8006a3a:	d502      	bpl.n	8006a42 <_printf_float+0x1a6>
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	440b      	add	r3, r1
 8006a40:	6123      	str	r3, [r4, #16]
 8006a42:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a44:	f04f 0900 	mov.w	r9, #0
 8006a48:	e7de      	b.n	8006a08 <_printf_float+0x16c>
 8006a4a:	b913      	cbnz	r3, 8006a52 <_printf_float+0x1b6>
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	07d2      	lsls	r2, r2, #31
 8006a50:	d501      	bpl.n	8006a56 <_printf_float+0x1ba>
 8006a52:	3302      	adds	r3, #2
 8006a54:	e7f4      	b.n	8006a40 <_printf_float+0x1a4>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e7f2      	b.n	8006a40 <_printf_float+0x1a4>
 8006a5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a60:	4299      	cmp	r1, r3
 8006a62:	db05      	blt.n	8006a70 <_printf_float+0x1d4>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	6121      	str	r1, [r4, #16]
 8006a68:	07d8      	lsls	r0, r3, #31
 8006a6a:	d5ea      	bpl.n	8006a42 <_printf_float+0x1a6>
 8006a6c:	1c4b      	adds	r3, r1, #1
 8006a6e:	e7e7      	b.n	8006a40 <_printf_float+0x1a4>
 8006a70:	2900      	cmp	r1, #0
 8006a72:	bfd4      	ite	le
 8006a74:	f1c1 0202 	rsble	r2, r1, #2
 8006a78:	2201      	movgt	r2, #1
 8006a7a:	4413      	add	r3, r2
 8006a7c:	e7e0      	b.n	8006a40 <_printf_float+0x1a4>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	055a      	lsls	r2, r3, #21
 8006a82:	d407      	bmi.n	8006a94 <_printf_float+0x1f8>
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	4642      	mov	r2, r8
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d12c      	bne.n	8006aec <_printf_float+0x250>
 8006a92:	e764      	b.n	800695e <_printf_float+0xc2>
 8006a94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a98:	f240 80e0 	bls.w	8006c5c <_printf_float+0x3c0>
 8006a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f7fa f818 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d034      	beq.n	8006b16 <_printf_float+0x27a>
 8006aac:	4a37      	ldr	r2, [pc, #220]	; (8006b8c <_printf_float+0x2f0>)
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f af51 	beq.w	800695e <_printf_float+0xc2>
 8006abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	db02      	blt.n	8006aca <_printf_float+0x22e>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	07d8      	lsls	r0, r3, #31
 8006ac8:	d510      	bpl.n	8006aec <_printf_float+0x250>
 8006aca:	ee18 3a10 	vmov	r3, s16
 8006ace:	4652      	mov	r2, sl
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f af41 	beq.w	800695e <_printf_float+0xc2>
 8006adc:	f04f 0800 	mov.w	r8, #0
 8006ae0:	f104 091a 	add.w	r9, r4, #26
 8006ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	4543      	cmp	r3, r8
 8006aea:	dc09      	bgt.n	8006b00 <_printf_float+0x264>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	079b      	lsls	r3, r3, #30
 8006af0:	f100 8105 	bmi.w	8006cfe <_printf_float+0x462>
 8006af4:	68e0      	ldr	r0, [r4, #12]
 8006af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af8:	4298      	cmp	r0, r3
 8006afa:	bfb8      	it	lt
 8006afc:	4618      	movlt	r0, r3
 8006afe:	e730      	b.n	8006962 <_printf_float+0xc6>
 8006b00:	2301      	movs	r3, #1
 8006b02:	464a      	mov	r2, r9
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f af27 	beq.w	800695e <_printf_float+0xc2>
 8006b10:	f108 0801 	add.w	r8, r8, #1
 8006b14:	e7e6      	b.n	8006ae4 <_printf_float+0x248>
 8006b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dc39      	bgt.n	8006b90 <_printf_float+0x2f4>
 8006b1c:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <_printf_float+0x2f0>)
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f af19 	beq.w	800695e <_printf_float+0xc2>
 8006b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b30:	4313      	orrs	r3, r2
 8006b32:	d102      	bne.n	8006b3a <_printf_float+0x29e>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07d9      	lsls	r1, r3, #31
 8006b38:	d5d8      	bpl.n	8006aec <_printf_float+0x250>
 8006b3a:	ee18 3a10 	vmov	r3, s16
 8006b3e:	4652      	mov	r2, sl
 8006b40:	4631      	mov	r1, r6
 8006b42:	4628      	mov	r0, r5
 8006b44:	47b8      	blx	r7
 8006b46:	3001      	adds	r0, #1
 8006b48:	f43f af09 	beq.w	800695e <_printf_float+0xc2>
 8006b4c:	f04f 0900 	mov.w	r9, #0
 8006b50:	f104 0a1a 	add.w	sl, r4, #26
 8006b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b56:	425b      	negs	r3, r3
 8006b58:	454b      	cmp	r3, r9
 8006b5a:	dc01      	bgt.n	8006b60 <_printf_float+0x2c4>
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5e:	e792      	b.n	8006a86 <_printf_float+0x1ea>
 8006b60:	2301      	movs	r3, #1
 8006b62:	4652      	mov	r2, sl
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f aef7 	beq.w	800695e <_printf_float+0xc2>
 8006b70:	f109 0901 	add.w	r9, r9, #1
 8006b74:	e7ee      	b.n	8006b54 <_printf_float+0x2b8>
 8006b76:	bf00      	nop
 8006b78:	7fefffff 	.word	0x7fefffff
 8006b7c:	0800b348 	.word	0x0800b348
 8006b80:	0800b34c 	.word	0x0800b34c
 8006b84:	0800b354 	.word	0x0800b354
 8006b88:	0800b350 	.word	0x0800b350
 8006b8c:	0800b358 	.word	0x0800b358
 8006b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b94:	429a      	cmp	r2, r3
 8006b96:	bfa8      	it	ge
 8006b98:	461a      	movge	r2, r3
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	4691      	mov	r9, r2
 8006b9e:	dc37      	bgt.n	8006c10 <_printf_float+0x374>
 8006ba0:	f04f 0b00 	mov.w	fp, #0
 8006ba4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ba8:	f104 021a 	add.w	r2, r4, #26
 8006bac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bae:	9305      	str	r3, [sp, #20]
 8006bb0:	eba3 0309 	sub.w	r3, r3, r9
 8006bb4:	455b      	cmp	r3, fp
 8006bb6:	dc33      	bgt.n	8006c20 <_printf_float+0x384>
 8006bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	db3b      	blt.n	8006c38 <_printf_float+0x39c>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	07da      	lsls	r2, r3, #31
 8006bc4:	d438      	bmi.n	8006c38 <_printf_float+0x39c>
 8006bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc8:	9a05      	ldr	r2, [sp, #20]
 8006bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bcc:	1a9a      	subs	r2, r3, r2
 8006bce:	eba3 0901 	sub.w	r9, r3, r1
 8006bd2:	4591      	cmp	r9, r2
 8006bd4:	bfa8      	it	ge
 8006bd6:	4691      	movge	r9, r2
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	dc35      	bgt.n	8006c4a <_printf_float+0x3ae>
 8006bde:	f04f 0800 	mov.w	r8, #0
 8006be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006be6:	f104 0a1a 	add.w	sl, r4, #26
 8006bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bee:	1a9b      	subs	r3, r3, r2
 8006bf0:	eba3 0309 	sub.w	r3, r3, r9
 8006bf4:	4543      	cmp	r3, r8
 8006bf6:	f77f af79 	ble.w	8006aec <_printf_float+0x250>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	f43f aeaa 	beq.w	800695e <_printf_float+0xc2>
 8006c0a:	f108 0801 	add.w	r8, r8, #1
 8006c0e:	e7ec      	b.n	8006bea <_printf_float+0x34e>
 8006c10:	4613      	mov	r3, r2
 8006c12:	4631      	mov	r1, r6
 8006c14:	4642      	mov	r2, r8
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d1c0      	bne.n	8006ba0 <_printf_float+0x304>
 8006c1e:	e69e      	b.n	800695e <_printf_float+0xc2>
 8006c20:	2301      	movs	r3, #1
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	9205      	str	r2, [sp, #20]
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	f43f ae97 	beq.w	800695e <_printf_float+0xc2>
 8006c30:	9a05      	ldr	r2, [sp, #20]
 8006c32:	f10b 0b01 	add.w	fp, fp, #1
 8006c36:	e7b9      	b.n	8006bac <_printf_float+0x310>
 8006c38:	ee18 3a10 	vmov	r3, s16
 8006c3c:	4652      	mov	r2, sl
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4628      	mov	r0, r5
 8006c42:	47b8      	blx	r7
 8006c44:	3001      	adds	r0, #1
 8006c46:	d1be      	bne.n	8006bc6 <_printf_float+0x32a>
 8006c48:	e689      	b.n	800695e <_printf_float+0xc2>
 8006c4a:	9a05      	ldr	r2, [sp, #20]
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	4442      	add	r2, r8
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b8      	blx	r7
 8006c56:	3001      	adds	r0, #1
 8006c58:	d1c1      	bne.n	8006bde <_printf_float+0x342>
 8006c5a:	e680      	b.n	800695e <_printf_float+0xc2>
 8006c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c5e:	2a01      	cmp	r2, #1
 8006c60:	dc01      	bgt.n	8006c66 <_printf_float+0x3ca>
 8006c62:	07db      	lsls	r3, r3, #31
 8006c64:	d538      	bpl.n	8006cd8 <_printf_float+0x43c>
 8006c66:	2301      	movs	r3, #1
 8006c68:	4642      	mov	r2, r8
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	f43f ae74 	beq.w	800695e <_printf_float+0xc2>
 8006c76:	ee18 3a10 	vmov	r3, s16
 8006c7a:	4652      	mov	r2, sl
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b8      	blx	r7
 8006c82:	3001      	adds	r0, #1
 8006c84:	f43f ae6b 	beq.w	800695e <_printf_float+0xc2>
 8006c88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f7f9 ff22 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c94:	b9d8      	cbnz	r0, 8006cce <_printf_float+0x432>
 8006c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c98:	f108 0201 	add.w	r2, r8, #1
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b8      	blx	r7
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d10e      	bne.n	8006cc6 <_printf_float+0x42a>
 8006ca8:	e659      	b.n	800695e <_printf_float+0xc2>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4652      	mov	r2, sl
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f ae52 	beq.w	800695e <_printf_float+0xc2>
 8006cba:	f108 0801 	add.w	r8, r8, #1
 8006cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	4543      	cmp	r3, r8
 8006cc4:	dcf1      	bgt.n	8006caa <_printf_float+0x40e>
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ccc:	e6dc      	b.n	8006a88 <_printf_float+0x1ec>
 8006cce:	f04f 0800 	mov.w	r8, #0
 8006cd2:	f104 0a1a 	add.w	sl, r4, #26
 8006cd6:	e7f2      	b.n	8006cbe <_printf_float+0x422>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4642      	mov	r2, r8
 8006cdc:	e7df      	b.n	8006c9e <_printf_float+0x402>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	464a      	mov	r2, r9
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f ae38 	beq.w	800695e <_printf_float+0xc2>
 8006cee:	f108 0801 	add.w	r8, r8, #1
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cf6:	1a5b      	subs	r3, r3, r1
 8006cf8:	4543      	cmp	r3, r8
 8006cfa:	dcf0      	bgt.n	8006cde <_printf_float+0x442>
 8006cfc:	e6fa      	b.n	8006af4 <_printf_float+0x258>
 8006cfe:	f04f 0800 	mov.w	r8, #0
 8006d02:	f104 0919 	add.w	r9, r4, #25
 8006d06:	e7f4      	b.n	8006cf2 <_printf_float+0x456>

08006d08 <_printf_common>:
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	4616      	mov	r6, r2
 8006d0e:	4699      	mov	r9, r3
 8006d10:	688a      	ldr	r2, [r1, #8]
 8006d12:	690b      	ldr	r3, [r1, #16]
 8006d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	bfb8      	it	lt
 8006d1c:	4613      	movlt	r3, r2
 8006d1e:	6033      	str	r3, [r6, #0]
 8006d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d24:	4607      	mov	r7, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	b10a      	cbz	r2, 8006d2e <_printf_common+0x26>
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	6033      	str	r3, [r6, #0]
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	0699      	lsls	r1, r3, #26
 8006d32:	bf42      	ittt	mi
 8006d34:	6833      	ldrmi	r3, [r6, #0]
 8006d36:	3302      	addmi	r3, #2
 8006d38:	6033      	strmi	r3, [r6, #0]
 8006d3a:	6825      	ldr	r5, [r4, #0]
 8006d3c:	f015 0506 	ands.w	r5, r5, #6
 8006d40:	d106      	bne.n	8006d50 <_printf_common+0x48>
 8006d42:	f104 0a19 	add.w	sl, r4, #25
 8006d46:	68e3      	ldr	r3, [r4, #12]
 8006d48:	6832      	ldr	r2, [r6, #0]
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	42ab      	cmp	r3, r5
 8006d4e:	dc26      	bgt.n	8006d9e <_printf_common+0x96>
 8006d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d54:	1e13      	subs	r3, r2, #0
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	bf18      	it	ne
 8006d5a:	2301      	movne	r3, #1
 8006d5c:	0692      	lsls	r2, r2, #26
 8006d5e:	d42b      	bmi.n	8006db8 <_printf_common+0xb0>
 8006d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d64:	4649      	mov	r1, r9
 8006d66:	4638      	mov	r0, r7
 8006d68:	47c0      	blx	r8
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d01e      	beq.n	8006dac <_printf_common+0xa4>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	68e5      	ldr	r5, [r4, #12]
 8006d72:	6832      	ldr	r2, [r6, #0]
 8006d74:	f003 0306 	and.w	r3, r3, #6
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	bf08      	it	eq
 8006d7c:	1aad      	subeq	r5, r5, r2
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	6922      	ldr	r2, [r4, #16]
 8006d82:	bf0c      	ite	eq
 8006d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d88:	2500      	movne	r5, #0
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	bfc4      	itt	gt
 8006d8e:	1a9b      	subgt	r3, r3, r2
 8006d90:	18ed      	addgt	r5, r5, r3
 8006d92:	2600      	movs	r6, #0
 8006d94:	341a      	adds	r4, #26
 8006d96:	42b5      	cmp	r5, r6
 8006d98:	d11a      	bne.n	8006dd0 <_printf_common+0xc8>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	e008      	b.n	8006db0 <_printf_common+0xa8>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4652      	mov	r2, sl
 8006da2:	4649      	mov	r1, r9
 8006da4:	4638      	mov	r0, r7
 8006da6:	47c0      	blx	r8
 8006da8:	3001      	adds	r0, #1
 8006daa:	d103      	bne.n	8006db4 <_printf_common+0xac>
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db4:	3501      	adds	r5, #1
 8006db6:	e7c6      	b.n	8006d46 <_printf_common+0x3e>
 8006db8:	18e1      	adds	r1, r4, r3
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	2030      	movs	r0, #48	; 0x30
 8006dbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dc2:	4422      	add	r2, r4
 8006dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dcc:	3302      	adds	r3, #2
 8006dce:	e7c7      	b.n	8006d60 <_printf_common+0x58>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	47c0      	blx	r8
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d0e6      	beq.n	8006dac <_printf_common+0xa4>
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7d9      	b.n	8006d96 <_printf_common+0x8e>
	...

08006de4 <_printf_i>:
 8006de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	7e0f      	ldrb	r7, [r1, #24]
 8006dea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dec:	2f78      	cmp	r7, #120	; 0x78
 8006dee:	4691      	mov	r9, r2
 8006df0:	4680      	mov	r8, r0
 8006df2:	460c      	mov	r4, r1
 8006df4:	469a      	mov	sl, r3
 8006df6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dfa:	d807      	bhi.n	8006e0c <_printf_i+0x28>
 8006dfc:	2f62      	cmp	r7, #98	; 0x62
 8006dfe:	d80a      	bhi.n	8006e16 <_printf_i+0x32>
 8006e00:	2f00      	cmp	r7, #0
 8006e02:	f000 80d8 	beq.w	8006fb6 <_printf_i+0x1d2>
 8006e06:	2f58      	cmp	r7, #88	; 0x58
 8006e08:	f000 80a3 	beq.w	8006f52 <_printf_i+0x16e>
 8006e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e14:	e03a      	b.n	8006e8c <_printf_i+0xa8>
 8006e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e1a:	2b15      	cmp	r3, #21
 8006e1c:	d8f6      	bhi.n	8006e0c <_printf_i+0x28>
 8006e1e:	a101      	add	r1, pc, #4	; (adr r1, 8006e24 <_printf_i+0x40>)
 8006e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e24:	08006e7d 	.word	0x08006e7d
 8006e28:	08006e91 	.word	0x08006e91
 8006e2c:	08006e0d 	.word	0x08006e0d
 8006e30:	08006e0d 	.word	0x08006e0d
 8006e34:	08006e0d 	.word	0x08006e0d
 8006e38:	08006e0d 	.word	0x08006e0d
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006e0d 	.word	0x08006e0d
 8006e44:	08006e0d 	.word	0x08006e0d
 8006e48:	08006e0d 	.word	0x08006e0d
 8006e4c:	08006e0d 	.word	0x08006e0d
 8006e50:	08006f9d 	.word	0x08006f9d
 8006e54:	08006ec1 	.word	0x08006ec1
 8006e58:	08006f7f 	.word	0x08006f7f
 8006e5c:	08006e0d 	.word	0x08006e0d
 8006e60:	08006e0d 	.word	0x08006e0d
 8006e64:	08006fbf 	.word	0x08006fbf
 8006e68:	08006e0d 	.word	0x08006e0d
 8006e6c:	08006ec1 	.word	0x08006ec1
 8006e70:	08006e0d 	.word	0x08006e0d
 8006e74:	08006e0d 	.word	0x08006e0d
 8006e78:	08006f87 	.word	0x08006f87
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	1d1a      	adds	r2, r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	602a      	str	r2, [r5, #0]
 8006e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0a3      	b.n	8006fd8 <_printf_i+0x1f4>
 8006e90:	6820      	ldr	r0, [r4, #0]
 8006e92:	6829      	ldr	r1, [r5, #0]
 8006e94:	0606      	lsls	r6, r0, #24
 8006e96:	f101 0304 	add.w	r3, r1, #4
 8006e9a:	d50a      	bpl.n	8006eb2 <_printf_i+0xce>
 8006e9c:	680e      	ldr	r6, [r1, #0]
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	da03      	bge.n	8006eac <_printf_i+0xc8>
 8006ea4:	232d      	movs	r3, #45	; 0x2d
 8006ea6:	4276      	negs	r6, r6
 8006ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eac:	485e      	ldr	r0, [pc, #376]	; (8007028 <_printf_i+0x244>)
 8006eae:	230a      	movs	r3, #10
 8006eb0:	e019      	b.n	8006ee6 <_printf_i+0x102>
 8006eb2:	680e      	ldr	r6, [r1, #0]
 8006eb4:	602b      	str	r3, [r5, #0]
 8006eb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eba:	bf18      	it	ne
 8006ebc:	b236      	sxthne	r6, r6
 8006ebe:	e7ef      	b.n	8006ea0 <_printf_i+0xbc>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	1d19      	adds	r1, r3, #4
 8006ec6:	6029      	str	r1, [r5, #0]
 8006ec8:	0601      	lsls	r1, r0, #24
 8006eca:	d501      	bpl.n	8006ed0 <_printf_i+0xec>
 8006ecc:	681e      	ldr	r6, [r3, #0]
 8006ece:	e002      	b.n	8006ed6 <_printf_i+0xf2>
 8006ed0:	0646      	lsls	r6, r0, #25
 8006ed2:	d5fb      	bpl.n	8006ecc <_printf_i+0xe8>
 8006ed4:	881e      	ldrh	r6, [r3, #0]
 8006ed6:	4854      	ldr	r0, [pc, #336]	; (8007028 <_printf_i+0x244>)
 8006ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eda:	bf0c      	ite	eq
 8006edc:	2308      	moveq	r3, #8
 8006ede:	230a      	movne	r3, #10
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ee6:	6865      	ldr	r5, [r4, #4]
 8006ee8:	60a5      	str	r5, [r4, #8]
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	bfa2      	ittt	ge
 8006eee:	6821      	ldrge	r1, [r4, #0]
 8006ef0:	f021 0104 	bicge.w	r1, r1, #4
 8006ef4:	6021      	strge	r1, [r4, #0]
 8006ef6:	b90e      	cbnz	r6, 8006efc <_printf_i+0x118>
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	d04d      	beq.n	8006f98 <_printf_i+0x1b4>
 8006efc:	4615      	mov	r5, r2
 8006efe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f02:	fb03 6711 	mls	r7, r3, r1, r6
 8006f06:	5dc7      	ldrb	r7, [r0, r7]
 8006f08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	42bb      	cmp	r3, r7
 8006f10:	460e      	mov	r6, r1
 8006f12:	d9f4      	bls.n	8006efe <_printf_i+0x11a>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10b      	bne.n	8006f30 <_printf_i+0x14c>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07de      	lsls	r6, r3, #31
 8006f1c:	d508      	bpl.n	8006f30 <_printf_i+0x14c>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4299      	cmp	r1, r3
 8006f24:	bfde      	ittt	le
 8006f26:	2330      	movle	r3, #48	; 0x30
 8006f28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f30:	1b52      	subs	r2, r2, r5
 8006f32:	6122      	str	r2, [r4, #16]
 8006f34:	f8cd a000 	str.w	sl, [sp]
 8006f38:	464b      	mov	r3, r9
 8006f3a:	aa03      	add	r2, sp, #12
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff fee2 	bl	8006d08 <_printf_common>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d14c      	bne.n	8006fe2 <_printf_i+0x1fe>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b004      	add	sp, #16
 8006f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f52:	4835      	ldr	r0, [pc, #212]	; (8007028 <_printf_i+0x244>)
 8006f54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f58:	6829      	ldr	r1, [r5, #0]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f60:	6029      	str	r1, [r5, #0]
 8006f62:	061d      	lsls	r5, r3, #24
 8006f64:	d514      	bpl.n	8006f90 <_printf_i+0x1ac>
 8006f66:	07df      	lsls	r7, r3, #31
 8006f68:	bf44      	itt	mi
 8006f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f6e:	6023      	strmi	r3, [r4, #0]
 8006f70:	b91e      	cbnz	r6, 8006f7a <_printf_i+0x196>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	f023 0320 	bic.w	r3, r3, #32
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	e7b0      	b.n	8006ee0 <_printf_i+0xfc>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	f043 0320 	orr.w	r3, r3, #32
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	2378      	movs	r3, #120	; 0x78
 8006f88:	4828      	ldr	r0, [pc, #160]	; (800702c <_printf_i+0x248>)
 8006f8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f8e:	e7e3      	b.n	8006f58 <_printf_i+0x174>
 8006f90:	0659      	lsls	r1, r3, #25
 8006f92:	bf48      	it	mi
 8006f94:	b2b6      	uxthmi	r6, r6
 8006f96:	e7e6      	b.n	8006f66 <_printf_i+0x182>
 8006f98:	4615      	mov	r5, r2
 8006f9a:	e7bb      	b.n	8006f14 <_printf_i+0x130>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	6826      	ldr	r6, [r4, #0]
 8006fa0:	6961      	ldr	r1, [r4, #20]
 8006fa2:	1d18      	adds	r0, r3, #4
 8006fa4:	6028      	str	r0, [r5, #0]
 8006fa6:	0635      	lsls	r5, r6, #24
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	d501      	bpl.n	8006fb0 <_printf_i+0x1cc>
 8006fac:	6019      	str	r1, [r3, #0]
 8006fae:	e002      	b.n	8006fb6 <_printf_i+0x1d2>
 8006fb0:	0670      	lsls	r0, r6, #25
 8006fb2:	d5fb      	bpl.n	8006fac <_printf_i+0x1c8>
 8006fb4:	8019      	strh	r1, [r3, #0]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	4615      	mov	r5, r2
 8006fbc:	e7ba      	b.n	8006f34 <_printf_i+0x150>
 8006fbe:	682b      	ldr	r3, [r5, #0]
 8006fc0:	1d1a      	adds	r2, r3, #4
 8006fc2:	602a      	str	r2, [r5, #0]
 8006fc4:	681d      	ldr	r5, [r3, #0]
 8006fc6:	6862      	ldr	r2, [r4, #4]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f7f9 f910 	bl	80001f0 <memchr>
 8006fd0:	b108      	cbz	r0, 8006fd6 <_printf_i+0x1f2>
 8006fd2:	1b40      	subs	r0, r0, r5
 8006fd4:	6060      	str	r0, [r4, #4]
 8006fd6:	6863      	ldr	r3, [r4, #4]
 8006fd8:	6123      	str	r3, [r4, #16]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe0:	e7a8      	b.n	8006f34 <_printf_i+0x150>
 8006fe2:	6923      	ldr	r3, [r4, #16]
 8006fe4:	462a      	mov	r2, r5
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4640      	mov	r0, r8
 8006fea:	47d0      	blx	sl
 8006fec:	3001      	adds	r0, #1
 8006fee:	d0ab      	beq.n	8006f48 <_printf_i+0x164>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	079b      	lsls	r3, r3, #30
 8006ff4:	d413      	bmi.n	800701e <_printf_i+0x23a>
 8006ff6:	68e0      	ldr	r0, [r4, #12]
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	4298      	cmp	r0, r3
 8006ffc:	bfb8      	it	lt
 8006ffe:	4618      	movlt	r0, r3
 8007000:	e7a4      	b.n	8006f4c <_printf_i+0x168>
 8007002:	2301      	movs	r3, #1
 8007004:	4632      	mov	r2, r6
 8007006:	4649      	mov	r1, r9
 8007008:	4640      	mov	r0, r8
 800700a:	47d0      	blx	sl
 800700c:	3001      	adds	r0, #1
 800700e:	d09b      	beq.n	8006f48 <_printf_i+0x164>
 8007010:	3501      	adds	r5, #1
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	9903      	ldr	r1, [sp, #12]
 8007016:	1a5b      	subs	r3, r3, r1
 8007018:	42ab      	cmp	r3, r5
 800701a:	dcf2      	bgt.n	8007002 <_printf_i+0x21e>
 800701c:	e7eb      	b.n	8006ff6 <_printf_i+0x212>
 800701e:	2500      	movs	r5, #0
 8007020:	f104 0619 	add.w	r6, r4, #25
 8007024:	e7f5      	b.n	8007012 <_printf_i+0x22e>
 8007026:	bf00      	nop
 8007028:	0800b35a 	.word	0x0800b35a
 800702c:	0800b36b 	.word	0x0800b36b

08007030 <_scanf_float>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	b087      	sub	sp, #28
 8007036:	4617      	mov	r7, r2
 8007038:	9303      	str	r3, [sp, #12]
 800703a:	688b      	ldr	r3, [r1, #8]
 800703c:	1e5a      	subs	r2, r3, #1
 800703e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007042:	bf83      	ittte	hi
 8007044:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007048:	195b      	addhi	r3, r3, r5
 800704a:	9302      	strhi	r3, [sp, #8]
 800704c:	2300      	movls	r3, #0
 800704e:	bf86      	itte	hi
 8007050:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007054:	608b      	strhi	r3, [r1, #8]
 8007056:	9302      	strls	r3, [sp, #8]
 8007058:	680b      	ldr	r3, [r1, #0]
 800705a:	468b      	mov	fp, r1
 800705c:	2500      	movs	r5, #0
 800705e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007062:	f84b 3b1c 	str.w	r3, [fp], #28
 8007066:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800706a:	4680      	mov	r8, r0
 800706c:	460c      	mov	r4, r1
 800706e:	465e      	mov	r6, fp
 8007070:	46aa      	mov	sl, r5
 8007072:	46a9      	mov	r9, r5
 8007074:	9501      	str	r5, [sp, #4]
 8007076:	68a2      	ldr	r2, [r4, #8]
 8007078:	b152      	cbz	r2, 8007090 <_scanf_float+0x60>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b4e      	cmp	r3, #78	; 0x4e
 8007080:	d864      	bhi.n	800714c <_scanf_float+0x11c>
 8007082:	2b40      	cmp	r3, #64	; 0x40
 8007084:	d83c      	bhi.n	8007100 <_scanf_float+0xd0>
 8007086:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800708a:	b2c8      	uxtb	r0, r1
 800708c:	280e      	cmp	r0, #14
 800708e:	d93a      	bls.n	8007106 <_scanf_float+0xd6>
 8007090:	f1b9 0f00 	cmp.w	r9, #0
 8007094:	d003      	beq.n	800709e <_scanf_float+0x6e>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070a2:	f1ba 0f01 	cmp.w	sl, #1
 80070a6:	f200 8113 	bhi.w	80072d0 <_scanf_float+0x2a0>
 80070aa:	455e      	cmp	r6, fp
 80070ac:	f200 8105 	bhi.w	80072ba <_scanf_float+0x28a>
 80070b0:	2501      	movs	r5, #1
 80070b2:	4628      	mov	r0, r5
 80070b4:	b007      	add	sp, #28
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80070be:	2a0d      	cmp	r2, #13
 80070c0:	d8e6      	bhi.n	8007090 <_scanf_float+0x60>
 80070c2:	a101      	add	r1, pc, #4	; (adr r1, 80070c8 <_scanf_float+0x98>)
 80070c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070c8:	08007207 	.word	0x08007207
 80070cc:	08007091 	.word	0x08007091
 80070d0:	08007091 	.word	0x08007091
 80070d4:	08007091 	.word	0x08007091
 80070d8:	08007267 	.word	0x08007267
 80070dc:	0800723f 	.word	0x0800723f
 80070e0:	08007091 	.word	0x08007091
 80070e4:	08007091 	.word	0x08007091
 80070e8:	08007215 	.word	0x08007215
 80070ec:	08007091 	.word	0x08007091
 80070f0:	08007091 	.word	0x08007091
 80070f4:	08007091 	.word	0x08007091
 80070f8:	08007091 	.word	0x08007091
 80070fc:	080071cd 	.word	0x080071cd
 8007100:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007104:	e7db      	b.n	80070be <_scanf_float+0x8e>
 8007106:	290e      	cmp	r1, #14
 8007108:	d8c2      	bhi.n	8007090 <_scanf_float+0x60>
 800710a:	a001      	add	r0, pc, #4	; (adr r0, 8007110 <_scanf_float+0xe0>)
 800710c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007110:	080071bf 	.word	0x080071bf
 8007114:	08007091 	.word	0x08007091
 8007118:	080071bf 	.word	0x080071bf
 800711c:	08007253 	.word	0x08007253
 8007120:	08007091 	.word	0x08007091
 8007124:	0800716d 	.word	0x0800716d
 8007128:	080071a9 	.word	0x080071a9
 800712c:	080071a9 	.word	0x080071a9
 8007130:	080071a9 	.word	0x080071a9
 8007134:	080071a9 	.word	0x080071a9
 8007138:	080071a9 	.word	0x080071a9
 800713c:	080071a9 	.word	0x080071a9
 8007140:	080071a9 	.word	0x080071a9
 8007144:	080071a9 	.word	0x080071a9
 8007148:	080071a9 	.word	0x080071a9
 800714c:	2b6e      	cmp	r3, #110	; 0x6e
 800714e:	d809      	bhi.n	8007164 <_scanf_float+0x134>
 8007150:	2b60      	cmp	r3, #96	; 0x60
 8007152:	d8b2      	bhi.n	80070ba <_scanf_float+0x8a>
 8007154:	2b54      	cmp	r3, #84	; 0x54
 8007156:	d077      	beq.n	8007248 <_scanf_float+0x218>
 8007158:	2b59      	cmp	r3, #89	; 0x59
 800715a:	d199      	bne.n	8007090 <_scanf_float+0x60>
 800715c:	2d07      	cmp	r5, #7
 800715e:	d197      	bne.n	8007090 <_scanf_float+0x60>
 8007160:	2508      	movs	r5, #8
 8007162:	e029      	b.n	80071b8 <_scanf_float+0x188>
 8007164:	2b74      	cmp	r3, #116	; 0x74
 8007166:	d06f      	beq.n	8007248 <_scanf_float+0x218>
 8007168:	2b79      	cmp	r3, #121	; 0x79
 800716a:	e7f6      	b.n	800715a <_scanf_float+0x12a>
 800716c:	6821      	ldr	r1, [r4, #0]
 800716e:	05c8      	lsls	r0, r1, #23
 8007170:	d51a      	bpl.n	80071a8 <_scanf_float+0x178>
 8007172:	9b02      	ldr	r3, [sp, #8]
 8007174:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007178:	6021      	str	r1, [r4, #0]
 800717a:	f109 0901 	add.w	r9, r9, #1
 800717e:	b11b      	cbz	r3, 8007188 <_scanf_float+0x158>
 8007180:	3b01      	subs	r3, #1
 8007182:	3201      	adds	r2, #1
 8007184:	9302      	str	r3, [sp, #8]
 8007186:	60a2      	str	r2, [r4, #8]
 8007188:	68a3      	ldr	r3, [r4, #8]
 800718a:	3b01      	subs	r3, #1
 800718c:	60a3      	str	r3, [r4, #8]
 800718e:	6923      	ldr	r3, [r4, #16]
 8007190:	3301      	adds	r3, #1
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3b01      	subs	r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	607b      	str	r3, [r7, #4]
 800719c:	f340 8084 	ble.w	80072a8 <_scanf_float+0x278>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	e766      	b.n	8007076 <_scanf_float+0x46>
 80071a8:	eb1a 0f05 	cmn.w	sl, r5
 80071ac:	f47f af70 	bne.w	8007090 <_scanf_float+0x60>
 80071b0:	6822      	ldr	r2, [r4, #0]
 80071b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	f806 3b01 	strb.w	r3, [r6], #1
 80071bc:	e7e4      	b.n	8007188 <_scanf_float+0x158>
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	0610      	lsls	r0, r2, #24
 80071c2:	f57f af65 	bpl.w	8007090 <_scanf_float+0x60>
 80071c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071ca:	e7f4      	b.n	80071b6 <_scanf_float+0x186>
 80071cc:	f1ba 0f00 	cmp.w	sl, #0
 80071d0:	d10e      	bne.n	80071f0 <_scanf_float+0x1c0>
 80071d2:	f1b9 0f00 	cmp.w	r9, #0
 80071d6:	d10e      	bne.n	80071f6 <_scanf_float+0x1c6>
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071e2:	d108      	bne.n	80071f6 <_scanf_float+0x1c6>
 80071e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071e8:	6022      	str	r2, [r4, #0]
 80071ea:	f04f 0a01 	mov.w	sl, #1
 80071ee:	e7e3      	b.n	80071b8 <_scanf_float+0x188>
 80071f0:	f1ba 0f02 	cmp.w	sl, #2
 80071f4:	d055      	beq.n	80072a2 <_scanf_float+0x272>
 80071f6:	2d01      	cmp	r5, #1
 80071f8:	d002      	beq.n	8007200 <_scanf_float+0x1d0>
 80071fa:	2d04      	cmp	r5, #4
 80071fc:	f47f af48 	bne.w	8007090 <_scanf_float+0x60>
 8007200:	3501      	adds	r5, #1
 8007202:	b2ed      	uxtb	r5, r5
 8007204:	e7d8      	b.n	80071b8 <_scanf_float+0x188>
 8007206:	f1ba 0f01 	cmp.w	sl, #1
 800720a:	f47f af41 	bne.w	8007090 <_scanf_float+0x60>
 800720e:	f04f 0a02 	mov.w	sl, #2
 8007212:	e7d1      	b.n	80071b8 <_scanf_float+0x188>
 8007214:	b97d      	cbnz	r5, 8007236 <_scanf_float+0x206>
 8007216:	f1b9 0f00 	cmp.w	r9, #0
 800721a:	f47f af3c 	bne.w	8007096 <_scanf_float+0x66>
 800721e:	6822      	ldr	r2, [r4, #0]
 8007220:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007224:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007228:	f47f af39 	bne.w	800709e <_scanf_float+0x6e>
 800722c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007230:	6022      	str	r2, [r4, #0]
 8007232:	2501      	movs	r5, #1
 8007234:	e7c0      	b.n	80071b8 <_scanf_float+0x188>
 8007236:	2d03      	cmp	r5, #3
 8007238:	d0e2      	beq.n	8007200 <_scanf_float+0x1d0>
 800723a:	2d05      	cmp	r5, #5
 800723c:	e7de      	b.n	80071fc <_scanf_float+0x1cc>
 800723e:	2d02      	cmp	r5, #2
 8007240:	f47f af26 	bne.w	8007090 <_scanf_float+0x60>
 8007244:	2503      	movs	r5, #3
 8007246:	e7b7      	b.n	80071b8 <_scanf_float+0x188>
 8007248:	2d06      	cmp	r5, #6
 800724a:	f47f af21 	bne.w	8007090 <_scanf_float+0x60>
 800724e:	2507      	movs	r5, #7
 8007250:	e7b2      	b.n	80071b8 <_scanf_float+0x188>
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	0591      	lsls	r1, r2, #22
 8007256:	f57f af1b 	bpl.w	8007090 <_scanf_float+0x60>
 800725a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800725e:	6022      	str	r2, [r4, #0]
 8007260:	f8cd 9004 	str.w	r9, [sp, #4]
 8007264:	e7a8      	b.n	80071b8 <_scanf_float+0x188>
 8007266:	6822      	ldr	r2, [r4, #0]
 8007268:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800726c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007270:	d006      	beq.n	8007280 <_scanf_float+0x250>
 8007272:	0550      	lsls	r0, r2, #21
 8007274:	f57f af0c 	bpl.w	8007090 <_scanf_float+0x60>
 8007278:	f1b9 0f00 	cmp.w	r9, #0
 800727c:	f43f af0f 	beq.w	800709e <_scanf_float+0x6e>
 8007280:	0591      	lsls	r1, r2, #22
 8007282:	bf58      	it	pl
 8007284:	9901      	ldrpl	r1, [sp, #4]
 8007286:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800728a:	bf58      	it	pl
 800728c:	eba9 0101 	subpl.w	r1, r9, r1
 8007290:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007294:	bf58      	it	pl
 8007296:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800729a:	6022      	str	r2, [r4, #0]
 800729c:	f04f 0900 	mov.w	r9, #0
 80072a0:	e78a      	b.n	80071b8 <_scanf_float+0x188>
 80072a2:	f04f 0a03 	mov.w	sl, #3
 80072a6:	e787      	b.n	80071b8 <_scanf_float+0x188>
 80072a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80072ac:	4639      	mov	r1, r7
 80072ae:	4640      	mov	r0, r8
 80072b0:	4798      	blx	r3
 80072b2:	2800      	cmp	r0, #0
 80072b4:	f43f aedf 	beq.w	8007076 <_scanf_float+0x46>
 80072b8:	e6ea      	b.n	8007090 <_scanf_float+0x60>
 80072ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072c2:	463a      	mov	r2, r7
 80072c4:	4640      	mov	r0, r8
 80072c6:	4798      	blx	r3
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	6123      	str	r3, [r4, #16]
 80072ce:	e6ec      	b.n	80070aa <_scanf_float+0x7a>
 80072d0:	1e6b      	subs	r3, r5, #1
 80072d2:	2b06      	cmp	r3, #6
 80072d4:	d825      	bhi.n	8007322 <_scanf_float+0x2f2>
 80072d6:	2d02      	cmp	r5, #2
 80072d8:	d836      	bhi.n	8007348 <_scanf_float+0x318>
 80072da:	455e      	cmp	r6, fp
 80072dc:	f67f aee8 	bls.w	80070b0 <_scanf_float+0x80>
 80072e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072e8:	463a      	mov	r2, r7
 80072ea:	4640      	mov	r0, r8
 80072ec:	4798      	blx	r3
 80072ee:	6923      	ldr	r3, [r4, #16]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	e7f1      	b.n	80072da <_scanf_float+0x2aa>
 80072f6:	9802      	ldr	r0, [sp, #8]
 80072f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007300:	9002      	str	r0, [sp, #8]
 8007302:	463a      	mov	r2, r7
 8007304:	4640      	mov	r0, r8
 8007306:	4798      	blx	r3
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	3b01      	subs	r3, #1
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007312:	fa5f fa8a 	uxtb.w	sl, sl
 8007316:	f1ba 0f02 	cmp.w	sl, #2
 800731a:	d1ec      	bne.n	80072f6 <_scanf_float+0x2c6>
 800731c:	3d03      	subs	r5, #3
 800731e:	b2ed      	uxtb	r5, r5
 8007320:	1b76      	subs	r6, r6, r5
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	05da      	lsls	r2, r3, #23
 8007326:	d52f      	bpl.n	8007388 <_scanf_float+0x358>
 8007328:	055b      	lsls	r3, r3, #21
 800732a:	d510      	bpl.n	800734e <_scanf_float+0x31e>
 800732c:	455e      	cmp	r6, fp
 800732e:	f67f aebf 	bls.w	80070b0 <_scanf_float+0x80>
 8007332:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007336:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800733a:	463a      	mov	r2, r7
 800733c:	4640      	mov	r0, r8
 800733e:	4798      	blx	r3
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	3b01      	subs	r3, #1
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	e7f1      	b.n	800732c <_scanf_float+0x2fc>
 8007348:	46aa      	mov	sl, r5
 800734a:	9602      	str	r6, [sp, #8]
 800734c:	e7df      	b.n	800730e <_scanf_float+0x2de>
 800734e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007352:	6923      	ldr	r3, [r4, #16]
 8007354:	2965      	cmp	r1, #101	; 0x65
 8007356:	f103 33ff 	add.w	r3, r3, #4294967295
 800735a:	f106 35ff 	add.w	r5, r6, #4294967295
 800735e:	6123      	str	r3, [r4, #16]
 8007360:	d00c      	beq.n	800737c <_scanf_float+0x34c>
 8007362:	2945      	cmp	r1, #69	; 0x45
 8007364:	d00a      	beq.n	800737c <_scanf_float+0x34c>
 8007366:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800736a:	463a      	mov	r2, r7
 800736c:	4640      	mov	r0, r8
 800736e:	4798      	blx	r3
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007376:	3b01      	subs	r3, #1
 8007378:	1eb5      	subs	r5, r6, #2
 800737a:	6123      	str	r3, [r4, #16]
 800737c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007380:	463a      	mov	r2, r7
 8007382:	4640      	mov	r0, r8
 8007384:	4798      	blx	r3
 8007386:	462e      	mov	r6, r5
 8007388:	6825      	ldr	r5, [r4, #0]
 800738a:	f015 0510 	ands.w	r5, r5, #16
 800738e:	d159      	bne.n	8007444 <_scanf_float+0x414>
 8007390:	7035      	strb	r5, [r6, #0]
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800739c:	d11b      	bne.n	80073d6 <_scanf_float+0x3a6>
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	454b      	cmp	r3, r9
 80073a2:	eba3 0209 	sub.w	r2, r3, r9
 80073a6:	d123      	bne.n	80073f0 <_scanf_float+0x3c0>
 80073a8:	2200      	movs	r2, #0
 80073aa:	4659      	mov	r1, fp
 80073ac:	4640      	mov	r0, r8
 80073ae:	f000 fe99 	bl	80080e4 <_strtod_r>
 80073b2:	6822      	ldr	r2, [r4, #0]
 80073b4:	9b03      	ldr	r3, [sp, #12]
 80073b6:	f012 0f02 	tst.w	r2, #2
 80073ba:	ec57 6b10 	vmov	r6, r7, d0
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	d021      	beq.n	8007406 <_scanf_float+0x3d6>
 80073c2:	9903      	ldr	r1, [sp, #12]
 80073c4:	1d1a      	adds	r2, r3, #4
 80073c6:	600a      	str	r2, [r1, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	e9c3 6700 	strd	r6, r7, [r3]
 80073ce:	68e3      	ldr	r3, [r4, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	60e3      	str	r3, [r4, #12]
 80073d4:	e66d      	b.n	80070b2 <_scanf_float+0x82>
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0e5      	beq.n	80073a8 <_scanf_float+0x378>
 80073dc:	9905      	ldr	r1, [sp, #20]
 80073de:	230a      	movs	r3, #10
 80073e0:	462a      	mov	r2, r5
 80073e2:	3101      	adds	r1, #1
 80073e4:	4640      	mov	r0, r8
 80073e6:	f000 ff05 	bl	80081f4 <_strtol_r>
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	9e05      	ldr	r6, [sp, #20]
 80073ee:	1ac2      	subs	r2, r0, r3
 80073f0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073f4:	429e      	cmp	r6, r3
 80073f6:	bf28      	it	cs
 80073f8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073fc:	4912      	ldr	r1, [pc, #72]	; (8007448 <_scanf_float+0x418>)
 80073fe:	4630      	mov	r0, r6
 8007400:	f000 f82c 	bl	800745c <siprintf>
 8007404:	e7d0      	b.n	80073a8 <_scanf_float+0x378>
 8007406:	9903      	ldr	r1, [sp, #12]
 8007408:	f012 0f04 	tst.w	r2, #4
 800740c:	f103 0204 	add.w	r2, r3, #4
 8007410:	600a      	str	r2, [r1, #0]
 8007412:	d1d9      	bne.n	80073c8 <_scanf_float+0x398>
 8007414:	f8d3 8000 	ldr.w	r8, [r3]
 8007418:	ee10 2a10 	vmov	r2, s0
 800741c:	ee10 0a10 	vmov	r0, s0
 8007420:	463b      	mov	r3, r7
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fb8a 	bl	8000b3c <__aeabi_dcmpun>
 8007428:	b128      	cbz	r0, 8007436 <_scanf_float+0x406>
 800742a:	4808      	ldr	r0, [pc, #32]	; (800744c <_scanf_float+0x41c>)
 800742c:	f000 f810 	bl	8007450 <nanf>
 8007430:	ed88 0a00 	vstr	s0, [r8]
 8007434:	e7cb      	b.n	80073ce <_scanf_float+0x39e>
 8007436:	4630      	mov	r0, r6
 8007438:	4639      	mov	r1, r7
 800743a:	f7f9 fbdd 	bl	8000bf8 <__aeabi_d2f>
 800743e:	f8c8 0000 	str.w	r0, [r8]
 8007442:	e7c4      	b.n	80073ce <_scanf_float+0x39e>
 8007444:	2500      	movs	r5, #0
 8007446:	e634      	b.n	80070b2 <_scanf_float+0x82>
 8007448:	0800b37c 	.word	0x0800b37c
 800744c:	0800b788 	.word	0x0800b788

08007450 <nanf>:
 8007450:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007458 <nanf+0x8>
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	7fc00000 	.word	0x7fc00000

0800745c <siprintf>:
 800745c:	b40e      	push	{r1, r2, r3}
 800745e:	b500      	push	{lr}
 8007460:	b09c      	sub	sp, #112	; 0x70
 8007462:	ab1d      	add	r3, sp, #116	; 0x74
 8007464:	9002      	str	r0, [sp, #8]
 8007466:	9006      	str	r0, [sp, #24]
 8007468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800746c:	4809      	ldr	r0, [pc, #36]	; (8007494 <siprintf+0x38>)
 800746e:	9107      	str	r1, [sp, #28]
 8007470:	9104      	str	r1, [sp, #16]
 8007472:	4909      	ldr	r1, [pc, #36]	; (8007498 <siprintf+0x3c>)
 8007474:	f853 2b04 	ldr.w	r2, [r3], #4
 8007478:	9105      	str	r1, [sp, #20]
 800747a:	6800      	ldr	r0, [r0, #0]
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	a902      	add	r1, sp, #8
 8007480:	f002 fed6 	bl	800a230 <_svfiprintf_r>
 8007484:	9b02      	ldr	r3, [sp, #8]
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	b01c      	add	sp, #112	; 0x70
 800748c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007490:	b003      	add	sp, #12
 8007492:	4770      	bx	lr
 8007494:	2000000c 	.word	0x2000000c
 8007498:	ffff0208 	.word	0xffff0208

0800749c <sulp>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	4604      	mov	r4, r0
 80074a0:	460d      	mov	r5, r1
 80074a2:	ec45 4b10 	vmov	d0, r4, r5
 80074a6:	4616      	mov	r6, r2
 80074a8:	f002 fc20 	bl	8009cec <__ulp>
 80074ac:	ec51 0b10 	vmov	r0, r1, d0
 80074b0:	b17e      	cbz	r6, 80074d2 <sulp+0x36>
 80074b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80074b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	dd09      	ble.n	80074d2 <sulp+0x36>
 80074be:	051b      	lsls	r3, r3, #20
 80074c0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80074c4:	2400      	movs	r4, #0
 80074c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	f7f9 f89b 	bl	8000608 <__aeabi_dmul>
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	0000      	movs	r0, r0
	...

080074d8 <_strtod_l>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	ed2d 8b02 	vpush	{d8}
 80074e0:	b09d      	sub	sp, #116	; 0x74
 80074e2:	461f      	mov	r7, r3
 80074e4:	2300      	movs	r3, #0
 80074e6:	9318      	str	r3, [sp, #96]	; 0x60
 80074e8:	4ba2      	ldr	r3, [pc, #648]	; (8007774 <_strtod_l+0x29c>)
 80074ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	9305      	str	r3, [sp, #20]
 80074f0:	4604      	mov	r4, r0
 80074f2:	4618      	mov	r0, r3
 80074f4:	4688      	mov	r8, r1
 80074f6:	f7f8 fe73 	bl	80001e0 <strlen>
 80074fa:	f04f 0a00 	mov.w	sl, #0
 80074fe:	4605      	mov	r5, r0
 8007500:	f04f 0b00 	mov.w	fp, #0
 8007504:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800750a:	781a      	ldrb	r2, [r3, #0]
 800750c:	2a2b      	cmp	r2, #43	; 0x2b
 800750e:	d04e      	beq.n	80075ae <_strtod_l+0xd6>
 8007510:	d83b      	bhi.n	800758a <_strtod_l+0xb2>
 8007512:	2a0d      	cmp	r2, #13
 8007514:	d834      	bhi.n	8007580 <_strtod_l+0xa8>
 8007516:	2a08      	cmp	r2, #8
 8007518:	d834      	bhi.n	8007584 <_strtod_l+0xac>
 800751a:	2a00      	cmp	r2, #0
 800751c:	d03e      	beq.n	800759c <_strtod_l+0xc4>
 800751e:	2300      	movs	r3, #0
 8007520:	930a      	str	r3, [sp, #40]	; 0x28
 8007522:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007524:	7833      	ldrb	r3, [r6, #0]
 8007526:	2b30      	cmp	r3, #48	; 0x30
 8007528:	f040 80b0 	bne.w	800768c <_strtod_l+0x1b4>
 800752c:	7873      	ldrb	r3, [r6, #1]
 800752e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007532:	2b58      	cmp	r3, #88	; 0x58
 8007534:	d168      	bne.n	8007608 <_strtod_l+0x130>
 8007536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	ab18      	add	r3, sp, #96	; 0x60
 800753c:	9702      	str	r7, [sp, #8]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	4a8d      	ldr	r2, [pc, #564]	; (8007778 <_strtod_l+0x2a0>)
 8007542:	ab19      	add	r3, sp, #100	; 0x64
 8007544:	a917      	add	r1, sp, #92	; 0x5c
 8007546:	4620      	mov	r0, r4
 8007548:	f001 fd38 	bl	8008fbc <__gethex>
 800754c:	f010 0707 	ands.w	r7, r0, #7
 8007550:	4605      	mov	r5, r0
 8007552:	d005      	beq.n	8007560 <_strtod_l+0x88>
 8007554:	2f06      	cmp	r7, #6
 8007556:	d12c      	bne.n	80075b2 <_strtod_l+0xda>
 8007558:	3601      	adds	r6, #1
 800755a:	2300      	movs	r3, #0
 800755c:	9617      	str	r6, [sp, #92]	; 0x5c
 800755e:	930a      	str	r3, [sp, #40]	; 0x28
 8007560:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 8590 	bne.w	8008088 <_strtod_l+0xbb0>
 8007568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800756a:	b1eb      	cbz	r3, 80075a8 <_strtod_l+0xd0>
 800756c:	4652      	mov	r2, sl
 800756e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007572:	ec43 2b10 	vmov	d0, r2, r3
 8007576:	b01d      	add	sp, #116	; 0x74
 8007578:	ecbd 8b02 	vpop	{d8}
 800757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007580:	2a20      	cmp	r2, #32
 8007582:	d1cc      	bne.n	800751e <_strtod_l+0x46>
 8007584:	3301      	adds	r3, #1
 8007586:	9317      	str	r3, [sp, #92]	; 0x5c
 8007588:	e7be      	b.n	8007508 <_strtod_l+0x30>
 800758a:	2a2d      	cmp	r2, #45	; 0x2d
 800758c:	d1c7      	bne.n	800751e <_strtod_l+0x46>
 800758e:	2201      	movs	r2, #1
 8007590:	920a      	str	r2, [sp, #40]	; 0x28
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	9217      	str	r2, [sp, #92]	; 0x5c
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1c2      	bne.n	8007522 <_strtod_l+0x4a>
 800759c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800759e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 856e 	bne.w	8008084 <_strtod_l+0xbac>
 80075a8:	4652      	mov	r2, sl
 80075aa:	465b      	mov	r3, fp
 80075ac:	e7e1      	b.n	8007572 <_strtod_l+0x9a>
 80075ae:	2200      	movs	r2, #0
 80075b0:	e7ee      	b.n	8007590 <_strtod_l+0xb8>
 80075b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80075b4:	b13a      	cbz	r2, 80075c6 <_strtod_l+0xee>
 80075b6:	2135      	movs	r1, #53	; 0x35
 80075b8:	a81a      	add	r0, sp, #104	; 0x68
 80075ba:	f002 fca2 	bl	8009f02 <__copybits>
 80075be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075c0:	4620      	mov	r0, r4
 80075c2:	f002 f861 	bl	8009688 <_Bfree>
 80075c6:	3f01      	subs	r7, #1
 80075c8:	2f04      	cmp	r7, #4
 80075ca:	d806      	bhi.n	80075da <_strtod_l+0x102>
 80075cc:	e8df f007 	tbb	[pc, r7]
 80075d0:	1714030a 	.word	0x1714030a
 80075d4:	0a          	.byte	0x0a
 80075d5:	00          	.byte	0x00
 80075d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80075da:	0728      	lsls	r0, r5, #28
 80075dc:	d5c0      	bpl.n	8007560 <_strtod_l+0x88>
 80075de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80075e2:	e7bd      	b.n	8007560 <_strtod_l+0x88>
 80075e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80075e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075f6:	e7f0      	b.n	80075da <_strtod_l+0x102>
 80075f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800777c <_strtod_l+0x2a4>
 80075fc:	e7ed      	b.n	80075da <_strtod_l+0x102>
 80075fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007602:	f04f 3aff 	mov.w	sl, #4294967295
 8007606:	e7e8      	b.n	80075da <_strtod_l+0x102>
 8007608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	9217      	str	r2, [sp, #92]	; 0x5c
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	d0f9      	beq.n	8007608 <_strtod_l+0x130>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0a3      	beq.n	8007560 <_strtod_l+0x88>
 8007618:	2301      	movs	r3, #1
 800761a:	f04f 0900 	mov.w	r9, #0
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007622:	9308      	str	r3, [sp, #32]
 8007624:	f8cd 901c 	str.w	r9, [sp, #28]
 8007628:	464f      	mov	r7, r9
 800762a:	220a      	movs	r2, #10
 800762c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800762e:	7806      	ldrb	r6, [r0, #0]
 8007630:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007634:	b2d9      	uxtb	r1, r3
 8007636:	2909      	cmp	r1, #9
 8007638:	d92a      	bls.n	8007690 <_strtod_l+0x1b8>
 800763a:	9905      	ldr	r1, [sp, #20]
 800763c:	462a      	mov	r2, r5
 800763e:	f002 ff0f 	bl	800a460 <strncmp>
 8007642:	b398      	cbz	r0, 80076ac <_strtod_l+0x1d4>
 8007644:	2000      	movs	r0, #0
 8007646:	4632      	mov	r2, r6
 8007648:	463d      	mov	r5, r7
 800764a:	9005      	str	r0, [sp, #20]
 800764c:	4603      	mov	r3, r0
 800764e:	2a65      	cmp	r2, #101	; 0x65
 8007650:	d001      	beq.n	8007656 <_strtod_l+0x17e>
 8007652:	2a45      	cmp	r2, #69	; 0x45
 8007654:	d118      	bne.n	8007688 <_strtod_l+0x1b0>
 8007656:	b91d      	cbnz	r5, 8007660 <_strtod_l+0x188>
 8007658:	9a04      	ldr	r2, [sp, #16]
 800765a:	4302      	orrs	r2, r0
 800765c:	d09e      	beq.n	800759c <_strtod_l+0xc4>
 800765e:	2500      	movs	r5, #0
 8007660:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007664:	f108 0201 	add.w	r2, r8, #1
 8007668:	9217      	str	r2, [sp, #92]	; 0x5c
 800766a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800766e:	2a2b      	cmp	r2, #43	; 0x2b
 8007670:	d075      	beq.n	800775e <_strtod_l+0x286>
 8007672:	2a2d      	cmp	r2, #45	; 0x2d
 8007674:	d07b      	beq.n	800776e <_strtod_l+0x296>
 8007676:	f04f 0c00 	mov.w	ip, #0
 800767a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800767e:	2909      	cmp	r1, #9
 8007680:	f240 8082 	bls.w	8007788 <_strtod_l+0x2b0>
 8007684:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007688:	2600      	movs	r6, #0
 800768a:	e09d      	b.n	80077c8 <_strtod_l+0x2f0>
 800768c:	2300      	movs	r3, #0
 800768e:	e7c4      	b.n	800761a <_strtod_l+0x142>
 8007690:	2f08      	cmp	r7, #8
 8007692:	bfd8      	it	le
 8007694:	9907      	ldrle	r1, [sp, #28]
 8007696:	f100 0001 	add.w	r0, r0, #1
 800769a:	bfda      	itte	le
 800769c:	fb02 3301 	mlale	r3, r2, r1, r3
 80076a0:	9307      	strle	r3, [sp, #28]
 80076a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80076a6:	3701      	adds	r7, #1
 80076a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80076aa:	e7bf      	b.n	800762c <_strtod_l+0x154>
 80076ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076ae:	195a      	adds	r2, r3, r5
 80076b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80076b2:	5d5a      	ldrb	r2, [r3, r5]
 80076b4:	2f00      	cmp	r7, #0
 80076b6:	d037      	beq.n	8007728 <_strtod_l+0x250>
 80076b8:	9005      	str	r0, [sp, #20]
 80076ba:	463d      	mov	r5, r7
 80076bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80076c0:	2b09      	cmp	r3, #9
 80076c2:	d912      	bls.n	80076ea <_strtod_l+0x212>
 80076c4:	2301      	movs	r3, #1
 80076c6:	e7c2      	b.n	800764e <_strtod_l+0x176>
 80076c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80076ce:	785a      	ldrb	r2, [r3, #1]
 80076d0:	3001      	adds	r0, #1
 80076d2:	2a30      	cmp	r2, #48	; 0x30
 80076d4:	d0f8      	beq.n	80076c8 <_strtod_l+0x1f0>
 80076d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80076da:	2b08      	cmp	r3, #8
 80076dc:	f200 84d9 	bhi.w	8008092 <_strtod_l+0xbba>
 80076e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076e2:	9005      	str	r0, [sp, #20]
 80076e4:	2000      	movs	r0, #0
 80076e6:	9308      	str	r3, [sp, #32]
 80076e8:	4605      	mov	r5, r0
 80076ea:	3a30      	subs	r2, #48	; 0x30
 80076ec:	f100 0301 	add.w	r3, r0, #1
 80076f0:	d014      	beq.n	800771c <_strtod_l+0x244>
 80076f2:	9905      	ldr	r1, [sp, #20]
 80076f4:	4419      	add	r1, r3
 80076f6:	9105      	str	r1, [sp, #20]
 80076f8:	462b      	mov	r3, r5
 80076fa:	eb00 0e05 	add.w	lr, r0, r5
 80076fe:	210a      	movs	r1, #10
 8007700:	4573      	cmp	r3, lr
 8007702:	d113      	bne.n	800772c <_strtod_l+0x254>
 8007704:	182b      	adds	r3, r5, r0
 8007706:	2b08      	cmp	r3, #8
 8007708:	f105 0501 	add.w	r5, r5, #1
 800770c:	4405      	add	r5, r0
 800770e:	dc1c      	bgt.n	800774a <_strtod_l+0x272>
 8007710:	9907      	ldr	r1, [sp, #28]
 8007712:	230a      	movs	r3, #10
 8007714:	fb03 2301 	mla	r3, r3, r1, r2
 8007718:	9307      	str	r3, [sp, #28]
 800771a:	2300      	movs	r3, #0
 800771c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800771e:	1c51      	adds	r1, r2, #1
 8007720:	9117      	str	r1, [sp, #92]	; 0x5c
 8007722:	7852      	ldrb	r2, [r2, #1]
 8007724:	4618      	mov	r0, r3
 8007726:	e7c9      	b.n	80076bc <_strtod_l+0x1e4>
 8007728:	4638      	mov	r0, r7
 800772a:	e7d2      	b.n	80076d2 <_strtod_l+0x1fa>
 800772c:	2b08      	cmp	r3, #8
 800772e:	dc04      	bgt.n	800773a <_strtod_l+0x262>
 8007730:	9e07      	ldr	r6, [sp, #28]
 8007732:	434e      	muls	r6, r1
 8007734:	9607      	str	r6, [sp, #28]
 8007736:	3301      	adds	r3, #1
 8007738:	e7e2      	b.n	8007700 <_strtod_l+0x228>
 800773a:	f103 0c01 	add.w	ip, r3, #1
 800773e:	f1bc 0f10 	cmp.w	ip, #16
 8007742:	bfd8      	it	le
 8007744:	fb01 f909 	mulle.w	r9, r1, r9
 8007748:	e7f5      	b.n	8007736 <_strtod_l+0x25e>
 800774a:	2d10      	cmp	r5, #16
 800774c:	bfdc      	itt	le
 800774e:	230a      	movle	r3, #10
 8007750:	fb03 2909 	mlale	r9, r3, r9, r2
 8007754:	e7e1      	b.n	800771a <_strtod_l+0x242>
 8007756:	2300      	movs	r3, #0
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	2301      	movs	r3, #1
 800775c:	e77c      	b.n	8007658 <_strtod_l+0x180>
 800775e:	f04f 0c00 	mov.w	ip, #0
 8007762:	f108 0202 	add.w	r2, r8, #2
 8007766:	9217      	str	r2, [sp, #92]	; 0x5c
 8007768:	f898 2002 	ldrb.w	r2, [r8, #2]
 800776c:	e785      	b.n	800767a <_strtod_l+0x1a2>
 800776e:	f04f 0c01 	mov.w	ip, #1
 8007772:	e7f6      	b.n	8007762 <_strtod_l+0x28a>
 8007774:	0800b5d0 	.word	0x0800b5d0
 8007778:	0800b384 	.word	0x0800b384
 800777c:	7ff00000 	.word	0x7ff00000
 8007780:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007782:	1c51      	adds	r1, r2, #1
 8007784:	9117      	str	r1, [sp, #92]	; 0x5c
 8007786:	7852      	ldrb	r2, [r2, #1]
 8007788:	2a30      	cmp	r2, #48	; 0x30
 800778a:	d0f9      	beq.n	8007780 <_strtod_l+0x2a8>
 800778c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007790:	2908      	cmp	r1, #8
 8007792:	f63f af79 	bhi.w	8007688 <_strtod_l+0x1b0>
 8007796:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800779a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800779c:	9206      	str	r2, [sp, #24]
 800779e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077a0:	1c51      	adds	r1, r2, #1
 80077a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80077a4:	7852      	ldrb	r2, [r2, #1]
 80077a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80077aa:	2e09      	cmp	r6, #9
 80077ac:	d937      	bls.n	800781e <_strtod_l+0x346>
 80077ae:	9e06      	ldr	r6, [sp, #24]
 80077b0:	1b89      	subs	r1, r1, r6
 80077b2:	2908      	cmp	r1, #8
 80077b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80077b8:	dc02      	bgt.n	80077c0 <_strtod_l+0x2e8>
 80077ba:	4576      	cmp	r6, lr
 80077bc:	bfa8      	it	ge
 80077be:	4676      	movge	r6, lr
 80077c0:	f1bc 0f00 	cmp.w	ip, #0
 80077c4:	d000      	beq.n	80077c8 <_strtod_l+0x2f0>
 80077c6:	4276      	negs	r6, r6
 80077c8:	2d00      	cmp	r5, #0
 80077ca:	d14d      	bne.n	8007868 <_strtod_l+0x390>
 80077cc:	9904      	ldr	r1, [sp, #16]
 80077ce:	4301      	orrs	r1, r0
 80077d0:	f47f aec6 	bne.w	8007560 <_strtod_l+0x88>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f47f aee1 	bne.w	800759c <_strtod_l+0xc4>
 80077da:	2a69      	cmp	r2, #105	; 0x69
 80077dc:	d027      	beq.n	800782e <_strtod_l+0x356>
 80077de:	dc24      	bgt.n	800782a <_strtod_l+0x352>
 80077e0:	2a49      	cmp	r2, #73	; 0x49
 80077e2:	d024      	beq.n	800782e <_strtod_l+0x356>
 80077e4:	2a4e      	cmp	r2, #78	; 0x4e
 80077e6:	f47f aed9 	bne.w	800759c <_strtod_l+0xc4>
 80077ea:	499f      	ldr	r1, [pc, #636]	; (8007a68 <_strtod_l+0x590>)
 80077ec:	a817      	add	r0, sp, #92	; 0x5c
 80077ee:	f001 fe3d 	bl	800946c <__match>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f43f aed2 	beq.w	800759c <_strtod_l+0xc4>
 80077f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b28      	cmp	r3, #40	; 0x28
 80077fe:	d12d      	bne.n	800785c <_strtod_l+0x384>
 8007800:	499a      	ldr	r1, [pc, #616]	; (8007a6c <_strtod_l+0x594>)
 8007802:	aa1a      	add	r2, sp, #104	; 0x68
 8007804:	a817      	add	r0, sp, #92	; 0x5c
 8007806:	f001 fe45 	bl	8009494 <__hexnan>
 800780a:	2805      	cmp	r0, #5
 800780c:	d126      	bne.n	800785c <_strtod_l+0x384>
 800780e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007810:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007814:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007818:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800781c:	e6a0      	b.n	8007560 <_strtod_l+0x88>
 800781e:	210a      	movs	r1, #10
 8007820:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007824:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007828:	e7b9      	b.n	800779e <_strtod_l+0x2c6>
 800782a:	2a6e      	cmp	r2, #110	; 0x6e
 800782c:	e7db      	b.n	80077e6 <_strtod_l+0x30e>
 800782e:	4990      	ldr	r1, [pc, #576]	; (8007a70 <_strtod_l+0x598>)
 8007830:	a817      	add	r0, sp, #92	; 0x5c
 8007832:	f001 fe1b 	bl	800946c <__match>
 8007836:	2800      	cmp	r0, #0
 8007838:	f43f aeb0 	beq.w	800759c <_strtod_l+0xc4>
 800783c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800783e:	498d      	ldr	r1, [pc, #564]	; (8007a74 <_strtod_l+0x59c>)
 8007840:	3b01      	subs	r3, #1
 8007842:	a817      	add	r0, sp, #92	; 0x5c
 8007844:	9317      	str	r3, [sp, #92]	; 0x5c
 8007846:	f001 fe11 	bl	800946c <__match>
 800784a:	b910      	cbnz	r0, 8007852 <_strtod_l+0x37a>
 800784c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800784e:	3301      	adds	r3, #1
 8007850:	9317      	str	r3, [sp, #92]	; 0x5c
 8007852:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007a84 <_strtod_l+0x5ac>
 8007856:	f04f 0a00 	mov.w	sl, #0
 800785a:	e681      	b.n	8007560 <_strtod_l+0x88>
 800785c:	4886      	ldr	r0, [pc, #536]	; (8007a78 <_strtod_l+0x5a0>)
 800785e:	f002 fde7 	bl	800a430 <nan>
 8007862:	ec5b ab10 	vmov	sl, fp, d0
 8007866:	e67b      	b.n	8007560 <_strtod_l+0x88>
 8007868:	9b05      	ldr	r3, [sp, #20]
 800786a:	9807      	ldr	r0, [sp, #28]
 800786c:	1af3      	subs	r3, r6, r3
 800786e:	2f00      	cmp	r7, #0
 8007870:	bf08      	it	eq
 8007872:	462f      	moveq	r7, r5
 8007874:	2d10      	cmp	r5, #16
 8007876:	9306      	str	r3, [sp, #24]
 8007878:	46a8      	mov	r8, r5
 800787a:	bfa8      	it	ge
 800787c:	f04f 0810 	movge.w	r8, #16
 8007880:	f7f8 fe48 	bl	8000514 <__aeabi_ui2d>
 8007884:	2d09      	cmp	r5, #9
 8007886:	4682      	mov	sl, r0
 8007888:	468b      	mov	fp, r1
 800788a:	dd13      	ble.n	80078b4 <_strtod_l+0x3dc>
 800788c:	4b7b      	ldr	r3, [pc, #492]	; (8007a7c <_strtod_l+0x5a4>)
 800788e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007892:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007896:	f7f8 feb7 	bl	8000608 <__aeabi_dmul>
 800789a:	4682      	mov	sl, r0
 800789c:	4648      	mov	r0, r9
 800789e:	468b      	mov	fp, r1
 80078a0:	f7f8 fe38 	bl	8000514 <__aeabi_ui2d>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4650      	mov	r0, sl
 80078aa:	4659      	mov	r1, fp
 80078ac:	f7f8 fcf6 	bl	800029c <__adddf3>
 80078b0:	4682      	mov	sl, r0
 80078b2:	468b      	mov	fp, r1
 80078b4:	2d0f      	cmp	r5, #15
 80078b6:	dc38      	bgt.n	800792a <_strtod_l+0x452>
 80078b8:	9b06      	ldr	r3, [sp, #24]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f43f ae50 	beq.w	8007560 <_strtod_l+0x88>
 80078c0:	dd24      	ble.n	800790c <_strtod_l+0x434>
 80078c2:	2b16      	cmp	r3, #22
 80078c4:	dc0b      	bgt.n	80078de <_strtod_l+0x406>
 80078c6:	496d      	ldr	r1, [pc, #436]	; (8007a7c <_strtod_l+0x5a4>)
 80078c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078d0:	4652      	mov	r2, sl
 80078d2:	465b      	mov	r3, fp
 80078d4:	f7f8 fe98 	bl	8000608 <__aeabi_dmul>
 80078d8:	4682      	mov	sl, r0
 80078da:	468b      	mov	fp, r1
 80078dc:	e640      	b.n	8007560 <_strtod_l+0x88>
 80078de:	9a06      	ldr	r2, [sp, #24]
 80078e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80078e4:	4293      	cmp	r3, r2
 80078e6:	db20      	blt.n	800792a <_strtod_l+0x452>
 80078e8:	4c64      	ldr	r4, [pc, #400]	; (8007a7c <_strtod_l+0x5a4>)
 80078ea:	f1c5 050f 	rsb	r5, r5, #15
 80078ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078f2:	4652      	mov	r2, sl
 80078f4:	465b      	mov	r3, fp
 80078f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078fa:	f7f8 fe85 	bl	8000608 <__aeabi_dmul>
 80078fe:	9b06      	ldr	r3, [sp, #24]
 8007900:	1b5d      	subs	r5, r3, r5
 8007902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007906:	e9d4 2300 	ldrd	r2, r3, [r4]
 800790a:	e7e3      	b.n	80078d4 <_strtod_l+0x3fc>
 800790c:	9b06      	ldr	r3, [sp, #24]
 800790e:	3316      	adds	r3, #22
 8007910:	db0b      	blt.n	800792a <_strtod_l+0x452>
 8007912:	9b05      	ldr	r3, [sp, #20]
 8007914:	1b9e      	subs	r6, r3, r6
 8007916:	4b59      	ldr	r3, [pc, #356]	; (8007a7c <_strtod_l+0x5a4>)
 8007918:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800791c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	f7f8 ff9a 	bl	800085c <__aeabi_ddiv>
 8007928:	e7d6      	b.n	80078d8 <_strtod_l+0x400>
 800792a:	9b06      	ldr	r3, [sp, #24]
 800792c:	eba5 0808 	sub.w	r8, r5, r8
 8007930:	4498      	add	r8, r3
 8007932:	f1b8 0f00 	cmp.w	r8, #0
 8007936:	dd74      	ble.n	8007a22 <_strtod_l+0x54a>
 8007938:	f018 030f 	ands.w	r3, r8, #15
 800793c:	d00a      	beq.n	8007954 <_strtod_l+0x47c>
 800793e:	494f      	ldr	r1, [pc, #316]	; (8007a7c <_strtod_l+0x5a4>)
 8007940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007944:	4652      	mov	r2, sl
 8007946:	465b      	mov	r3, fp
 8007948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800794c:	f7f8 fe5c 	bl	8000608 <__aeabi_dmul>
 8007950:	4682      	mov	sl, r0
 8007952:	468b      	mov	fp, r1
 8007954:	f038 080f 	bics.w	r8, r8, #15
 8007958:	d04f      	beq.n	80079fa <_strtod_l+0x522>
 800795a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800795e:	dd22      	ble.n	80079a6 <_strtod_l+0x4ce>
 8007960:	2500      	movs	r5, #0
 8007962:	462e      	mov	r6, r5
 8007964:	9507      	str	r5, [sp, #28]
 8007966:	9505      	str	r5, [sp, #20]
 8007968:	2322      	movs	r3, #34	; 0x22
 800796a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007a84 <_strtod_l+0x5ac>
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	f04f 0a00 	mov.w	sl, #0
 8007974:	9b07      	ldr	r3, [sp, #28]
 8007976:	2b00      	cmp	r3, #0
 8007978:	f43f adf2 	beq.w	8007560 <_strtod_l+0x88>
 800797c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800797e:	4620      	mov	r0, r4
 8007980:	f001 fe82 	bl	8009688 <_Bfree>
 8007984:	9905      	ldr	r1, [sp, #20]
 8007986:	4620      	mov	r0, r4
 8007988:	f001 fe7e 	bl	8009688 <_Bfree>
 800798c:	4631      	mov	r1, r6
 800798e:	4620      	mov	r0, r4
 8007990:	f001 fe7a 	bl	8009688 <_Bfree>
 8007994:	9907      	ldr	r1, [sp, #28]
 8007996:	4620      	mov	r0, r4
 8007998:	f001 fe76 	bl	8009688 <_Bfree>
 800799c:	4629      	mov	r1, r5
 800799e:	4620      	mov	r0, r4
 80079a0:	f001 fe72 	bl	8009688 <_Bfree>
 80079a4:	e5dc      	b.n	8007560 <_strtod_l+0x88>
 80079a6:	4b36      	ldr	r3, [pc, #216]	; (8007a80 <_strtod_l+0x5a8>)
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	2300      	movs	r3, #0
 80079ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 80079b0:	4650      	mov	r0, sl
 80079b2:	4659      	mov	r1, fp
 80079b4:	4699      	mov	r9, r3
 80079b6:	f1b8 0f01 	cmp.w	r8, #1
 80079ba:	dc21      	bgt.n	8007a00 <_strtod_l+0x528>
 80079bc:	b10b      	cbz	r3, 80079c2 <_strtod_l+0x4ea>
 80079be:	4682      	mov	sl, r0
 80079c0:	468b      	mov	fp, r1
 80079c2:	4b2f      	ldr	r3, [pc, #188]	; (8007a80 <_strtod_l+0x5a8>)
 80079c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80079c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80079cc:	4652      	mov	r2, sl
 80079ce:	465b      	mov	r3, fp
 80079d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80079d4:	f7f8 fe18 	bl	8000608 <__aeabi_dmul>
 80079d8:	4b2a      	ldr	r3, [pc, #168]	; (8007a84 <_strtod_l+0x5ac>)
 80079da:	460a      	mov	r2, r1
 80079dc:	400b      	ands	r3, r1
 80079de:	492a      	ldr	r1, [pc, #168]	; (8007a88 <_strtod_l+0x5b0>)
 80079e0:	428b      	cmp	r3, r1
 80079e2:	4682      	mov	sl, r0
 80079e4:	d8bc      	bhi.n	8007960 <_strtod_l+0x488>
 80079e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80079ea:	428b      	cmp	r3, r1
 80079ec:	bf86      	itte	hi
 80079ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007a8c <_strtod_l+0x5b4>
 80079f2:	f04f 3aff 	movhi.w	sl, #4294967295
 80079f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80079fa:	2300      	movs	r3, #0
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	e084      	b.n	8007b0a <_strtod_l+0x632>
 8007a00:	f018 0f01 	tst.w	r8, #1
 8007a04:	d005      	beq.n	8007a12 <_strtod_l+0x53a>
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f7f8 fdfc 	bl	8000608 <__aeabi_dmul>
 8007a10:	2301      	movs	r3, #1
 8007a12:	9a04      	ldr	r2, [sp, #16]
 8007a14:	3208      	adds	r2, #8
 8007a16:	f109 0901 	add.w	r9, r9, #1
 8007a1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a1e:	9204      	str	r2, [sp, #16]
 8007a20:	e7c9      	b.n	80079b6 <_strtod_l+0x4de>
 8007a22:	d0ea      	beq.n	80079fa <_strtod_l+0x522>
 8007a24:	f1c8 0800 	rsb	r8, r8, #0
 8007a28:	f018 020f 	ands.w	r2, r8, #15
 8007a2c:	d00a      	beq.n	8007a44 <_strtod_l+0x56c>
 8007a2e:	4b13      	ldr	r3, [pc, #76]	; (8007a7c <_strtod_l+0x5a4>)
 8007a30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a34:	4650      	mov	r0, sl
 8007a36:	4659      	mov	r1, fp
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f7f8 ff0e 	bl	800085c <__aeabi_ddiv>
 8007a40:	4682      	mov	sl, r0
 8007a42:	468b      	mov	fp, r1
 8007a44:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007a48:	d0d7      	beq.n	80079fa <_strtod_l+0x522>
 8007a4a:	f1b8 0f1f 	cmp.w	r8, #31
 8007a4e:	dd1f      	ble.n	8007a90 <_strtod_l+0x5b8>
 8007a50:	2500      	movs	r5, #0
 8007a52:	462e      	mov	r6, r5
 8007a54:	9507      	str	r5, [sp, #28]
 8007a56:	9505      	str	r5, [sp, #20]
 8007a58:	2322      	movs	r3, #34	; 0x22
 8007a5a:	f04f 0a00 	mov.w	sl, #0
 8007a5e:	f04f 0b00 	mov.w	fp, #0
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	e786      	b.n	8007974 <_strtod_l+0x49c>
 8007a66:	bf00      	nop
 8007a68:	0800b355 	.word	0x0800b355
 8007a6c:	0800b398 	.word	0x0800b398
 8007a70:	0800b34d 	.word	0x0800b34d
 8007a74:	0800b4dc 	.word	0x0800b4dc
 8007a78:	0800b788 	.word	0x0800b788
 8007a7c:	0800b668 	.word	0x0800b668
 8007a80:	0800b640 	.word	0x0800b640
 8007a84:	7ff00000 	.word	0x7ff00000
 8007a88:	7ca00000 	.word	0x7ca00000
 8007a8c:	7fefffff 	.word	0x7fefffff
 8007a90:	f018 0310 	ands.w	r3, r8, #16
 8007a94:	bf18      	it	ne
 8007a96:	236a      	movne	r3, #106	; 0x6a
 8007a98:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007e48 <_strtod_l+0x970>
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	4650      	mov	r0, sl
 8007aa0:	4659      	mov	r1, fp
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f018 0f01 	tst.w	r8, #1
 8007aa8:	d004      	beq.n	8007ab4 <_strtod_l+0x5dc>
 8007aaa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007aae:	f7f8 fdab 	bl	8000608 <__aeabi_dmul>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007ab8:	f109 0908 	add.w	r9, r9, #8
 8007abc:	d1f2      	bne.n	8007aa4 <_strtod_l+0x5cc>
 8007abe:	b10b      	cbz	r3, 8007ac4 <_strtod_l+0x5ec>
 8007ac0:	4682      	mov	sl, r0
 8007ac2:	468b      	mov	fp, r1
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	b1c3      	cbz	r3, 8007afa <_strtod_l+0x622>
 8007ac8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007acc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	4659      	mov	r1, fp
 8007ad4:	dd11      	ble.n	8007afa <_strtod_l+0x622>
 8007ad6:	2b1f      	cmp	r3, #31
 8007ad8:	f340 8124 	ble.w	8007d24 <_strtod_l+0x84c>
 8007adc:	2b34      	cmp	r3, #52	; 0x34
 8007ade:	bfde      	ittt	le
 8007ae0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007ae4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ae8:	fa03 f202 	lslle.w	r2, r3, r2
 8007aec:	f04f 0a00 	mov.w	sl, #0
 8007af0:	bfcc      	ite	gt
 8007af2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007af6:	ea02 0b01 	andle.w	fp, r2, r1
 8007afa:	2200      	movs	r2, #0
 8007afc:	2300      	movs	r3, #0
 8007afe:	4650      	mov	r0, sl
 8007b00:	4659      	mov	r1, fp
 8007b02:	f7f8 ffe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d1a2      	bne.n	8007a50 <_strtod_l+0x578>
 8007b0a:	9b07      	ldr	r3, [sp, #28]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	9908      	ldr	r1, [sp, #32]
 8007b10:	462b      	mov	r3, r5
 8007b12:	463a      	mov	r2, r7
 8007b14:	4620      	mov	r0, r4
 8007b16:	f001 fe1f 	bl	8009758 <__s2b>
 8007b1a:	9007      	str	r0, [sp, #28]
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	f43f af1f 	beq.w	8007960 <_strtod_l+0x488>
 8007b22:	9b05      	ldr	r3, [sp, #20]
 8007b24:	1b9e      	subs	r6, r3, r6
 8007b26:	9b06      	ldr	r3, [sp, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	bfb4      	ite	lt
 8007b2c:	4633      	movlt	r3, r6
 8007b2e:	2300      	movge	r3, #0
 8007b30:	930c      	str	r3, [sp, #48]	; 0x30
 8007b32:	9b06      	ldr	r3, [sp, #24]
 8007b34:	2500      	movs	r5, #0
 8007b36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b3a:	9312      	str	r3, [sp, #72]	; 0x48
 8007b3c:	462e      	mov	r6, r5
 8007b3e:	9b07      	ldr	r3, [sp, #28]
 8007b40:	4620      	mov	r0, r4
 8007b42:	6859      	ldr	r1, [r3, #4]
 8007b44:	f001 fd60 	bl	8009608 <_Balloc>
 8007b48:	9005      	str	r0, [sp, #20]
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f43f af0c 	beq.w	8007968 <_strtod_l+0x490>
 8007b50:	9b07      	ldr	r3, [sp, #28]
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	3202      	adds	r2, #2
 8007b56:	f103 010c 	add.w	r1, r3, #12
 8007b5a:	0092      	lsls	r2, r2, #2
 8007b5c:	300c      	adds	r0, #12
 8007b5e:	f7fe fde7 	bl	8006730 <memcpy>
 8007b62:	ec4b ab10 	vmov	d0, sl, fp
 8007b66:	aa1a      	add	r2, sp, #104	; 0x68
 8007b68:	a919      	add	r1, sp, #100	; 0x64
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f002 f93a 	bl	8009de4 <__d2b>
 8007b70:	ec4b ab18 	vmov	d8, sl, fp
 8007b74:	9018      	str	r0, [sp, #96]	; 0x60
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f43f aef6 	beq.w	8007968 <_strtod_l+0x490>
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f001 fe84 	bl	800988c <__i2b>
 8007b84:	4606      	mov	r6, r0
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f aeee 	beq.w	8007968 <_strtod_l+0x490>
 8007b8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b8e:	9904      	ldr	r1, [sp, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bfab      	itete	ge
 8007b94:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b96:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b9a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b9e:	bfac      	ite	ge
 8007ba0:	eb03 0902 	addge.w	r9, r3, r2
 8007ba4:	1ad7      	sublt	r7, r2, r3
 8007ba6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ba8:	eba3 0801 	sub.w	r8, r3, r1
 8007bac:	4490      	add	r8, r2
 8007bae:	4ba1      	ldr	r3, [pc, #644]	; (8007e34 <_strtod_l+0x95c>)
 8007bb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bb4:	4598      	cmp	r8, r3
 8007bb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007bba:	f280 80c7 	bge.w	8007d4c <_strtod_l+0x874>
 8007bbe:	eba3 0308 	sub.w	r3, r3, r8
 8007bc2:	2b1f      	cmp	r3, #31
 8007bc4:	eba2 0203 	sub.w	r2, r2, r3
 8007bc8:	f04f 0101 	mov.w	r1, #1
 8007bcc:	f300 80b1 	bgt.w	8007d32 <_strtod_l+0x85a>
 8007bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd4:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9308      	str	r3, [sp, #32]
 8007bda:	eb09 0802 	add.w	r8, r9, r2
 8007bde:	9b04      	ldr	r3, [sp, #16]
 8007be0:	45c1      	cmp	r9, r8
 8007be2:	4417      	add	r7, r2
 8007be4:	441f      	add	r7, r3
 8007be6:	464b      	mov	r3, r9
 8007be8:	bfa8      	it	ge
 8007bea:	4643      	movge	r3, r8
 8007bec:	42bb      	cmp	r3, r7
 8007bee:	bfa8      	it	ge
 8007bf0:	463b      	movge	r3, r7
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bfc2      	ittt	gt
 8007bf6:	eba8 0803 	subgt.w	r8, r8, r3
 8007bfa:	1aff      	subgt	r7, r7, r3
 8007bfc:	eba9 0903 	subgt.w	r9, r9, r3
 8007c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	dd17      	ble.n	8007c36 <_strtod_l+0x75e>
 8007c06:	4631      	mov	r1, r6
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f001 fefe 	bl	8009a0c <__pow5mult>
 8007c10:	4606      	mov	r6, r0
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f43f aea8 	beq.w	8007968 <_strtod_l+0x490>
 8007c18:	4601      	mov	r1, r0
 8007c1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f001 fe4b 	bl	80098b8 <__multiply>
 8007c22:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c24:	2800      	cmp	r0, #0
 8007c26:	f43f ae9f 	beq.w	8007968 <_strtod_l+0x490>
 8007c2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f001 fd2b 	bl	8009688 <_Bfree>
 8007c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c34:	9318      	str	r3, [sp, #96]	; 0x60
 8007c36:	f1b8 0f00 	cmp.w	r8, #0
 8007c3a:	f300 808c 	bgt.w	8007d56 <_strtod_l+0x87e>
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dd08      	ble.n	8007c56 <_strtod_l+0x77e>
 8007c44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c46:	9905      	ldr	r1, [sp, #20]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f001 fedf 	bl	8009a0c <__pow5mult>
 8007c4e:	9005      	str	r0, [sp, #20]
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f43f ae89 	beq.w	8007968 <_strtod_l+0x490>
 8007c56:	2f00      	cmp	r7, #0
 8007c58:	dd08      	ble.n	8007c6c <_strtod_l+0x794>
 8007c5a:	9905      	ldr	r1, [sp, #20]
 8007c5c:	463a      	mov	r2, r7
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f001 ff2e 	bl	8009ac0 <__lshift>
 8007c64:	9005      	str	r0, [sp, #20]
 8007c66:	2800      	cmp	r0, #0
 8007c68:	f43f ae7e 	beq.w	8007968 <_strtod_l+0x490>
 8007c6c:	f1b9 0f00 	cmp.w	r9, #0
 8007c70:	dd08      	ble.n	8007c84 <_strtod_l+0x7ac>
 8007c72:	4631      	mov	r1, r6
 8007c74:	464a      	mov	r2, r9
 8007c76:	4620      	mov	r0, r4
 8007c78:	f001 ff22 	bl	8009ac0 <__lshift>
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f43f ae72 	beq.w	8007968 <_strtod_l+0x490>
 8007c84:	9a05      	ldr	r2, [sp, #20]
 8007c86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f001 ffa5 	bl	8009bd8 <__mdiff>
 8007c8e:	4605      	mov	r5, r0
 8007c90:	2800      	cmp	r0, #0
 8007c92:	f43f ae69 	beq.w	8007968 <_strtod_l+0x490>
 8007c96:	68c3      	ldr	r3, [r0, #12]
 8007c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60c3      	str	r3, [r0, #12]
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	f001 ff7e 	bl	8009ba0 <__mcmp>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	da60      	bge.n	8007d6a <_strtod_l+0x892>
 8007ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007caa:	ea53 030a 	orrs.w	r3, r3, sl
 8007cae:	f040 8082 	bne.w	8007db6 <_strtod_l+0x8de>
 8007cb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d17d      	bne.n	8007db6 <_strtod_l+0x8de>
 8007cba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cbe:	0d1b      	lsrs	r3, r3, #20
 8007cc0:	051b      	lsls	r3, r3, #20
 8007cc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007cc6:	d976      	bls.n	8007db6 <_strtod_l+0x8de>
 8007cc8:	696b      	ldr	r3, [r5, #20]
 8007cca:	b913      	cbnz	r3, 8007cd2 <_strtod_l+0x7fa>
 8007ccc:	692b      	ldr	r3, [r5, #16]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	dd71      	ble.n	8007db6 <_strtod_l+0x8de>
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f001 fef2 	bl	8009ac0 <__lshift>
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4605      	mov	r5, r0
 8007ce0:	f001 ff5e 	bl	8009ba0 <__mcmp>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	dd66      	ble.n	8007db6 <_strtod_l+0x8de>
 8007ce8:	9904      	ldr	r1, [sp, #16]
 8007cea:	4a53      	ldr	r2, [pc, #332]	; (8007e38 <_strtod_l+0x960>)
 8007cec:	465b      	mov	r3, fp
 8007cee:	2900      	cmp	r1, #0
 8007cf0:	f000 8081 	beq.w	8007df6 <_strtod_l+0x91e>
 8007cf4:	ea02 010b 	and.w	r1, r2, fp
 8007cf8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007cfc:	dc7b      	bgt.n	8007df6 <_strtod_l+0x91e>
 8007cfe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007d02:	f77f aea9 	ble.w	8007a58 <_strtod_l+0x580>
 8007d06:	4b4d      	ldr	r3, [pc, #308]	; (8007e3c <_strtod_l+0x964>)
 8007d08:	4650      	mov	r0, sl
 8007d0a:	4659      	mov	r1, fp
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f7f8 fc7b 	bl	8000608 <__aeabi_dmul>
 8007d12:	460b      	mov	r3, r1
 8007d14:	4303      	orrs	r3, r0
 8007d16:	bf08      	it	eq
 8007d18:	2322      	moveq	r3, #34	; 0x22
 8007d1a:	4682      	mov	sl, r0
 8007d1c:	468b      	mov	fp, r1
 8007d1e:	bf08      	it	eq
 8007d20:	6023      	streq	r3, [r4, #0]
 8007d22:	e62b      	b.n	800797c <_strtod_l+0x4a4>
 8007d24:	f04f 32ff 	mov.w	r2, #4294967295
 8007d28:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2c:	ea03 0a0a 	and.w	sl, r3, sl
 8007d30:	e6e3      	b.n	8007afa <_strtod_l+0x622>
 8007d32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007d36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007d3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007d3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007d42:	fa01 f308 	lsl.w	r3, r1, r8
 8007d46:	9308      	str	r3, [sp, #32]
 8007d48:	910d      	str	r1, [sp, #52]	; 0x34
 8007d4a:	e746      	b.n	8007bda <_strtod_l+0x702>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9308      	str	r3, [sp, #32]
 8007d50:	2301      	movs	r3, #1
 8007d52:	930d      	str	r3, [sp, #52]	; 0x34
 8007d54:	e741      	b.n	8007bda <_strtod_l+0x702>
 8007d56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d58:	4642      	mov	r2, r8
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f001 feb0 	bl	8009ac0 <__lshift>
 8007d60:	9018      	str	r0, [sp, #96]	; 0x60
 8007d62:	2800      	cmp	r0, #0
 8007d64:	f47f af6b 	bne.w	8007c3e <_strtod_l+0x766>
 8007d68:	e5fe      	b.n	8007968 <_strtod_l+0x490>
 8007d6a:	465f      	mov	r7, fp
 8007d6c:	d16e      	bne.n	8007e4c <_strtod_l+0x974>
 8007d6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d74:	b342      	cbz	r2, 8007dc8 <_strtod_l+0x8f0>
 8007d76:	4a32      	ldr	r2, [pc, #200]	; (8007e40 <_strtod_l+0x968>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d128      	bne.n	8007dce <_strtod_l+0x8f6>
 8007d7c:	9b04      	ldr	r3, [sp, #16]
 8007d7e:	4651      	mov	r1, sl
 8007d80:	b1eb      	cbz	r3, 8007dbe <_strtod_l+0x8e6>
 8007d82:	4b2d      	ldr	r3, [pc, #180]	; (8007e38 <_strtod_l+0x960>)
 8007d84:	403b      	ands	r3, r7
 8007d86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8e:	d819      	bhi.n	8007dc4 <_strtod_l+0x8ec>
 8007d90:	0d1b      	lsrs	r3, r3, #20
 8007d92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	4299      	cmp	r1, r3
 8007d9c:	d117      	bne.n	8007dce <_strtod_l+0x8f6>
 8007d9e:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <_strtod_l+0x96c>)
 8007da0:	429f      	cmp	r7, r3
 8007da2:	d102      	bne.n	8007daa <_strtod_l+0x8d2>
 8007da4:	3101      	adds	r1, #1
 8007da6:	f43f addf 	beq.w	8007968 <_strtod_l+0x490>
 8007daa:	4b23      	ldr	r3, [pc, #140]	; (8007e38 <_strtod_l+0x960>)
 8007dac:	403b      	ands	r3, r7
 8007dae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007db2:	f04f 0a00 	mov.w	sl, #0
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1a4      	bne.n	8007d06 <_strtod_l+0x82e>
 8007dbc:	e5de      	b.n	800797c <_strtod_l+0x4a4>
 8007dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc2:	e7ea      	b.n	8007d9a <_strtod_l+0x8c2>
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	e7e8      	b.n	8007d9a <_strtod_l+0x8c2>
 8007dc8:	ea53 030a 	orrs.w	r3, r3, sl
 8007dcc:	d08c      	beq.n	8007ce8 <_strtod_l+0x810>
 8007dce:	9b08      	ldr	r3, [sp, #32]
 8007dd0:	b1db      	cbz	r3, 8007e0a <_strtod_l+0x932>
 8007dd2:	423b      	tst	r3, r7
 8007dd4:	d0ef      	beq.n	8007db6 <_strtod_l+0x8de>
 8007dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd8:	9a04      	ldr	r2, [sp, #16]
 8007dda:	4650      	mov	r0, sl
 8007ddc:	4659      	mov	r1, fp
 8007dde:	b1c3      	cbz	r3, 8007e12 <_strtod_l+0x93a>
 8007de0:	f7ff fb5c 	bl	800749c <sulp>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	ec51 0b18 	vmov	r0, r1, d8
 8007dec:	f7f8 fa56 	bl	800029c <__adddf3>
 8007df0:	4682      	mov	sl, r0
 8007df2:	468b      	mov	fp, r1
 8007df4:	e7df      	b.n	8007db6 <_strtod_l+0x8de>
 8007df6:	4013      	ands	r3, r2
 8007df8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007dfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e04:	f04f 3aff 	mov.w	sl, #4294967295
 8007e08:	e7d5      	b.n	8007db6 <_strtod_l+0x8de>
 8007e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e0c:	ea13 0f0a 	tst.w	r3, sl
 8007e10:	e7e0      	b.n	8007dd4 <_strtod_l+0x8fc>
 8007e12:	f7ff fb43 	bl	800749c <sulp>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	ec51 0b18 	vmov	r0, r1, d8
 8007e1e:	f7f8 fa3b 	bl	8000298 <__aeabi_dsub>
 8007e22:	2200      	movs	r2, #0
 8007e24:	2300      	movs	r3, #0
 8007e26:	4682      	mov	sl, r0
 8007e28:	468b      	mov	fp, r1
 8007e2a:	f7f8 fe55 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d0c1      	beq.n	8007db6 <_strtod_l+0x8de>
 8007e32:	e611      	b.n	8007a58 <_strtod_l+0x580>
 8007e34:	fffffc02 	.word	0xfffffc02
 8007e38:	7ff00000 	.word	0x7ff00000
 8007e3c:	39500000 	.word	0x39500000
 8007e40:	000fffff 	.word	0x000fffff
 8007e44:	7fefffff 	.word	0x7fefffff
 8007e48:	0800b3b0 	.word	0x0800b3b0
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f002 f824 	bl	8009e9c <__ratio>
 8007e54:	ec59 8b10 	vmov	r8, r9, d0
 8007e58:	ee10 0a10 	vmov	r0, s0
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e62:	4649      	mov	r1, r9
 8007e64:	f7f8 fe4c 	bl	8000b00 <__aeabi_dcmple>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d07a      	beq.n	8007f62 <_strtod_l+0xa8a>
 8007e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d04a      	beq.n	8007f08 <_strtod_l+0xa30>
 8007e72:	4b95      	ldr	r3, [pc, #596]	; (80080c8 <_strtod_l+0xbf0>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80080c8 <_strtod_l+0xbf0>
 8007e7e:	f04f 0800 	mov.w	r8, #0
 8007e82:	4b92      	ldr	r3, [pc, #584]	; (80080cc <_strtod_l+0xbf4>)
 8007e84:	403b      	ands	r3, r7
 8007e86:	930d      	str	r3, [sp, #52]	; 0x34
 8007e88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e8a:	4b91      	ldr	r3, [pc, #580]	; (80080d0 <_strtod_l+0xbf8>)
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	f040 80b0 	bne.w	8007ff2 <_strtod_l+0xb1a>
 8007e92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e96:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e9a:	ec4b ab10 	vmov	d0, sl, fp
 8007e9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ea2:	f001 ff23 	bl	8009cec <__ulp>
 8007ea6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007eaa:	ec53 2b10 	vmov	r2, r3, d0
 8007eae:	f7f8 fbab 	bl	8000608 <__aeabi_dmul>
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	465b      	mov	r3, fp
 8007eb6:	f7f8 f9f1 	bl	800029c <__adddf3>
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4983      	ldr	r1, [pc, #524]	; (80080cc <_strtod_l+0xbf4>)
 8007ebe:	4a85      	ldr	r2, [pc, #532]	; (80080d4 <_strtod_l+0xbfc>)
 8007ec0:	4019      	ands	r1, r3
 8007ec2:	4291      	cmp	r1, r2
 8007ec4:	4682      	mov	sl, r0
 8007ec6:	d960      	bls.n	8007f8a <_strtod_l+0xab2>
 8007ec8:	ee18 3a90 	vmov	r3, s17
 8007ecc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d104      	bne.n	8007ede <_strtod_l+0xa06>
 8007ed4:	ee18 3a10 	vmov	r3, s16
 8007ed8:	3301      	adds	r3, #1
 8007eda:	f43f ad45 	beq.w	8007968 <_strtod_l+0x490>
 8007ede:	f8df b200 	ldr.w	fp, [pc, #512]	; 80080e0 <_strtod_l+0xc08>
 8007ee2:	f04f 3aff 	mov.w	sl, #4294967295
 8007ee6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f001 fbcd 	bl	8009688 <_Bfree>
 8007eee:	9905      	ldr	r1, [sp, #20]
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f001 fbc9 	bl	8009688 <_Bfree>
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f001 fbc5 	bl	8009688 <_Bfree>
 8007efe:	4629      	mov	r1, r5
 8007f00:	4620      	mov	r0, r4
 8007f02:	f001 fbc1 	bl	8009688 <_Bfree>
 8007f06:	e61a      	b.n	8007b3e <_strtod_l+0x666>
 8007f08:	f1ba 0f00 	cmp.w	sl, #0
 8007f0c:	d11b      	bne.n	8007f46 <_strtod_l+0xa6e>
 8007f0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f12:	b9f3      	cbnz	r3, 8007f52 <_strtod_l+0xa7a>
 8007f14:	4b6c      	ldr	r3, [pc, #432]	; (80080c8 <_strtod_l+0xbf0>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	4640      	mov	r0, r8
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	f7f8 fde6 	bl	8000aec <__aeabi_dcmplt>
 8007f20:	b9d0      	cbnz	r0, 8007f58 <_strtod_l+0xa80>
 8007f22:	4640      	mov	r0, r8
 8007f24:	4649      	mov	r1, r9
 8007f26:	4b6c      	ldr	r3, [pc, #432]	; (80080d8 <_strtod_l+0xc00>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f7f8 fb6d 	bl	8000608 <__aeabi_dmul>
 8007f2e:	4680      	mov	r8, r0
 8007f30:	4689      	mov	r9, r1
 8007f32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007f3a:	9315      	str	r3, [sp, #84]	; 0x54
 8007f3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f44:	e79d      	b.n	8007e82 <_strtod_l+0x9aa>
 8007f46:	f1ba 0f01 	cmp.w	sl, #1
 8007f4a:	d102      	bne.n	8007f52 <_strtod_l+0xa7a>
 8007f4c:	2f00      	cmp	r7, #0
 8007f4e:	f43f ad83 	beq.w	8007a58 <_strtod_l+0x580>
 8007f52:	4b62      	ldr	r3, [pc, #392]	; (80080dc <_strtod_l+0xc04>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	e78e      	b.n	8007e76 <_strtod_l+0x99e>
 8007f58:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80080d8 <_strtod_l+0xc00>
 8007f5c:	f04f 0800 	mov.w	r8, #0
 8007f60:	e7e7      	b.n	8007f32 <_strtod_l+0xa5a>
 8007f62:	4b5d      	ldr	r3, [pc, #372]	; (80080d8 <_strtod_l+0xc00>)
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f7f8 fb4d 	bl	8000608 <__aeabi_dmul>
 8007f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f70:	4680      	mov	r8, r0
 8007f72:	4689      	mov	r9, r1
 8007f74:	b933      	cbnz	r3, 8007f84 <_strtod_l+0xaac>
 8007f76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f7a:	900e      	str	r0, [sp, #56]	; 0x38
 8007f7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f82:	e7dd      	b.n	8007f40 <_strtod_l+0xa68>
 8007f84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007f88:	e7f9      	b.n	8007f7e <_strtod_l+0xaa6>
 8007f8a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007f8e:	9b04      	ldr	r3, [sp, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1a8      	bne.n	8007ee6 <_strtod_l+0xa0e>
 8007f94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f9a:	0d1b      	lsrs	r3, r3, #20
 8007f9c:	051b      	lsls	r3, r3, #20
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d1a1      	bne.n	8007ee6 <_strtod_l+0xa0e>
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	f7f8 fe8f 	bl	8000cc8 <__aeabi_d2lz>
 8007faa:	f7f8 faff 	bl	80005ac <__aeabi_l2d>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	f7f8 f96f 	bl	8000298 <__aeabi_dsub>
 8007fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fc0:	ea43 030a 	orr.w	r3, r3, sl
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	4689      	mov	r9, r1
 8007fca:	d055      	beq.n	8008078 <_strtod_l+0xba0>
 8007fcc:	a336      	add	r3, pc, #216	; (adr r3, 80080a8 <_strtod_l+0xbd0>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f7f8 fd8b 	bl	8000aec <__aeabi_dcmplt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f47f acd0 	bne.w	800797c <_strtod_l+0x4a4>
 8007fdc:	a334      	add	r3, pc, #208	; (adr r3, 80080b0 <_strtod_l+0xbd8>)
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	f7f8 fd9f 	bl	8000b28 <__aeabi_dcmpgt>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f43f af7b 	beq.w	8007ee6 <_strtod_l+0xa0e>
 8007ff0:	e4c4      	b.n	800797c <_strtod_l+0x4a4>
 8007ff2:	9b04      	ldr	r3, [sp, #16]
 8007ff4:	b333      	cbz	r3, 8008044 <_strtod_l+0xb6c>
 8007ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ffc:	d822      	bhi.n	8008044 <_strtod_l+0xb6c>
 8007ffe:	a32e      	add	r3, pc, #184	; (adr r3, 80080b8 <_strtod_l+0xbe0>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	4640      	mov	r0, r8
 8008006:	4649      	mov	r1, r9
 8008008:	f7f8 fd7a 	bl	8000b00 <__aeabi_dcmple>
 800800c:	b1a0      	cbz	r0, 8008038 <_strtod_l+0xb60>
 800800e:	4649      	mov	r1, r9
 8008010:	4640      	mov	r0, r8
 8008012:	f7f8 fdd1 	bl	8000bb8 <__aeabi_d2uiz>
 8008016:	2801      	cmp	r0, #1
 8008018:	bf38      	it	cc
 800801a:	2001      	movcc	r0, #1
 800801c:	f7f8 fa7a 	bl	8000514 <__aeabi_ui2d>
 8008020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008022:	4680      	mov	r8, r0
 8008024:	4689      	mov	r9, r1
 8008026:	bb23      	cbnz	r3, 8008072 <_strtod_l+0xb9a>
 8008028:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800802c:	9010      	str	r0, [sp, #64]	; 0x40
 800802e:	9311      	str	r3, [sp, #68]	; 0x44
 8008030:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008034:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800803c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	9309      	str	r3, [sp, #36]	; 0x24
 8008044:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008048:	eeb0 0a48 	vmov.f32	s0, s16
 800804c:	eef0 0a68 	vmov.f32	s1, s17
 8008050:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008054:	f001 fe4a 	bl	8009cec <__ulp>
 8008058:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800805c:	ec53 2b10 	vmov	r2, r3, d0
 8008060:	f7f8 fad2 	bl	8000608 <__aeabi_dmul>
 8008064:	ec53 2b18 	vmov	r2, r3, d8
 8008068:	f7f8 f918 	bl	800029c <__adddf3>
 800806c:	4682      	mov	sl, r0
 800806e:	468b      	mov	fp, r1
 8008070:	e78d      	b.n	8007f8e <_strtod_l+0xab6>
 8008072:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008076:	e7db      	b.n	8008030 <_strtod_l+0xb58>
 8008078:	a311      	add	r3, pc, #68	; (adr r3, 80080c0 <_strtod_l+0xbe8>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 fd35 	bl	8000aec <__aeabi_dcmplt>
 8008082:	e7b2      	b.n	8007fea <_strtod_l+0xb12>
 8008084:	2300      	movs	r3, #0
 8008086:	930a      	str	r3, [sp, #40]	; 0x28
 8008088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800808a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	f7ff ba6b 	b.w	8007568 <_strtod_l+0x90>
 8008092:	2a65      	cmp	r2, #101	; 0x65
 8008094:	f43f ab5f 	beq.w	8007756 <_strtod_l+0x27e>
 8008098:	2a45      	cmp	r2, #69	; 0x45
 800809a:	f43f ab5c 	beq.w	8007756 <_strtod_l+0x27e>
 800809e:	2301      	movs	r3, #1
 80080a0:	f7ff bb94 	b.w	80077cc <_strtod_l+0x2f4>
 80080a4:	f3af 8000 	nop.w
 80080a8:	94a03595 	.word	0x94a03595
 80080ac:	3fdfffff 	.word	0x3fdfffff
 80080b0:	35afe535 	.word	0x35afe535
 80080b4:	3fe00000 	.word	0x3fe00000
 80080b8:	ffc00000 	.word	0xffc00000
 80080bc:	41dfffff 	.word	0x41dfffff
 80080c0:	94a03595 	.word	0x94a03595
 80080c4:	3fcfffff 	.word	0x3fcfffff
 80080c8:	3ff00000 	.word	0x3ff00000
 80080cc:	7ff00000 	.word	0x7ff00000
 80080d0:	7fe00000 	.word	0x7fe00000
 80080d4:	7c9fffff 	.word	0x7c9fffff
 80080d8:	3fe00000 	.word	0x3fe00000
 80080dc:	bff00000 	.word	0xbff00000
 80080e0:	7fefffff 	.word	0x7fefffff

080080e4 <_strtod_r>:
 80080e4:	4b01      	ldr	r3, [pc, #4]	; (80080ec <_strtod_r+0x8>)
 80080e6:	f7ff b9f7 	b.w	80074d8 <_strtod_l>
 80080ea:	bf00      	nop
 80080ec:	20000074 	.word	0x20000074

080080f0 <_strtol_l.constprop.0>:
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f6:	d001      	beq.n	80080fc <_strtol_l.constprop.0+0xc>
 80080f8:	2b24      	cmp	r3, #36	; 0x24
 80080fa:	d906      	bls.n	800810a <_strtol_l.constprop.0+0x1a>
 80080fc:	f7fe faee 	bl	80066dc <__errno>
 8008100:	2316      	movs	r3, #22
 8008102:	6003      	str	r3, [r0, #0]
 8008104:	2000      	movs	r0, #0
 8008106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80081f0 <_strtol_l.constprop.0+0x100>
 800810e:	460d      	mov	r5, r1
 8008110:	462e      	mov	r6, r5
 8008112:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008116:	f814 700c 	ldrb.w	r7, [r4, ip]
 800811a:	f017 0708 	ands.w	r7, r7, #8
 800811e:	d1f7      	bne.n	8008110 <_strtol_l.constprop.0+0x20>
 8008120:	2c2d      	cmp	r4, #45	; 0x2d
 8008122:	d132      	bne.n	800818a <_strtol_l.constprop.0+0x9a>
 8008124:	782c      	ldrb	r4, [r5, #0]
 8008126:	2701      	movs	r7, #1
 8008128:	1cb5      	adds	r5, r6, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d05b      	beq.n	80081e6 <_strtol_l.constprop.0+0xf6>
 800812e:	2b10      	cmp	r3, #16
 8008130:	d109      	bne.n	8008146 <_strtol_l.constprop.0+0x56>
 8008132:	2c30      	cmp	r4, #48	; 0x30
 8008134:	d107      	bne.n	8008146 <_strtol_l.constprop.0+0x56>
 8008136:	782c      	ldrb	r4, [r5, #0]
 8008138:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800813c:	2c58      	cmp	r4, #88	; 0x58
 800813e:	d14d      	bne.n	80081dc <_strtol_l.constprop.0+0xec>
 8008140:	786c      	ldrb	r4, [r5, #1]
 8008142:	2310      	movs	r3, #16
 8008144:	3502      	adds	r5, #2
 8008146:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800814a:	f108 38ff 	add.w	r8, r8, #4294967295
 800814e:	f04f 0c00 	mov.w	ip, #0
 8008152:	fbb8 f9f3 	udiv	r9, r8, r3
 8008156:	4666      	mov	r6, ip
 8008158:	fb03 8a19 	mls	sl, r3, r9, r8
 800815c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008160:	f1be 0f09 	cmp.w	lr, #9
 8008164:	d816      	bhi.n	8008194 <_strtol_l.constprop.0+0xa4>
 8008166:	4674      	mov	r4, lr
 8008168:	42a3      	cmp	r3, r4
 800816a:	dd24      	ble.n	80081b6 <_strtol_l.constprop.0+0xc6>
 800816c:	f1bc 0f00 	cmp.w	ip, #0
 8008170:	db1e      	blt.n	80081b0 <_strtol_l.constprop.0+0xc0>
 8008172:	45b1      	cmp	r9, r6
 8008174:	d31c      	bcc.n	80081b0 <_strtol_l.constprop.0+0xc0>
 8008176:	d101      	bne.n	800817c <_strtol_l.constprop.0+0x8c>
 8008178:	45a2      	cmp	sl, r4
 800817a:	db19      	blt.n	80081b0 <_strtol_l.constprop.0+0xc0>
 800817c:	fb06 4603 	mla	r6, r6, r3, r4
 8008180:	f04f 0c01 	mov.w	ip, #1
 8008184:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008188:	e7e8      	b.n	800815c <_strtol_l.constprop.0+0x6c>
 800818a:	2c2b      	cmp	r4, #43	; 0x2b
 800818c:	bf04      	itt	eq
 800818e:	782c      	ldrbeq	r4, [r5, #0]
 8008190:	1cb5      	addeq	r5, r6, #2
 8008192:	e7ca      	b.n	800812a <_strtol_l.constprop.0+0x3a>
 8008194:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008198:	f1be 0f19 	cmp.w	lr, #25
 800819c:	d801      	bhi.n	80081a2 <_strtol_l.constprop.0+0xb2>
 800819e:	3c37      	subs	r4, #55	; 0x37
 80081a0:	e7e2      	b.n	8008168 <_strtol_l.constprop.0+0x78>
 80081a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80081a6:	f1be 0f19 	cmp.w	lr, #25
 80081aa:	d804      	bhi.n	80081b6 <_strtol_l.constprop.0+0xc6>
 80081ac:	3c57      	subs	r4, #87	; 0x57
 80081ae:	e7db      	b.n	8008168 <_strtol_l.constprop.0+0x78>
 80081b0:	f04f 3cff 	mov.w	ip, #4294967295
 80081b4:	e7e6      	b.n	8008184 <_strtol_l.constprop.0+0x94>
 80081b6:	f1bc 0f00 	cmp.w	ip, #0
 80081ba:	da05      	bge.n	80081c8 <_strtol_l.constprop.0+0xd8>
 80081bc:	2322      	movs	r3, #34	; 0x22
 80081be:	6003      	str	r3, [r0, #0]
 80081c0:	4646      	mov	r6, r8
 80081c2:	b942      	cbnz	r2, 80081d6 <_strtol_l.constprop.0+0xe6>
 80081c4:	4630      	mov	r0, r6
 80081c6:	e79e      	b.n	8008106 <_strtol_l.constprop.0+0x16>
 80081c8:	b107      	cbz	r7, 80081cc <_strtol_l.constprop.0+0xdc>
 80081ca:	4276      	negs	r6, r6
 80081cc:	2a00      	cmp	r2, #0
 80081ce:	d0f9      	beq.n	80081c4 <_strtol_l.constprop.0+0xd4>
 80081d0:	f1bc 0f00 	cmp.w	ip, #0
 80081d4:	d000      	beq.n	80081d8 <_strtol_l.constprop.0+0xe8>
 80081d6:	1e69      	subs	r1, r5, #1
 80081d8:	6011      	str	r1, [r2, #0]
 80081da:	e7f3      	b.n	80081c4 <_strtol_l.constprop.0+0xd4>
 80081dc:	2430      	movs	r4, #48	; 0x30
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1b1      	bne.n	8008146 <_strtol_l.constprop.0+0x56>
 80081e2:	2308      	movs	r3, #8
 80081e4:	e7af      	b.n	8008146 <_strtol_l.constprop.0+0x56>
 80081e6:	2c30      	cmp	r4, #48	; 0x30
 80081e8:	d0a5      	beq.n	8008136 <_strtol_l.constprop.0+0x46>
 80081ea:	230a      	movs	r3, #10
 80081ec:	e7ab      	b.n	8008146 <_strtol_l.constprop.0+0x56>
 80081ee:	bf00      	nop
 80081f0:	0800b3d9 	.word	0x0800b3d9

080081f4 <_strtol_r>:
 80081f4:	f7ff bf7c 	b.w	80080f0 <_strtol_l.constprop.0>

080081f8 <quorem>:
 80081f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	6903      	ldr	r3, [r0, #16]
 80081fe:	690c      	ldr	r4, [r1, #16]
 8008200:	42a3      	cmp	r3, r4
 8008202:	4607      	mov	r7, r0
 8008204:	f2c0 8081 	blt.w	800830a <quorem+0x112>
 8008208:	3c01      	subs	r4, #1
 800820a:	f101 0814 	add.w	r8, r1, #20
 800820e:	f100 0514 	add.w	r5, r0, #20
 8008212:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800821c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008220:	3301      	adds	r3, #1
 8008222:	429a      	cmp	r2, r3
 8008224:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008228:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800822c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008230:	d331      	bcc.n	8008296 <quorem+0x9e>
 8008232:	f04f 0e00 	mov.w	lr, #0
 8008236:	4640      	mov	r0, r8
 8008238:	46ac      	mov	ip, r5
 800823a:	46f2      	mov	sl, lr
 800823c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008240:	b293      	uxth	r3, r2
 8008242:	fb06 e303 	mla	r3, r6, r3, lr
 8008246:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800824a:	b29b      	uxth	r3, r3
 800824c:	ebaa 0303 	sub.w	r3, sl, r3
 8008250:	f8dc a000 	ldr.w	sl, [ip]
 8008254:	0c12      	lsrs	r2, r2, #16
 8008256:	fa13 f38a 	uxtah	r3, r3, sl
 800825a:	fb06 e202 	mla	r2, r6, r2, lr
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	9b00      	ldr	r3, [sp, #0]
 8008262:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008266:	b292      	uxth	r2, r2
 8008268:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800826c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008270:	f8bd 3000 	ldrh.w	r3, [sp]
 8008274:	4581      	cmp	r9, r0
 8008276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800827a:	f84c 3b04 	str.w	r3, [ip], #4
 800827e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008282:	d2db      	bcs.n	800823c <quorem+0x44>
 8008284:	f855 300b 	ldr.w	r3, [r5, fp]
 8008288:	b92b      	cbnz	r3, 8008296 <quorem+0x9e>
 800828a:	9b01      	ldr	r3, [sp, #4]
 800828c:	3b04      	subs	r3, #4
 800828e:	429d      	cmp	r5, r3
 8008290:	461a      	mov	r2, r3
 8008292:	d32e      	bcc.n	80082f2 <quorem+0xfa>
 8008294:	613c      	str	r4, [r7, #16]
 8008296:	4638      	mov	r0, r7
 8008298:	f001 fc82 	bl	8009ba0 <__mcmp>
 800829c:	2800      	cmp	r0, #0
 800829e:	db24      	blt.n	80082ea <quorem+0xf2>
 80082a0:	3601      	adds	r6, #1
 80082a2:	4628      	mov	r0, r5
 80082a4:	f04f 0c00 	mov.w	ip, #0
 80082a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80082ac:	f8d0 e000 	ldr.w	lr, [r0]
 80082b0:	b293      	uxth	r3, r2
 80082b2:	ebac 0303 	sub.w	r3, ip, r3
 80082b6:	0c12      	lsrs	r2, r2, #16
 80082b8:	fa13 f38e 	uxtah	r3, r3, lr
 80082bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ca:	45c1      	cmp	r9, r8
 80082cc:	f840 3b04 	str.w	r3, [r0], #4
 80082d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082d4:	d2e8      	bcs.n	80082a8 <quorem+0xb0>
 80082d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082de:	b922      	cbnz	r2, 80082ea <quorem+0xf2>
 80082e0:	3b04      	subs	r3, #4
 80082e2:	429d      	cmp	r5, r3
 80082e4:	461a      	mov	r2, r3
 80082e6:	d30a      	bcc.n	80082fe <quorem+0x106>
 80082e8:	613c      	str	r4, [r7, #16]
 80082ea:	4630      	mov	r0, r6
 80082ec:	b003      	add	sp, #12
 80082ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	3b04      	subs	r3, #4
 80082f6:	2a00      	cmp	r2, #0
 80082f8:	d1cc      	bne.n	8008294 <quorem+0x9c>
 80082fa:	3c01      	subs	r4, #1
 80082fc:	e7c7      	b.n	800828e <quorem+0x96>
 80082fe:	6812      	ldr	r2, [r2, #0]
 8008300:	3b04      	subs	r3, #4
 8008302:	2a00      	cmp	r2, #0
 8008304:	d1f0      	bne.n	80082e8 <quorem+0xf0>
 8008306:	3c01      	subs	r4, #1
 8008308:	e7eb      	b.n	80082e2 <quorem+0xea>
 800830a:	2000      	movs	r0, #0
 800830c:	e7ee      	b.n	80082ec <quorem+0xf4>
	...

08008310 <_dtoa_r>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	ed2d 8b04 	vpush	{d8-d9}
 8008318:	ec57 6b10 	vmov	r6, r7, d0
 800831c:	b093      	sub	sp, #76	; 0x4c
 800831e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008320:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008324:	9106      	str	r1, [sp, #24]
 8008326:	ee10 aa10 	vmov	sl, s0
 800832a:	4604      	mov	r4, r0
 800832c:	9209      	str	r2, [sp, #36]	; 0x24
 800832e:	930c      	str	r3, [sp, #48]	; 0x30
 8008330:	46bb      	mov	fp, r7
 8008332:	b975      	cbnz	r5, 8008352 <_dtoa_r+0x42>
 8008334:	2010      	movs	r0, #16
 8008336:	f001 f94d 	bl	80095d4 <malloc>
 800833a:	4602      	mov	r2, r0
 800833c:	6260      	str	r0, [r4, #36]	; 0x24
 800833e:	b920      	cbnz	r0, 800834a <_dtoa_r+0x3a>
 8008340:	4ba7      	ldr	r3, [pc, #668]	; (80085e0 <_dtoa_r+0x2d0>)
 8008342:	21ea      	movs	r1, #234	; 0xea
 8008344:	48a7      	ldr	r0, [pc, #668]	; (80085e4 <_dtoa_r+0x2d4>)
 8008346:	f002 f8ad 	bl	800a4a4 <__assert_func>
 800834a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800834e:	6005      	str	r5, [r0, #0]
 8008350:	60c5      	str	r5, [r0, #12]
 8008352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008354:	6819      	ldr	r1, [r3, #0]
 8008356:	b151      	cbz	r1, 800836e <_dtoa_r+0x5e>
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	604a      	str	r2, [r1, #4]
 800835c:	2301      	movs	r3, #1
 800835e:	4093      	lsls	r3, r2
 8008360:	608b      	str	r3, [r1, #8]
 8008362:	4620      	mov	r0, r4
 8008364:	f001 f990 	bl	8009688 <_Bfree>
 8008368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	1e3b      	subs	r3, r7, #0
 8008370:	bfaa      	itet	ge
 8008372:	2300      	movge	r3, #0
 8008374:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008378:	f8c8 3000 	strge.w	r3, [r8]
 800837c:	4b9a      	ldr	r3, [pc, #616]	; (80085e8 <_dtoa_r+0x2d8>)
 800837e:	bfbc      	itt	lt
 8008380:	2201      	movlt	r2, #1
 8008382:	f8c8 2000 	strlt.w	r2, [r8]
 8008386:	ea33 030b 	bics.w	r3, r3, fp
 800838a:	d11b      	bne.n	80083c4 <_dtoa_r+0xb4>
 800838c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800838e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008398:	4333      	orrs	r3, r6
 800839a:	f000 8592 	beq.w	8008ec2 <_dtoa_r+0xbb2>
 800839e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a0:	b963      	cbnz	r3, 80083bc <_dtoa_r+0xac>
 80083a2:	4b92      	ldr	r3, [pc, #584]	; (80085ec <_dtoa_r+0x2dc>)
 80083a4:	e022      	b.n	80083ec <_dtoa_r+0xdc>
 80083a6:	4b92      	ldr	r3, [pc, #584]	; (80085f0 <_dtoa_r+0x2e0>)
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	3308      	adds	r3, #8
 80083ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	9801      	ldr	r0, [sp, #4]
 80083b2:	b013      	add	sp, #76	; 0x4c
 80083b4:	ecbd 8b04 	vpop	{d8-d9}
 80083b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	4b8b      	ldr	r3, [pc, #556]	; (80085ec <_dtoa_r+0x2dc>)
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	3303      	adds	r3, #3
 80083c2:	e7f3      	b.n	80083ac <_dtoa_r+0x9c>
 80083c4:	2200      	movs	r2, #0
 80083c6:	2300      	movs	r3, #0
 80083c8:	4650      	mov	r0, sl
 80083ca:	4659      	mov	r1, fp
 80083cc:	f7f8 fb84 	bl	8000ad8 <__aeabi_dcmpeq>
 80083d0:	ec4b ab19 	vmov	d9, sl, fp
 80083d4:	4680      	mov	r8, r0
 80083d6:	b158      	cbz	r0, 80083f0 <_dtoa_r+0xe0>
 80083d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083da:	2301      	movs	r3, #1
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 856b 	beq.w	8008ebc <_dtoa_r+0xbac>
 80083e6:	4883      	ldr	r0, [pc, #524]	; (80085f4 <_dtoa_r+0x2e4>)
 80083e8:	6018      	str	r0, [r3, #0]
 80083ea:	1e43      	subs	r3, r0, #1
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	e7df      	b.n	80083b0 <_dtoa_r+0xa0>
 80083f0:	ec4b ab10 	vmov	d0, sl, fp
 80083f4:	aa10      	add	r2, sp, #64	; 0x40
 80083f6:	a911      	add	r1, sp, #68	; 0x44
 80083f8:	4620      	mov	r0, r4
 80083fa:	f001 fcf3 	bl	8009de4 <__d2b>
 80083fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008402:	ee08 0a10 	vmov	s16, r0
 8008406:	2d00      	cmp	r5, #0
 8008408:	f000 8084 	beq.w	8008514 <_dtoa_r+0x204>
 800840c:	ee19 3a90 	vmov	r3, s19
 8008410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008414:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008418:	4656      	mov	r6, sl
 800841a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800841e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008422:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008426:	4b74      	ldr	r3, [pc, #464]	; (80085f8 <_dtoa_r+0x2e8>)
 8008428:	2200      	movs	r2, #0
 800842a:	4630      	mov	r0, r6
 800842c:	4639      	mov	r1, r7
 800842e:	f7f7 ff33 	bl	8000298 <__aeabi_dsub>
 8008432:	a365      	add	r3, pc, #404	; (adr r3, 80085c8 <_dtoa_r+0x2b8>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f7f8 f8e6 	bl	8000608 <__aeabi_dmul>
 800843c:	a364      	add	r3, pc, #400	; (adr r3, 80085d0 <_dtoa_r+0x2c0>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f7f7 ff2b 	bl	800029c <__adddf3>
 8008446:	4606      	mov	r6, r0
 8008448:	4628      	mov	r0, r5
 800844a:	460f      	mov	r7, r1
 800844c:	f7f8 f872 	bl	8000534 <__aeabi_i2d>
 8008450:	a361      	add	r3, pc, #388	; (adr r3, 80085d8 <_dtoa_r+0x2c8>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	f7f8 f8d7 	bl	8000608 <__aeabi_dmul>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4630      	mov	r0, r6
 8008460:	4639      	mov	r1, r7
 8008462:	f7f7 ff1b 	bl	800029c <__adddf3>
 8008466:	4606      	mov	r6, r0
 8008468:	460f      	mov	r7, r1
 800846a:	f7f8 fb7d 	bl	8000b68 <__aeabi_d2iz>
 800846e:	2200      	movs	r2, #0
 8008470:	9000      	str	r0, [sp, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	4630      	mov	r0, r6
 8008476:	4639      	mov	r1, r7
 8008478:	f7f8 fb38 	bl	8000aec <__aeabi_dcmplt>
 800847c:	b150      	cbz	r0, 8008494 <_dtoa_r+0x184>
 800847e:	9800      	ldr	r0, [sp, #0]
 8008480:	f7f8 f858 	bl	8000534 <__aeabi_i2d>
 8008484:	4632      	mov	r2, r6
 8008486:	463b      	mov	r3, r7
 8008488:	f7f8 fb26 	bl	8000ad8 <__aeabi_dcmpeq>
 800848c:	b910      	cbnz	r0, 8008494 <_dtoa_r+0x184>
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	3b01      	subs	r3, #1
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	9b00      	ldr	r3, [sp, #0]
 8008496:	2b16      	cmp	r3, #22
 8008498:	d85a      	bhi.n	8008550 <_dtoa_r+0x240>
 800849a:	9a00      	ldr	r2, [sp, #0]
 800849c:	4b57      	ldr	r3, [pc, #348]	; (80085fc <_dtoa_r+0x2ec>)
 800849e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	ec51 0b19 	vmov	r0, r1, d9
 80084aa:	f7f8 fb1f 	bl	8000aec <__aeabi_dcmplt>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d050      	beq.n	8008554 <_dtoa_r+0x244>
 80084b2:	9b00      	ldr	r3, [sp, #0]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	2300      	movs	r3, #0
 80084ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80084bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084be:	1b5d      	subs	r5, r3, r5
 80084c0:	1e6b      	subs	r3, r5, #1
 80084c2:	9305      	str	r3, [sp, #20]
 80084c4:	bf45      	ittet	mi
 80084c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80084ca:	9304      	strmi	r3, [sp, #16]
 80084cc:	2300      	movpl	r3, #0
 80084ce:	2300      	movmi	r3, #0
 80084d0:	bf4c      	ite	mi
 80084d2:	9305      	strmi	r3, [sp, #20]
 80084d4:	9304      	strpl	r3, [sp, #16]
 80084d6:	9b00      	ldr	r3, [sp, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	db3d      	blt.n	8008558 <_dtoa_r+0x248>
 80084dc:	9b05      	ldr	r3, [sp, #20]
 80084de:	9a00      	ldr	r2, [sp, #0]
 80084e0:	920a      	str	r2, [sp, #40]	; 0x28
 80084e2:	4413      	add	r3, r2
 80084e4:	9305      	str	r3, [sp, #20]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9307      	str	r3, [sp, #28]
 80084ea:	9b06      	ldr	r3, [sp, #24]
 80084ec:	2b09      	cmp	r3, #9
 80084ee:	f200 8089 	bhi.w	8008604 <_dtoa_r+0x2f4>
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	bfc4      	itt	gt
 80084f6:	3b04      	subgt	r3, #4
 80084f8:	9306      	strgt	r3, [sp, #24]
 80084fa:	9b06      	ldr	r3, [sp, #24]
 80084fc:	f1a3 0302 	sub.w	r3, r3, #2
 8008500:	bfcc      	ite	gt
 8008502:	2500      	movgt	r5, #0
 8008504:	2501      	movle	r5, #1
 8008506:	2b03      	cmp	r3, #3
 8008508:	f200 8087 	bhi.w	800861a <_dtoa_r+0x30a>
 800850c:	e8df f003 	tbb	[pc, r3]
 8008510:	59383a2d 	.word	0x59383a2d
 8008514:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008518:	441d      	add	r5, r3
 800851a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800851e:	2b20      	cmp	r3, #32
 8008520:	bfc1      	itttt	gt
 8008522:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008526:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800852a:	fa0b f303 	lslgt.w	r3, fp, r3
 800852e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008532:	bfda      	itte	le
 8008534:	f1c3 0320 	rsble	r3, r3, #32
 8008538:	fa06 f003 	lslle.w	r0, r6, r3
 800853c:	4318      	orrgt	r0, r3
 800853e:	f7f7 ffe9 	bl	8000514 <__aeabi_ui2d>
 8008542:	2301      	movs	r3, #1
 8008544:	4606      	mov	r6, r0
 8008546:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800854a:	3d01      	subs	r5, #1
 800854c:	930e      	str	r3, [sp, #56]	; 0x38
 800854e:	e76a      	b.n	8008426 <_dtoa_r+0x116>
 8008550:	2301      	movs	r3, #1
 8008552:	e7b2      	b.n	80084ba <_dtoa_r+0x1aa>
 8008554:	900b      	str	r0, [sp, #44]	; 0x2c
 8008556:	e7b1      	b.n	80084bc <_dtoa_r+0x1ac>
 8008558:	9b04      	ldr	r3, [sp, #16]
 800855a:	9a00      	ldr	r2, [sp, #0]
 800855c:	1a9b      	subs	r3, r3, r2
 800855e:	9304      	str	r3, [sp, #16]
 8008560:	4253      	negs	r3, r2
 8008562:	9307      	str	r3, [sp, #28]
 8008564:	2300      	movs	r3, #0
 8008566:	930a      	str	r3, [sp, #40]	; 0x28
 8008568:	e7bf      	b.n	80084ea <_dtoa_r+0x1da>
 800856a:	2300      	movs	r3, #0
 800856c:	9308      	str	r3, [sp, #32]
 800856e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	dc55      	bgt.n	8008620 <_dtoa_r+0x310>
 8008574:	2301      	movs	r3, #1
 8008576:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800857a:	461a      	mov	r2, r3
 800857c:	9209      	str	r2, [sp, #36]	; 0x24
 800857e:	e00c      	b.n	800859a <_dtoa_r+0x28a>
 8008580:	2301      	movs	r3, #1
 8008582:	e7f3      	b.n	800856c <_dtoa_r+0x25c>
 8008584:	2300      	movs	r3, #0
 8008586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008588:	9308      	str	r3, [sp, #32]
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	4413      	add	r3, r2
 800858e:	9302      	str	r3, [sp, #8]
 8008590:	3301      	adds	r3, #1
 8008592:	2b01      	cmp	r3, #1
 8008594:	9303      	str	r3, [sp, #12]
 8008596:	bfb8      	it	lt
 8008598:	2301      	movlt	r3, #1
 800859a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800859c:	2200      	movs	r2, #0
 800859e:	6042      	str	r2, [r0, #4]
 80085a0:	2204      	movs	r2, #4
 80085a2:	f102 0614 	add.w	r6, r2, #20
 80085a6:	429e      	cmp	r6, r3
 80085a8:	6841      	ldr	r1, [r0, #4]
 80085aa:	d93d      	bls.n	8008628 <_dtoa_r+0x318>
 80085ac:	4620      	mov	r0, r4
 80085ae:	f001 f82b 	bl	8009608 <_Balloc>
 80085b2:	9001      	str	r0, [sp, #4]
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d13b      	bne.n	8008630 <_dtoa_r+0x320>
 80085b8:	4b11      	ldr	r3, [pc, #68]	; (8008600 <_dtoa_r+0x2f0>)
 80085ba:	4602      	mov	r2, r0
 80085bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085c0:	e6c0      	b.n	8008344 <_dtoa_r+0x34>
 80085c2:	2301      	movs	r3, #1
 80085c4:	e7df      	b.n	8008586 <_dtoa_r+0x276>
 80085c6:	bf00      	nop
 80085c8:	636f4361 	.word	0x636f4361
 80085cc:	3fd287a7 	.word	0x3fd287a7
 80085d0:	8b60c8b3 	.word	0x8b60c8b3
 80085d4:	3fc68a28 	.word	0x3fc68a28
 80085d8:	509f79fb 	.word	0x509f79fb
 80085dc:	3fd34413 	.word	0x3fd34413
 80085e0:	0800b4e6 	.word	0x0800b4e6
 80085e4:	0800b4fd 	.word	0x0800b4fd
 80085e8:	7ff00000 	.word	0x7ff00000
 80085ec:	0800b4e2 	.word	0x0800b4e2
 80085f0:	0800b4d9 	.word	0x0800b4d9
 80085f4:	0800b359 	.word	0x0800b359
 80085f8:	3ff80000 	.word	0x3ff80000
 80085fc:	0800b668 	.word	0x0800b668
 8008600:	0800b558 	.word	0x0800b558
 8008604:	2501      	movs	r5, #1
 8008606:	2300      	movs	r3, #0
 8008608:	9306      	str	r3, [sp, #24]
 800860a:	9508      	str	r5, [sp, #32]
 800860c:	f04f 33ff 	mov.w	r3, #4294967295
 8008610:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008614:	2200      	movs	r2, #0
 8008616:	2312      	movs	r3, #18
 8008618:	e7b0      	b.n	800857c <_dtoa_r+0x26c>
 800861a:	2301      	movs	r3, #1
 800861c:	9308      	str	r3, [sp, #32]
 800861e:	e7f5      	b.n	800860c <_dtoa_r+0x2fc>
 8008620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008622:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008626:	e7b8      	b.n	800859a <_dtoa_r+0x28a>
 8008628:	3101      	adds	r1, #1
 800862a:	6041      	str	r1, [r0, #4]
 800862c:	0052      	lsls	r2, r2, #1
 800862e:	e7b8      	b.n	80085a2 <_dtoa_r+0x292>
 8008630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008632:	9a01      	ldr	r2, [sp, #4]
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	9b03      	ldr	r3, [sp, #12]
 8008638:	2b0e      	cmp	r3, #14
 800863a:	f200 809d 	bhi.w	8008778 <_dtoa_r+0x468>
 800863e:	2d00      	cmp	r5, #0
 8008640:	f000 809a 	beq.w	8008778 <_dtoa_r+0x468>
 8008644:	9b00      	ldr	r3, [sp, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	dd32      	ble.n	80086b0 <_dtoa_r+0x3a0>
 800864a:	4ab7      	ldr	r2, [pc, #732]	; (8008928 <_dtoa_r+0x618>)
 800864c:	f003 030f 	and.w	r3, r3, #15
 8008650:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008654:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008658:	9b00      	ldr	r3, [sp, #0]
 800865a:	05d8      	lsls	r0, r3, #23
 800865c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008660:	d516      	bpl.n	8008690 <_dtoa_r+0x380>
 8008662:	4bb2      	ldr	r3, [pc, #712]	; (800892c <_dtoa_r+0x61c>)
 8008664:	ec51 0b19 	vmov	r0, r1, d9
 8008668:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800866c:	f7f8 f8f6 	bl	800085c <__aeabi_ddiv>
 8008670:	f007 070f 	and.w	r7, r7, #15
 8008674:	4682      	mov	sl, r0
 8008676:	468b      	mov	fp, r1
 8008678:	2503      	movs	r5, #3
 800867a:	4eac      	ldr	r6, [pc, #688]	; (800892c <_dtoa_r+0x61c>)
 800867c:	b957      	cbnz	r7, 8008694 <_dtoa_r+0x384>
 800867e:	4642      	mov	r2, r8
 8008680:	464b      	mov	r3, r9
 8008682:	4650      	mov	r0, sl
 8008684:	4659      	mov	r1, fp
 8008686:	f7f8 f8e9 	bl	800085c <__aeabi_ddiv>
 800868a:	4682      	mov	sl, r0
 800868c:	468b      	mov	fp, r1
 800868e:	e028      	b.n	80086e2 <_dtoa_r+0x3d2>
 8008690:	2502      	movs	r5, #2
 8008692:	e7f2      	b.n	800867a <_dtoa_r+0x36a>
 8008694:	07f9      	lsls	r1, r7, #31
 8008696:	d508      	bpl.n	80086aa <_dtoa_r+0x39a>
 8008698:	4640      	mov	r0, r8
 800869a:	4649      	mov	r1, r9
 800869c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086a0:	f7f7 ffb2 	bl	8000608 <__aeabi_dmul>
 80086a4:	3501      	adds	r5, #1
 80086a6:	4680      	mov	r8, r0
 80086a8:	4689      	mov	r9, r1
 80086aa:	107f      	asrs	r7, r7, #1
 80086ac:	3608      	adds	r6, #8
 80086ae:	e7e5      	b.n	800867c <_dtoa_r+0x36c>
 80086b0:	f000 809b 	beq.w	80087ea <_dtoa_r+0x4da>
 80086b4:	9b00      	ldr	r3, [sp, #0]
 80086b6:	4f9d      	ldr	r7, [pc, #628]	; (800892c <_dtoa_r+0x61c>)
 80086b8:	425e      	negs	r6, r3
 80086ba:	4b9b      	ldr	r3, [pc, #620]	; (8008928 <_dtoa_r+0x618>)
 80086bc:	f006 020f 	and.w	r2, r6, #15
 80086c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	ec51 0b19 	vmov	r0, r1, d9
 80086cc:	f7f7 ff9c 	bl	8000608 <__aeabi_dmul>
 80086d0:	1136      	asrs	r6, r6, #4
 80086d2:	4682      	mov	sl, r0
 80086d4:	468b      	mov	fp, r1
 80086d6:	2300      	movs	r3, #0
 80086d8:	2502      	movs	r5, #2
 80086da:	2e00      	cmp	r6, #0
 80086dc:	d17a      	bne.n	80087d4 <_dtoa_r+0x4c4>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1d3      	bne.n	800868a <_dtoa_r+0x37a>
 80086e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8082 	beq.w	80087ee <_dtoa_r+0x4de>
 80086ea:	4b91      	ldr	r3, [pc, #580]	; (8008930 <_dtoa_r+0x620>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	4650      	mov	r0, sl
 80086f0:	4659      	mov	r1, fp
 80086f2:	f7f8 f9fb 	bl	8000aec <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d079      	beq.n	80087ee <_dtoa_r+0x4de>
 80086fa:	9b03      	ldr	r3, [sp, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d076      	beq.n	80087ee <_dtoa_r+0x4de>
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	dd36      	ble.n	8008774 <_dtoa_r+0x464>
 8008706:	9b00      	ldr	r3, [sp, #0]
 8008708:	4650      	mov	r0, sl
 800870a:	4659      	mov	r1, fp
 800870c:	1e5f      	subs	r7, r3, #1
 800870e:	2200      	movs	r2, #0
 8008710:	4b88      	ldr	r3, [pc, #544]	; (8008934 <_dtoa_r+0x624>)
 8008712:	f7f7 ff79 	bl	8000608 <__aeabi_dmul>
 8008716:	9e02      	ldr	r6, [sp, #8]
 8008718:	4682      	mov	sl, r0
 800871a:	468b      	mov	fp, r1
 800871c:	3501      	adds	r5, #1
 800871e:	4628      	mov	r0, r5
 8008720:	f7f7 ff08 	bl	8000534 <__aeabi_i2d>
 8008724:	4652      	mov	r2, sl
 8008726:	465b      	mov	r3, fp
 8008728:	f7f7 ff6e 	bl	8000608 <__aeabi_dmul>
 800872c:	4b82      	ldr	r3, [pc, #520]	; (8008938 <_dtoa_r+0x628>)
 800872e:	2200      	movs	r2, #0
 8008730:	f7f7 fdb4 	bl	800029c <__adddf3>
 8008734:	46d0      	mov	r8, sl
 8008736:	46d9      	mov	r9, fp
 8008738:	4682      	mov	sl, r0
 800873a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800873e:	2e00      	cmp	r6, #0
 8008740:	d158      	bne.n	80087f4 <_dtoa_r+0x4e4>
 8008742:	4b7e      	ldr	r3, [pc, #504]	; (800893c <_dtoa_r+0x62c>)
 8008744:	2200      	movs	r2, #0
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	f7f7 fda5 	bl	8000298 <__aeabi_dsub>
 800874e:	4652      	mov	r2, sl
 8008750:	465b      	mov	r3, fp
 8008752:	4680      	mov	r8, r0
 8008754:	4689      	mov	r9, r1
 8008756:	f7f8 f9e7 	bl	8000b28 <__aeabi_dcmpgt>
 800875a:	2800      	cmp	r0, #0
 800875c:	f040 8295 	bne.w	8008c8a <_dtoa_r+0x97a>
 8008760:	4652      	mov	r2, sl
 8008762:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	f7f8 f9bf 	bl	8000aec <__aeabi_dcmplt>
 800876e:	2800      	cmp	r0, #0
 8008770:	f040 8289 	bne.w	8008c86 <_dtoa_r+0x976>
 8008774:	ec5b ab19 	vmov	sl, fp, d9
 8008778:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800877a:	2b00      	cmp	r3, #0
 800877c:	f2c0 8148 	blt.w	8008a10 <_dtoa_r+0x700>
 8008780:	9a00      	ldr	r2, [sp, #0]
 8008782:	2a0e      	cmp	r2, #14
 8008784:	f300 8144 	bgt.w	8008a10 <_dtoa_r+0x700>
 8008788:	4b67      	ldr	r3, [pc, #412]	; (8008928 <_dtoa_r+0x618>)
 800878a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800878e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	f280 80d5 	bge.w	8008944 <_dtoa_r+0x634>
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	f300 80d1 	bgt.w	8008944 <_dtoa_r+0x634>
 80087a2:	f040 826f 	bne.w	8008c84 <_dtoa_r+0x974>
 80087a6:	4b65      	ldr	r3, [pc, #404]	; (800893c <_dtoa_r+0x62c>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	f7f7 ff2b 	bl	8000608 <__aeabi_dmul>
 80087b2:	4652      	mov	r2, sl
 80087b4:	465b      	mov	r3, fp
 80087b6:	f7f8 f9ad 	bl	8000b14 <__aeabi_dcmpge>
 80087ba:	9e03      	ldr	r6, [sp, #12]
 80087bc:	4637      	mov	r7, r6
 80087be:	2800      	cmp	r0, #0
 80087c0:	f040 8245 	bne.w	8008c4e <_dtoa_r+0x93e>
 80087c4:	9d01      	ldr	r5, [sp, #4]
 80087c6:	2331      	movs	r3, #49	; 0x31
 80087c8:	f805 3b01 	strb.w	r3, [r5], #1
 80087cc:	9b00      	ldr	r3, [sp, #0]
 80087ce:	3301      	adds	r3, #1
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	e240      	b.n	8008c56 <_dtoa_r+0x946>
 80087d4:	07f2      	lsls	r2, r6, #31
 80087d6:	d505      	bpl.n	80087e4 <_dtoa_r+0x4d4>
 80087d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087dc:	f7f7 ff14 	bl	8000608 <__aeabi_dmul>
 80087e0:	3501      	adds	r5, #1
 80087e2:	2301      	movs	r3, #1
 80087e4:	1076      	asrs	r6, r6, #1
 80087e6:	3708      	adds	r7, #8
 80087e8:	e777      	b.n	80086da <_dtoa_r+0x3ca>
 80087ea:	2502      	movs	r5, #2
 80087ec:	e779      	b.n	80086e2 <_dtoa_r+0x3d2>
 80087ee:	9f00      	ldr	r7, [sp, #0]
 80087f0:	9e03      	ldr	r6, [sp, #12]
 80087f2:	e794      	b.n	800871e <_dtoa_r+0x40e>
 80087f4:	9901      	ldr	r1, [sp, #4]
 80087f6:	4b4c      	ldr	r3, [pc, #304]	; (8008928 <_dtoa_r+0x618>)
 80087f8:	4431      	add	r1, r6
 80087fa:	910d      	str	r1, [sp, #52]	; 0x34
 80087fc:	9908      	ldr	r1, [sp, #32]
 80087fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008802:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008806:	2900      	cmp	r1, #0
 8008808:	d043      	beq.n	8008892 <_dtoa_r+0x582>
 800880a:	494d      	ldr	r1, [pc, #308]	; (8008940 <_dtoa_r+0x630>)
 800880c:	2000      	movs	r0, #0
 800880e:	f7f8 f825 	bl	800085c <__aeabi_ddiv>
 8008812:	4652      	mov	r2, sl
 8008814:	465b      	mov	r3, fp
 8008816:	f7f7 fd3f 	bl	8000298 <__aeabi_dsub>
 800881a:	9d01      	ldr	r5, [sp, #4]
 800881c:	4682      	mov	sl, r0
 800881e:	468b      	mov	fp, r1
 8008820:	4649      	mov	r1, r9
 8008822:	4640      	mov	r0, r8
 8008824:	f7f8 f9a0 	bl	8000b68 <__aeabi_d2iz>
 8008828:	4606      	mov	r6, r0
 800882a:	f7f7 fe83 	bl	8000534 <__aeabi_i2d>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4640      	mov	r0, r8
 8008834:	4649      	mov	r1, r9
 8008836:	f7f7 fd2f 	bl	8000298 <__aeabi_dsub>
 800883a:	3630      	adds	r6, #48	; 0x30
 800883c:	f805 6b01 	strb.w	r6, [r5], #1
 8008840:	4652      	mov	r2, sl
 8008842:	465b      	mov	r3, fp
 8008844:	4680      	mov	r8, r0
 8008846:	4689      	mov	r9, r1
 8008848:	f7f8 f950 	bl	8000aec <__aeabi_dcmplt>
 800884c:	2800      	cmp	r0, #0
 800884e:	d163      	bne.n	8008918 <_dtoa_r+0x608>
 8008850:	4642      	mov	r2, r8
 8008852:	464b      	mov	r3, r9
 8008854:	4936      	ldr	r1, [pc, #216]	; (8008930 <_dtoa_r+0x620>)
 8008856:	2000      	movs	r0, #0
 8008858:	f7f7 fd1e 	bl	8000298 <__aeabi_dsub>
 800885c:	4652      	mov	r2, sl
 800885e:	465b      	mov	r3, fp
 8008860:	f7f8 f944 	bl	8000aec <__aeabi_dcmplt>
 8008864:	2800      	cmp	r0, #0
 8008866:	f040 80b5 	bne.w	80089d4 <_dtoa_r+0x6c4>
 800886a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800886c:	429d      	cmp	r5, r3
 800886e:	d081      	beq.n	8008774 <_dtoa_r+0x464>
 8008870:	4b30      	ldr	r3, [pc, #192]	; (8008934 <_dtoa_r+0x624>)
 8008872:	2200      	movs	r2, #0
 8008874:	4650      	mov	r0, sl
 8008876:	4659      	mov	r1, fp
 8008878:	f7f7 fec6 	bl	8000608 <__aeabi_dmul>
 800887c:	4b2d      	ldr	r3, [pc, #180]	; (8008934 <_dtoa_r+0x624>)
 800887e:	4682      	mov	sl, r0
 8008880:	468b      	mov	fp, r1
 8008882:	4640      	mov	r0, r8
 8008884:	4649      	mov	r1, r9
 8008886:	2200      	movs	r2, #0
 8008888:	f7f7 febe 	bl	8000608 <__aeabi_dmul>
 800888c:	4680      	mov	r8, r0
 800888e:	4689      	mov	r9, r1
 8008890:	e7c6      	b.n	8008820 <_dtoa_r+0x510>
 8008892:	4650      	mov	r0, sl
 8008894:	4659      	mov	r1, fp
 8008896:	f7f7 feb7 	bl	8000608 <__aeabi_dmul>
 800889a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800889c:	9d01      	ldr	r5, [sp, #4]
 800889e:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a0:	4682      	mov	sl, r0
 80088a2:	468b      	mov	fp, r1
 80088a4:	4649      	mov	r1, r9
 80088a6:	4640      	mov	r0, r8
 80088a8:	f7f8 f95e 	bl	8000b68 <__aeabi_d2iz>
 80088ac:	4606      	mov	r6, r0
 80088ae:	f7f7 fe41 	bl	8000534 <__aeabi_i2d>
 80088b2:	3630      	adds	r6, #48	; 0x30
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4640      	mov	r0, r8
 80088ba:	4649      	mov	r1, r9
 80088bc:	f7f7 fcec 	bl	8000298 <__aeabi_dsub>
 80088c0:	f805 6b01 	strb.w	r6, [r5], #1
 80088c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088c6:	429d      	cmp	r5, r3
 80088c8:	4680      	mov	r8, r0
 80088ca:	4689      	mov	r9, r1
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	d124      	bne.n	800891c <_dtoa_r+0x60c>
 80088d2:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <_dtoa_r+0x630>)
 80088d4:	4650      	mov	r0, sl
 80088d6:	4659      	mov	r1, fp
 80088d8:	f7f7 fce0 	bl	800029c <__adddf3>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4640      	mov	r0, r8
 80088e2:	4649      	mov	r1, r9
 80088e4:	f7f8 f920 	bl	8000b28 <__aeabi_dcmpgt>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d173      	bne.n	80089d4 <_dtoa_r+0x6c4>
 80088ec:	4652      	mov	r2, sl
 80088ee:	465b      	mov	r3, fp
 80088f0:	4913      	ldr	r1, [pc, #76]	; (8008940 <_dtoa_r+0x630>)
 80088f2:	2000      	movs	r0, #0
 80088f4:	f7f7 fcd0 	bl	8000298 <__aeabi_dsub>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4640      	mov	r0, r8
 80088fe:	4649      	mov	r1, r9
 8008900:	f7f8 f8f4 	bl	8000aec <__aeabi_dcmplt>
 8008904:	2800      	cmp	r0, #0
 8008906:	f43f af35 	beq.w	8008774 <_dtoa_r+0x464>
 800890a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800890c:	1e6b      	subs	r3, r5, #1
 800890e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008910:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008914:	2b30      	cmp	r3, #48	; 0x30
 8008916:	d0f8      	beq.n	800890a <_dtoa_r+0x5fa>
 8008918:	9700      	str	r7, [sp, #0]
 800891a:	e049      	b.n	80089b0 <_dtoa_r+0x6a0>
 800891c:	4b05      	ldr	r3, [pc, #20]	; (8008934 <_dtoa_r+0x624>)
 800891e:	f7f7 fe73 	bl	8000608 <__aeabi_dmul>
 8008922:	4680      	mov	r8, r0
 8008924:	4689      	mov	r9, r1
 8008926:	e7bd      	b.n	80088a4 <_dtoa_r+0x594>
 8008928:	0800b668 	.word	0x0800b668
 800892c:	0800b640 	.word	0x0800b640
 8008930:	3ff00000 	.word	0x3ff00000
 8008934:	40240000 	.word	0x40240000
 8008938:	401c0000 	.word	0x401c0000
 800893c:	40140000 	.word	0x40140000
 8008940:	3fe00000 	.word	0x3fe00000
 8008944:	9d01      	ldr	r5, [sp, #4]
 8008946:	4656      	mov	r6, sl
 8008948:	465f      	mov	r7, fp
 800894a:	4642      	mov	r2, r8
 800894c:	464b      	mov	r3, r9
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f7 ff83 	bl	800085c <__aeabi_ddiv>
 8008956:	f7f8 f907 	bl	8000b68 <__aeabi_d2iz>
 800895a:	4682      	mov	sl, r0
 800895c:	f7f7 fdea 	bl	8000534 <__aeabi_i2d>
 8008960:	4642      	mov	r2, r8
 8008962:	464b      	mov	r3, r9
 8008964:	f7f7 fe50 	bl	8000608 <__aeabi_dmul>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4630      	mov	r0, r6
 800896e:	4639      	mov	r1, r7
 8008970:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008974:	f7f7 fc90 	bl	8000298 <__aeabi_dsub>
 8008978:	f805 6b01 	strb.w	r6, [r5], #1
 800897c:	9e01      	ldr	r6, [sp, #4]
 800897e:	9f03      	ldr	r7, [sp, #12]
 8008980:	1bae      	subs	r6, r5, r6
 8008982:	42b7      	cmp	r7, r6
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	d135      	bne.n	80089f6 <_dtoa_r+0x6e6>
 800898a:	f7f7 fc87 	bl	800029c <__adddf3>
 800898e:	4642      	mov	r2, r8
 8008990:	464b      	mov	r3, r9
 8008992:	4606      	mov	r6, r0
 8008994:	460f      	mov	r7, r1
 8008996:	f7f8 f8c7 	bl	8000b28 <__aeabi_dcmpgt>
 800899a:	b9d0      	cbnz	r0, 80089d2 <_dtoa_r+0x6c2>
 800899c:	4642      	mov	r2, r8
 800899e:	464b      	mov	r3, r9
 80089a0:	4630      	mov	r0, r6
 80089a2:	4639      	mov	r1, r7
 80089a4:	f7f8 f898 	bl	8000ad8 <__aeabi_dcmpeq>
 80089a8:	b110      	cbz	r0, 80089b0 <_dtoa_r+0x6a0>
 80089aa:	f01a 0f01 	tst.w	sl, #1
 80089ae:	d110      	bne.n	80089d2 <_dtoa_r+0x6c2>
 80089b0:	4620      	mov	r0, r4
 80089b2:	ee18 1a10 	vmov	r1, s16
 80089b6:	f000 fe67 	bl	8009688 <_Bfree>
 80089ba:	2300      	movs	r3, #0
 80089bc:	9800      	ldr	r0, [sp, #0]
 80089be:	702b      	strb	r3, [r5, #0]
 80089c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089c2:	3001      	adds	r0, #1
 80089c4:	6018      	str	r0, [r3, #0]
 80089c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f43f acf1 	beq.w	80083b0 <_dtoa_r+0xa0>
 80089ce:	601d      	str	r5, [r3, #0]
 80089d0:	e4ee      	b.n	80083b0 <_dtoa_r+0xa0>
 80089d2:	9f00      	ldr	r7, [sp, #0]
 80089d4:	462b      	mov	r3, r5
 80089d6:	461d      	mov	r5, r3
 80089d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089dc:	2a39      	cmp	r2, #57	; 0x39
 80089de:	d106      	bne.n	80089ee <_dtoa_r+0x6de>
 80089e0:	9a01      	ldr	r2, [sp, #4]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d1f7      	bne.n	80089d6 <_dtoa_r+0x6c6>
 80089e6:	9901      	ldr	r1, [sp, #4]
 80089e8:	2230      	movs	r2, #48	; 0x30
 80089ea:	3701      	adds	r7, #1
 80089ec:	700a      	strb	r2, [r1, #0]
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	3201      	adds	r2, #1
 80089f2:	701a      	strb	r2, [r3, #0]
 80089f4:	e790      	b.n	8008918 <_dtoa_r+0x608>
 80089f6:	4ba6      	ldr	r3, [pc, #664]	; (8008c90 <_dtoa_r+0x980>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	f7f7 fe05 	bl	8000608 <__aeabi_dmul>
 80089fe:	2200      	movs	r2, #0
 8008a00:	2300      	movs	r3, #0
 8008a02:	4606      	mov	r6, r0
 8008a04:	460f      	mov	r7, r1
 8008a06:	f7f8 f867 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d09d      	beq.n	800894a <_dtoa_r+0x63a>
 8008a0e:	e7cf      	b.n	80089b0 <_dtoa_r+0x6a0>
 8008a10:	9a08      	ldr	r2, [sp, #32]
 8008a12:	2a00      	cmp	r2, #0
 8008a14:	f000 80d7 	beq.w	8008bc6 <_dtoa_r+0x8b6>
 8008a18:	9a06      	ldr	r2, [sp, #24]
 8008a1a:	2a01      	cmp	r2, #1
 8008a1c:	f300 80ba 	bgt.w	8008b94 <_dtoa_r+0x884>
 8008a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	f000 80b2 	beq.w	8008b8c <_dtoa_r+0x87c>
 8008a28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a2c:	9e07      	ldr	r6, [sp, #28]
 8008a2e:	9d04      	ldr	r5, [sp, #16]
 8008a30:	9a04      	ldr	r2, [sp, #16]
 8008a32:	441a      	add	r2, r3
 8008a34:	9204      	str	r2, [sp, #16]
 8008a36:	9a05      	ldr	r2, [sp, #20]
 8008a38:	2101      	movs	r1, #1
 8008a3a:	441a      	add	r2, r3
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	9205      	str	r2, [sp, #20]
 8008a40:	f000 ff24 	bl	800988c <__i2b>
 8008a44:	4607      	mov	r7, r0
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	dd0c      	ble.n	8008a64 <_dtoa_r+0x754>
 8008a4a:	9b05      	ldr	r3, [sp, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dd09      	ble.n	8008a64 <_dtoa_r+0x754>
 8008a50:	42ab      	cmp	r3, r5
 8008a52:	9a04      	ldr	r2, [sp, #16]
 8008a54:	bfa8      	it	ge
 8008a56:	462b      	movge	r3, r5
 8008a58:	1ad2      	subs	r2, r2, r3
 8008a5a:	9204      	str	r2, [sp, #16]
 8008a5c:	9a05      	ldr	r2, [sp, #20]
 8008a5e:	1aed      	subs	r5, r5, r3
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	9305      	str	r3, [sp, #20]
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	b31b      	cbz	r3, 8008ab0 <_dtoa_r+0x7a0>
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80af 	beq.w	8008bce <_dtoa_r+0x8be>
 8008a70:	2e00      	cmp	r6, #0
 8008a72:	dd13      	ble.n	8008a9c <_dtoa_r+0x78c>
 8008a74:	4639      	mov	r1, r7
 8008a76:	4632      	mov	r2, r6
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f000 ffc7 	bl	8009a0c <__pow5mult>
 8008a7e:	ee18 2a10 	vmov	r2, s16
 8008a82:	4601      	mov	r1, r0
 8008a84:	4607      	mov	r7, r0
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 ff16 	bl	80098b8 <__multiply>
 8008a8c:	ee18 1a10 	vmov	r1, s16
 8008a90:	4680      	mov	r8, r0
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 fdf8 	bl	8009688 <_Bfree>
 8008a98:	ee08 8a10 	vmov	s16, r8
 8008a9c:	9b07      	ldr	r3, [sp, #28]
 8008a9e:	1b9a      	subs	r2, r3, r6
 8008aa0:	d006      	beq.n	8008ab0 <_dtoa_r+0x7a0>
 8008aa2:	ee18 1a10 	vmov	r1, s16
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 ffb0 	bl	8009a0c <__pow5mult>
 8008aac:	ee08 0a10 	vmov	s16, r0
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 feea 	bl	800988c <__i2b>
 8008ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	4606      	mov	r6, r0
 8008abe:	f340 8088 	ble.w	8008bd2 <_dtoa_r+0x8c2>
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 ffa0 	bl	8009a0c <__pow5mult>
 8008acc:	9b06      	ldr	r3, [sp, #24]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	f340 8081 	ble.w	8008bd8 <_dtoa_r+0x8c8>
 8008ad6:	f04f 0800 	mov.w	r8, #0
 8008ada:	6933      	ldr	r3, [r6, #16]
 8008adc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ae0:	6918      	ldr	r0, [r3, #16]
 8008ae2:	f000 fe83 	bl	80097ec <__hi0bits>
 8008ae6:	f1c0 0020 	rsb	r0, r0, #32
 8008aea:	9b05      	ldr	r3, [sp, #20]
 8008aec:	4418      	add	r0, r3
 8008aee:	f010 001f 	ands.w	r0, r0, #31
 8008af2:	f000 8092 	beq.w	8008c1a <_dtoa_r+0x90a>
 8008af6:	f1c0 0320 	rsb	r3, r0, #32
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	f340 808a 	ble.w	8008c14 <_dtoa_r+0x904>
 8008b00:	f1c0 001c 	rsb	r0, r0, #28
 8008b04:	9b04      	ldr	r3, [sp, #16]
 8008b06:	4403      	add	r3, r0
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	9b05      	ldr	r3, [sp, #20]
 8008b0c:	4403      	add	r3, r0
 8008b0e:	4405      	add	r5, r0
 8008b10:	9305      	str	r3, [sp, #20]
 8008b12:	9b04      	ldr	r3, [sp, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	dd07      	ble.n	8008b28 <_dtoa_r+0x818>
 8008b18:	ee18 1a10 	vmov	r1, s16
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f000 ffce 	bl	8009ac0 <__lshift>
 8008b24:	ee08 0a10 	vmov	s16, r0
 8008b28:	9b05      	ldr	r3, [sp, #20]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	dd05      	ble.n	8008b3a <_dtoa_r+0x82a>
 8008b2e:	4631      	mov	r1, r6
 8008b30:	461a      	mov	r2, r3
 8008b32:	4620      	mov	r0, r4
 8008b34:	f000 ffc4 	bl	8009ac0 <__lshift>
 8008b38:	4606      	mov	r6, r0
 8008b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d06e      	beq.n	8008c1e <_dtoa_r+0x90e>
 8008b40:	ee18 0a10 	vmov	r0, s16
 8008b44:	4631      	mov	r1, r6
 8008b46:	f001 f82b 	bl	8009ba0 <__mcmp>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	da67      	bge.n	8008c1e <_dtoa_r+0x90e>
 8008b4e:	9b00      	ldr	r3, [sp, #0]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	ee18 1a10 	vmov	r1, s16
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	220a      	movs	r2, #10
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 fdb5 	bl	80096cc <__multadd>
 8008b62:	9b08      	ldr	r3, [sp, #32]
 8008b64:	ee08 0a10 	vmov	s16, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 81b1 	beq.w	8008ed0 <_dtoa_r+0xbc0>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	4639      	mov	r1, r7
 8008b72:	220a      	movs	r2, #10
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 fda9 	bl	80096cc <__multadd>
 8008b7a:	9b02      	ldr	r3, [sp, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	4607      	mov	r7, r0
 8008b80:	f300 808e 	bgt.w	8008ca0 <_dtoa_r+0x990>
 8008b84:	9b06      	ldr	r3, [sp, #24]
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	dc51      	bgt.n	8008c2e <_dtoa_r+0x91e>
 8008b8a:	e089      	b.n	8008ca0 <_dtoa_r+0x990>
 8008b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b92:	e74b      	b.n	8008a2c <_dtoa_r+0x71c>
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	1e5e      	subs	r6, r3, #1
 8008b98:	9b07      	ldr	r3, [sp, #28]
 8008b9a:	42b3      	cmp	r3, r6
 8008b9c:	bfbf      	itttt	lt
 8008b9e:	9b07      	ldrlt	r3, [sp, #28]
 8008ba0:	9607      	strlt	r6, [sp, #28]
 8008ba2:	1af2      	sublt	r2, r6, r3
 8008ba4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ba6:	bfb6      	itet	lt
 8008ba8:	189b      	addlt	r3, r3, r2
 8008baa:	1b9e      	subge	r6, r3, r6
 8008bac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	bfb8      	it	lt
 8008bb2:	2600      	movlt	r6, #0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bfb7      	itett	lt
 8008bb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008bbc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008bc0:	1a9d      	sublt	r5, r3, r2
 8008bc2:	2300      	movlt	r3, #0
 8008bc4:	e734      	b.n	8008a30 <_dtoa_r+0x720>
 8008bc6:	9e07      	ldr	r6, [sp, #28]
 8008bc8:	9d04      	ldr	r5, [sp, #16]
 8008bca:	9f08      	ldr	r7, [sp, #32]
 8008bcc:	e73b      	b.n	8008a46 <_dtoa_r+0x736>
 8008bce:	9a07      	ldr	r2, [sp, #28]
 8008bd0:	e767      	b.n	8008aa2 <_dtoa_r+0x792>
 8008bd2:	9b06      	ldr	r3, [sp, #24]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	dc18      	bgt.n	8008c0a <_dtoa_r+0x8fa>
 8008bd8:	f1ba 0f00 	cmp.w	sl, #0
 8008bdc:	d115      	bne.n	8008c0a <_dtoa_r+0x8fa>
 8008bde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008be2:	b993      	cbnz	r3, 8008c0a <_dtoa_r+0x8fa>
 8008be4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008be8:	0d1b      	lsrs	r3, r3, #20
 8008bea:	051b      	lsls	r3, r3, #20
 8008bec:	b183      	cbz	r3, 8008c10 <_dtoa_r+0x900>
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	9b05      	ldr	r3, [sp, #20]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	9305      	str	r3, [sp, #20]
 8008bfa:	f04f 0801 	mov.w	r8, #1
 8008bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f47f af6a 	bne.w	8008ada <_dtoa_r+0x7ca>
 8008c06:	2001      	movs	r0, #1
 8008c08:	e76f      	b.n	8008aea <_dtoa_r+0x7da>
 8008c0a:	f04f 0800 	mov.w	r8, #0
 8008c0e:	e7f6      	b.n	8008bfe <_dtoa_r+0x8ee>
 8008c10:	4698      	mov	r8, r3
 8008c12:	e7f4      	b.n	8008bfe <_dtoa_r+0x8ee>
 8008c14:	f43f af7d 	beq.w	8008b12 <_dtoa_r+0x802>
 8008c18:	4618      	mov	r0, r3
 8008c1a:	301c      	adds	r0, #28
 8008c1c:	e772      	b.n	8008b04 <_dtoa_r+0x7f4>
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	dc37      	bgt.n	8008c94 <_dtoa_r+0x984>
 8008c24:	9b06      	ldr	r3, [sp, #24]
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	dd34      	ble.n	8008c94 <_dtoa_r+0x984>
 8008c2a:	9b03      	ldr	r3, [sp, #12]
 8008c2c:	9302      	str	r3, [sp, #8]
 8008c2e:	9b02      	ldr	r3, [sp, #8]
 8008c30:	b96b      	cbnz	r3, 8008c4e <_dtoa_r+0x93e>
 8008c32:	4631      	mov	r1, r6
 8008c34:	2205      	movs	r2, #5
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 fd48 	bl	80096cc <__multadd>
 8008c3c:	4601      	mov	r1, r0
 8008c3e:	4606      	mov	r6, r0
 8008c40:	ee18 0a10 	vmov	r0, s16
 8008c44:	f000 ffac 	bl	8009ba0 <__mcmp>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f73f adbb 	bgt.w	80087c4 <_dtoa_r+0x4b4>
 8008c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c50:	9d01      	ldr	r5, [sp, #4]
 8008c52:	43db      	mvns	r3, r3
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	f04f 0800 	mov.w	r8, #0
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 fd13 	bl	8009688 <_Bfree>
 8008c62:	2f00      	cmp	r7, #0
 8008c64:	f43f aea4 	beq.w	80089b0 <_dtoa_r+0x6a0>
 8008c68:	f1b8 0f00 	cmp.w	r8, #0
 8008c6c:	d005      	beq.n	8008c7a <_dtoa_r+0x96a>
 8008c6e:	45b8      	cmp	r8, r7
 8008c70:	d003      	beq.n	8008c7a <_dtoa_r+0x96a>
 8008c72:	4641      	mov	r1, r8
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fd07 	bl	8009688 <_Bfree>
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 fd03 	bl	8009688 <_Bfree>
 8008c82:	e695      	b.n	80089b0 <_dtoa_r+0x6a0>
 8008c84:	2600      	movs	r6, #0
 8008c86:	4637      	mov	r7, r6
 8008c88:	e7e1      	b.n	8008c4e <_dtoa_r+0x93e>
 8008c8a:	9700      	str	r7, [sp, #0]
 8008c8c:	4637      	mov	r7, r6
 8008c8e:	e599      	b.n	80087c4 <_dtoa_r+0x4b4>
 8008c90:	40240000 	.word	0x40240000
 8008c94:	9b08      	ldr	r3, [sp, #32]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 80ca 	beq.w	8008e30 <_dtoa_r+0xb20>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	9302      	str	r3, [sp, #8]
 8008ca0:	2d00      	cmp	r5, #0
 8008ca2:	dd05      	ble.n	8008cb0 <_dtoa_r+0x9a0>
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 ff09 	bl	8009ac0 <__lshift>
 8008cae:	4607      	mov	r7, r0
 8008cb0:	f1b8 0f00 	cmp.w	r8, #0
 8008cb4:	d05b      	beq.n	8008d6e <_dtoa_r+0xa5e>
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fca5 	bl	8009608 <_Balloc>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	b928      	cbnz	r0, 8008cce <_dtoa_r+0x9be>
 8008cc2:	4b87      	ldr	r3, [pc, #540]	; (8008ee0 <_dtoa_r+0xbd0>)
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cca:	f7ff bb3b 	b.w	8008344 <_dtoa_r+0x34>
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	3202      	adds	r2, #2
 8008cd2:	0092      	lsls	r2, r2, #2
 8008cd4:	f107 010c 	add.w	r1, r7, #12
 8008cd8:	300c      	adds	r0, #12
 8008cda:	f7fd fd29 	bl	8006730 <memcpy>
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 feec 	bl	8009ac0 <__lshift>
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	f103 0901 	add.w	r9, r3, #1
 8008cee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	9305      	str	r3, [sp, #20]
 8008cf6:	f00a 0301 	and.w	r3, sl, #1
 8008cfa:	46b8      	mov	r8, r7
 8008cfc:	9304      	str	r3, [sp, #16]
 8008cfe:	4607      	mov	r7, r0
 8008d00:	4631      	mov	r1, r6
 8008d02:	ee18 0a10 	vmov	r0, s16
 8008d06:	f7ff fa77 	bl	80081f8 <quorem>
 8008d0a:	4641      	mov	r1, r8
 8008d0c:	9002      	str	r0, [sp, #8]
 8008d0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d12:	ee18 0a10 	vmov	r0, s16
 8008d16:	f000 ff43 	bl	8009ba0 <__mcmp>
 8008d1a:	463a      	mov	r2, r7
 8008d1c:	9003      	str	r0, [sp, #12]
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 ff59 	bl	8009bd8 <__mdiff>
 8008d26:	68c2      	ldr	r2, [r0, #12]
 8008d28:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	bb02      	cbnz	r2, 8008d72 <_dtoa_r+0xa62>
 8008d30:	4601      	mov	r1, r0
 8008d32:	ee18 0a10 	vmov	r0, s16
 8008d36:	f000 ff33 	bl	8009ba0 <__mcmp>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	4620      	mov	r0, r4
 8008d40:	9207      	str	r2, [sp, #28]
 8008d42:	f000 fca1 	bl	8009688 <_Bfree>
 8008d46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d4a:	ea43 0102 	orr.w	r1, r3, r2
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	430b      	orrs	r3, r1
 8008d52:	464d      	mov	r5, r9
 8008d54:	d10f      	bne.n	8008d76 <_dtoa_r+0xa66>
 8008d56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d5a:	d02a      	beq.n	8008db2 <_dtoa_r+0xaa2>
 8008d5c:	9b03      	ldr	r3, [sp, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	dd02      	ble.n	8008d68 <_dtoa_r+0xa58>
 8008d62:	9b02      	ldr	r3, [sp, #8]
 8008d64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d68:	f88b a000 	strb.w	sl, [fp]
 8008d6c:	e775      	b.n	8008c5a <_dtoa_r+0x94a>
 8008d6e:	4638      	mov	r0, r7
 8008d70:	e7ba      	b.n	8008ce8 <_dtoa_r+0x9d8>
 8008d72:	2201      	movs	r2, #1
 8008d74:	e7e2      	b.n	8008d3c <_dtoa_r+0xa2c>
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	db04      	blt.n	8008d86 <_dtoa_r+0xa76>
 8008d7c:	9906      	ldr	r1, [sp, #24]
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	9904      	ldr	r1, [sp, #16]
 8008d82:	430b      	orrs	r3, r1
 8008d84:	d122      	bne.n	8008dcc <_dtoa_r+0xabc>
 8008d86:	2a00      	cmp	r2, #0
 8008d88:	ddee      	ble.n	8008d68 <_dtoa_r+0xa58>
 8008d8a:	ee18 1a10 	vmov	r1, s16
 8008d8e:	2201      	movs	r2, #1
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fe95 	bl	8009ac0 <__lshift>
 8008d96:	4631      	mov	r1, r6
 8008d98:	ee08 0a10 	vmov	s16, r0
 8008d9c:	f000 ff00 	bl	8009ba0 <__mcmp>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	dc03      	bgt.n	8008dac <_dtoa_r+0xa9c>
 8008da4:	d1e0      	bne.n	8008d68 <_dtoa_r+0xa58>
 8008da6:	f01a 0f01 	tst.w	sl, #1
 8008daa:	d0dd      	beq.n	8008d68 <_dtoa_r+0xa58>
 8008dac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008db0:	d1d7      	bne.n	8008d62 <_dtoa_r+0xa52>
 8008db2:	2339      	movs	r3, #57	; 0x39
 8008db4:	f88b 3000 	strb.w	r3, [fp]
 8008db8:	462b      	mov	r3, r5
 8008dba:	461d      	mov	r5, r3
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dc2:	2a39      	cmp	r2, #57	; 0x39
 8008dc4:	d071      	beq.n	8008eaa <_dtoa_r+0xb9a>
 8008dc6:	3201      	adds	r2, #1
 8008dc8:	701a      	strb	r2, [r3, #0]
 8008dca:	e746      	b.n	8008c5a <_dtoa_r+0x94a>
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	dd07      	ble.n	8008de0 <_dtoa_r+0xad0>
 8008dd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dd4:	d0ed      	beq.n	8008db2 <_dtoa_r+0xaa2>
 8008dd6:	f10a 0301 	add.w	r3, sl, #1
 8008dda:	f88b 3000 	strb.w	r3, [fp]
 8008dde:	e73c      	b.n	8008c5a <_dtoa_r+0x94a>
 8008de0:	9b05      	ldr	r3, [sp, #20]
 8008de2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008de6:	4599      	cmp	r9, r3
 8008de8:	d047      	beq.n	8008e7a <_dtoa_r+0xb6a>
 8008dea:	ee18 1a10 	vmov	r1, s16
 8008dee:	2300      	movs	r3, #0
 8008df0:	220a      	movs	r2, #10
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 fc6a 	bl	80096cc <__multadd>
 8008df8:	45b8      	cmp	r8, r7
 8008dfa:	ee08 0a10 	vmov	s16, r0
 8008dfe:	f04f 0300 	mov.w	r3, #0
 8008e02:	f04f 020a 	mov.w	r2, #10
 8008e06:	4641      	mov	r1, r8
 8008e08:	4620      	mov	r0, r4
 8008e0a:	d106      	bne.n	8008e1a <_dtoa_r+0xb0a>
 8008e0c:	f000 fc5e 	bl	80096cc <__multadd>
 8008e10:	4680      	mov	r8, r0
 8008e12:	4607      	mov	r7, r0
 8008e14:	f109 0901 	add.w	r9, r9, #1
 8008e18:	e772      	b.n	8008d00 <_dtoa_r+0x9f0>
 8008e1a:	f000 fc57 	bl	80096cc <__multadd>
 8008e1e:	4639      	mov	r1, r7
 8008e20:	4680      	mov	r8, r0
 8008e22:	2300      	movs	r3, #0
 8008e24:	220a      	movs	r2, #10
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 fc50 	bl	80096cc <__multadd>
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	e7f1      	b.n	8008e14 <_dtoa_r+0xb04>
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	9d01      	ldr	r5, [sp, #4]
 8008e36:	ee18 0a10 	vmov	r0, s16
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	f7ff f9dc 	bl	80081f8 <quorem>
 8008e40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e44:	9b01      	ldr	r3, [sp, #4]
 8008e46:	f805 ab01 	strb.w	sl, [r5], #1
 8008e4a:	1aea      	subs	r2, r5, r3
 8008e4c:	9b02      	ldr	r3, [sp, #8]
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	dd09      	ble.n	8008e66 <_dtoa_r+0xb56>
 8008e52:	ee18 1a10 	vmov	r1, s16
 8008e56:	2300      	movs	r3, #0
 8008e58:	220a      	movs	r2, #10
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 fc36 	bl	80096cc <__multadd>
 8008e60:	ee08 0a10 	vmov	s16, r0
 8008e64:	e7e7      	b.n	8008e36 <_dtoa_r+0xb26>
 8008e66:	9b02      	ldr	r3, [sp, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	bfc8      	it	gt
 8008e6c:	461d      	movgt	r5, r3
 8008e6e:	9b01      	ldr	r3, [sp, #4]
 8008e70:	bfd8      	it	le
 8008e72:	2501      	movle	r5, #1
 8008e74:	441d      	add	r5, r3
 8008e76:	f04f 0800 	mov.w	r8, #0
 8008e7a:	ee18 1a10 	vmov	r1, s16
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 fe1d 	bl	8009ac0 <__lshift>
 8008e86:	4631      	mov	r1, r6
 8008e88:	ee08 0a10 	vmov	s16, r0
 8008e8c:	f000 fe88 	bl	8009ba0 <__mcmp>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	dc91      	bgt.n	8008db8 <_dtoa_r+0xaa8>
 8008e94:	d102      	bne.n	8008e9c <_dtoa_r+0xb8c>
 8008e96:	f01a 0f01 	tst.w	sl, #1
 8008e9a:	d18d      	bne.n	8008db8 <_dtoa_r+0xaa8>
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	461d      	mov	r5, r3
 8008ea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ea4:	2a30      	cmp	r2, #48	; 0x30
 8008ea6:	d0fa      	beq.n	8008e9e <_dtoa_r+0xb8e>
 8008ea8:	e6d7      	b.n	8008c5a <_dtoa_r+0x94a>
 8008eaa:	9a01      	ldr	r2, [sp, #4]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d184      	bne.n	8008dba <_dtoa_r+0xaaa>
 8008eb0:	9b00      	ldr	r3, [sp, #0]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	2331      	movs	r3, #49	; 0x31
 8008eb8:	7013      	strb	r3, [r2, #0]
 8008eba:	e6ce      	b.n	8008c5a <_dtoa_r+0x94a>
 8008ebc:	4b09      	ldr	r3, [pc, #36]	; (8008ee4 <_dtoa_r+0xbd4>)
 8008ebe:	f7ff ba95 	b.w	80083ec <_dtoa_r+0xdc>
 8008ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f47f aa6e 	bne.w	80083a6 <_dtoa_r+0x96>
 8008eca:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <_dtoa_r+0xbd8>)
 8008ecc:	f7ff ba8e 	b.w	80083ec <_dtoa_r+0xdc>
 8008ed0:	9b02      	ldr	r3, [sp, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	dcae      	bgt.n	8008e34 <_dtoa_r+0xb24>
 8008ed6:	9b06      	ldr	r3, [sp, #24]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	f73f aea8 	bgt.w	8008c2e <_dtoa_r+0x91e>
 8008ede:	e7a9      	b.n	8008e34 <_dtoa_r+0xb24>
 8008ee0:	0800b558 	.word	0x0800b558
 8008ee4:	0800b358 	.word	0x0800b358
 8008ee8:	0800b4d9 	.word	0x0800b4d9

08008eec <rshift>:
 8008eec:	6903      	ldr	r3, [r0, #16]
 8008eee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008efa:	f100 0414 	add.w	r4, r0, #20
 8008efe:	dd45      	ble.n	8008f8c <rshift+0xa0>
 8008f00:	f011 011f 	ands.w	r1, r1, #31
 8008f04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f0c:	d10c      	bne.n	8008f28 <rshift+0x3c>
 8008f0e:	f100 0710 	add.w	r7, r0, #16
 8008f12:	4629      	mov	r1, r5
 8008f14:	42b1      	cmp	r1, r6
 8008f16:	d334      	bcc.n	8008f82 <rshift+0x96>
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	1eea      	subs	r2, r5, #3
 8008f1e:	4296      	cmp	r6, r2
 8008f20:	bf38      	it	cc
 8008f22:	2300      	movcc	r3, #0
 8008f24:	4423      	add	r3, r4
 8008f26:	e015      	b.n	8008f54 <rshift+0x68>
 8008f28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f2c:	f1c1 0820 	rsb	r8, r1, #32
 8008f30:	40cf      	lsrs	r7, r1
 8008f32:	f105 0e04 	add.w	lr, r5, #4
 8008f36:	46a1      	mov	r9, r4
 8008f38:	4576      	cmp	r6, lr
 8008f3a:	46f4      	mov	ip, lr
 8008f3c:	d815      	bhi.n	8008f6a <rshift+0x7e>
 8008f3e:	1a9a      	subs	r2, r3, r2
 8008f40:	0092      	lsls	r2, r2, #2
 8008f42:	3a04      	subs	r2, #4
 8008f44:	3501      	adds	r5, #1
 8008f46:	42ae      	cmp	r6, r5
 8008f48:	bf38      	it	cc
 8008f4a:	2200      	movcc	r2, #0
 8008f4c:	18a3      	adds	r3, r4, r2
 8008f4e:	50a7      	str	r7, [r4, r2]
 8008f50:	b107      	cbz	r7, 8008f54 <rshift+0x68>
 8008f52:	3304      	adds	r3, #4
 8008f54:	1b1a      	subs	r2, r3, r4
 8008f56:	42a3      	cmp	r3, r4
 8008f58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f5c:	bf08      	it	eq
 8008f5e:	2300      	moveq	r3, #0
 8008f60:	6102      	str	r2, [r0, #16]
 8008f62:	bf08      	it	eq
 8008f64:	6143      	streq	r3, [r0, #20]
 8008f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f6a:	f8dc c000 	ldr.w	ip, [ip]
 8008f6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f72:	ea4c 0707 	orr.w	r7, ip, r7
 8008f76:	f849 7b04 	str.w	r7, [r9], #4
 8008f7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f7e:	40cf      	lsrs	r7, r1
 8008f80:	e7da      	b.n	8008f38 <rshift+0x4c>
 8008f82:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f86:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f8a:	e7c3      	b.n	8008f14 <rshift+0x28>
 8008f8c:	4623      	mov	r3, r4
 8008f8e:	e7e1      	b.n	8008f54 <rshift+0x68>

08008f90 <__hexdig_fun>:
 8008f90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f94:	2b09      	cmp	r3, #9
 8008f96:	d802      	bhi.n	8008f9e <__hexdig_fun+0xe>
 8008f98:	3820      	subs	r0, #32
 8008f9a:	b2c0      	uxtb	r0, r0
 8008f9c:	4770      	bx	lr
 8008f9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008fa2:	2b05      	cmp	r3, #5
 8008fa4:	d801      	bhi.n	8008faa <__hexdig_fun+0x1a>
 8008fa6:	3847      	subs	r0, #71	; 0x47
 8008fa8:	e7f7      	b.n	8008f9a <__hexdig_fun+0xa>
 8008faa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008fae:	2b05      	cmp	r3, #5
 8008fb0:	d801      	bhi.n	8008fb6 <__hexdig_fun+0x26>
 8008fb2:	3827      	subs	r0, #39	; 0x27
 8008fb4:	e7f1      	b.n	8008f9a <__hexdig_fun+0xa>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	4770      	bx	lr
	...

08008fbc <__gethex>:
 8008fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	ed2d 8b02 	vpush	{d8}
 8008fc4:	b089      	sub	sp, #36	; 0x24
 8008fc6:	ee08 0a10 	vmov	s16, r0
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	4bb4      	ldr	r3, [pc, #720]	; (80092a0 <__gethex+0x2e4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	468b      	mov	fp, r1
 8008fd6:	4690      	mov	r8, r2
 8008fd8:	f7f7 f902 	bl	80001e0 <strlen>
 8008fdc:	9b01      	ldr	r3, [sp, #4]
 8008fde:	f8db 2000 	ldr.w	r2, [fp]
 8008fe2:	4403      	add	r3, r0
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008fea:	9305      	str	r3, [sp, #20]
 8008fec:	1c93      	adds	r3, r2, #2
 8008fee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ff2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ff6:	32fe      	adds	r2, #254	; 0xfe
 8008ff8:	18d1      	adds	r1, r2, r3
 8008ffa:	461f      	mov	r7, r3
 8008ffc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009000:	9100      	str	r1, [sp, #0]
 8009002:	2830      	cmp	r0, #48	; 0x30
 8009004:	d0f8      	beq.n	8008ff8 <__gethex+0x3c>
 8009006:	f7ff ffc3 	bl	8008f90 <__hexdig_fun>
 800900a:	4604      	mov	r4, r0
 800900c:	2800      	cmp	r0, #0
 800900e:	d13a      	bne.n	8009086 <__gethex+0xca>
 8009010:	9901      	ldr	r1, [sp, #4]
 8009012:	4652      	mov	r2, sl
 8009014:	4638      	mov	r0, r7
 8009016:	f001 fa23 	bl	800a460 <strncmp>
 800901a:	4605      	mov	r5, r0
 800901c:	2800      	cmp	r0, #0
 800901e:	d168      	bne.n	80090f2 <__gethex+0x136>
 8009020:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009024:	eb07 060a 	add.w	r6, r7, sl
 8009028:	f7ff ffb2 	bl	8008f90 <__hexdig_fun>
 800902c:	2800      	cmp	r0, #0
 800902e:	d062      	beq.n	80090f6 <__gethex+0x13a>
 8009030:	4633      	mov	r3, r6
 8009032:	7818      	ldrb	r0, [r3, #0]
 8009034:	2830      	cmp	r0, #48	; 0x30
 8009036:	461f      	mov	r7, r3
 8009038:	f103 0301 	add.w	r3, r3, #1
 800903c:	d0f9      	beq.n	8009032 <__gethex+0x76>
 800903e:	f7ff ffa7 	bl	8008f90 <__hexdig_fun>
 8009042:	2301      	movs	r3, #1
 8009044:	fab0 f480 	clz	r4, r0
 8009048:	0964      	lsrs	r4, r4, #5
 800904a:	4635      	mov	r5, r6
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	463a      	mov	r2, r7
 8009050:	4616      	mov	r6, r2
 8009052:	3201      	adds	r2, #1
 8009054:	7830      	ldrb	r0, [r6, #0]
 8009056:	f7ff ff9b 	bl	8008f90 <__hexdig_fun>
 800905a:	2800      	cmp	r0, #0
 800905c:	d1f8      	bne.n	8009050 <__gethex+0x94>
 800905e:	9901      	ldr	r1, [sp, #4]
 8009060:	4652      	mov	r2, sl
 8009062:	4630      	mov	r0, r6
 8009064:	f001 f9fc 	bl	800a460 <strncmp>
 8009068:	b980      	cbnz	r0, 800908c <__gethex+0xd0>
 800906a:	b94d      	cbnz	r5, 8009080 <__gethex+0xc4>
 800906c:	eb06 050a 	add.w	r5, r6, sl
 8009070:	462a      	mov	r2, r5
 8009072:	4616      	mov	r6, r2
 8009074:	3201      	adds	r2, #1
 8009076:	7830      	ldrb	r0, [r6, #0]
 8009078:	f7ff ff8a 	bl	8008f90 <__hexdig_fun>
 800907c:	2800      	cmp	r0, #0
 800907e:	d1f8      	bne.n	8009072 <__gethex+0xb6>
 8009080:	1bad      	subs	r5, r5, r6
 8009082:	00ad      	lsls	r5, r5, #2
 8009084:	e004      	b.n	8009090 <__gethex+0xd4>
 8009086:	2400      	movs	r4, #0
 8009088:	4625      	mov	r5, r4
 800908a:	e7e0      	b.n	800904e <__gethex+0x92>
 800908c:	2d00      	cmp	r5, #0
 800908e:	d1f7      	bne.n	8009080 <__gethex+0xc4>
 8009090:	7833      	ldrb	r3, [r6, #0]
 8009092:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009096:	2b50      	cmp	r3, #80	; 0x50
 8009098:	d13b      	bne.n	8009112 <__gethex+0x156>
 800909a:	7873      	ldrb	r3, [r6, #1]
 800909c:	2b2b      	cmp	r3, #43	; 0x2b
 800909e:	d02c      	beq.n	80090fa <__gethex+0x13e>
 80090a0:	2b2d      	cmp	r3, #45	; 0x2d
 80090a2:	d02e      	beq.n	8009102 <__gethex+0x146>
 80090a4:	1c71      	adds	r1, r6, #1
 80090a6:	f04f 0900 	mov.w	r9, #0
 80090aa:	7808      	ldrb	r0, [r1, #0]
 80090ac:	f7ff ff70 	bl	8008f90 <__hexdig_fun>
 80090b0:	1e43      	subs	r3, r0, #1
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b18      	cmp	r3, #24
 80090b6:	d82c      	bhi.n	8009112 <__gethex+0x156>
 80090b8:	f1a0 0210 	sub.w	r2, r0, #16
 80090bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80090c0:	f7ff ff66 	bl	8008f90 <__hexdig_fun>
 80090c4:	1e43      	subs	r3, r0, #1
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b18      	cmp	r3, #24
 80090ca:	d91d      	bls.n	8009108 <__gethex+0x14c>
 80090cc:	f1b9 0f00 	cmp.w	r9, #0
 80090d0:	d000      	beq.n	80090d4 <__gethex+0x118>
 80090d2:	4252      	negs	r2, r2
 80090d4:	4415      	add	r5, r2
 80090d6:	f8cb 1000 	str.w	r1, [fp]
 80090da:	b1e4      	cbz	r4, 8009116 <__gethex+0x15a>
 80090dc:	9b00      	ldr	r3, [sp, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bf14      	ite	ne
 80090e2:	2700      	movne	r7, #0
 80090e4:	2706      	moveq	r7, #6
 80090e6:	4638      	mov	r0, r7
 80090e8:	b009      	add	sp, #36	; 0x24
 80090ea:	ecbd 8b02 	vpop	{d8}
 80090ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f2:	463e      	mov	r6, r7
 80090f4:	4625      	mov	r5, r4
 80090f6:	2401      	movs	r4, #1
 80090f8:	e7ca      	b.n	8009090 <__gethex+0xd4>
 80090fa:	f04f 0900 	mov.w	r9, #0
 80090fe:	1cb1      	adds	r1, r6, #2
 8009100:	e7d3      	b.n	80090aa <__gethex+0xee>
 8009102:	f04f 0901 	mov.w	r9, #1
 8009106:	e7fa      	b.n	80090fe <__gethex+0x142>
 8009108:	230a      	movs	r3, #10
 800910a:	fb03 0202 	mla	r2, r3, r2, r0
 800910e:	3a10      	subs	r2, #16
 8009110:	e7d4      	b.n	80090bc <__gethex+0x100>
 8009112:	4631      	mov	r1, r6
 8009114:	e7df      	b.n	80090d6 <__gethex+0x11a>
 8009116:	1bf3      	subs	r3, r6, r7
 8009118:	3b01      	subs	r3, #1
 800911a:	4621      	mov	r1, r4
 800911c:	2b07      	cmp	r3, #7
 800911e:	dc0b      	bgt.n	8009138 <__gethex+0x17c>
 8009120:	ee18 0a10 	vmov	r0, s16
 8009124:	f000 fa70 	bl	8009608 <_Balloc>
 8009128:	4604      	mov	r4, r0
 800912a:	b940      	cbnz	r0, 800913e <__gethex+0x182>
 800912c:	4b5d      	ldr	r3, [pc, #372]	; (80092a4 <__gethex+0x2e8>)
 800912e:	4602      	mov	r2, r0
 8009130:	21de      	movs	r1, #222	; 0xde
 8009132:	485d      	ldr	r0, [pc, #372]	; (80092a8 <__gethex+0x2ec>)
 8009134:	f001 f9b6 	bl	800a4a4 <__assert_func>
 8009138:	3101      	adds	r1, #1
 800913a:	105b      	asrs	r3, r3, #1
 800913c:	e7ee      	b.n	800911c <__gethex+0x160>
 800913e:	f100 0914 	add.w	r9, r0, #20
 8009142:	f04f 0b00 	mov.w	fp, #0
 8009146:	f1ca 0301 	rsb	r3, sl, #1
 800914a:	f8cd 9008 	str.w	r9, [sp, #8]
 800914e:	f8cd b000 	str.w	fp, [sp]
 8009152:	9306      	str	r3, [sp, #24]
 8009154:	42b7      	cmp	r7, r6
 8009156:	d340      	bcc.n	80091da <__gethex+0x21e>
 8009158:	9802      	ldr	r0, [sp, #8]
 800915a:	9b00      	ldr	r3, [sp, #0]
 800915c:	f840 3b04 	str.w	r3, [r0], #4
 8009160:	eba0 0009 	sub.w	r0, r0, r9
 8009164:	1080      	asrs	r0, r0, #2
 8009166:	0146      	lsls	r6, r0, #5
 8009168:	6120      	str	r0, [r4, #16]
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fb3e 	bl	80097ec <__hi0bits>
 8009170:	1a30      	subs	r0, r6, r0
 8009172:	f8d8 6000 	ldr.w	r6, [r8]
 8009176:	42b0      	cmp	r0, r6
 8009178:	dd63      	ble.n	8009242 <__gethex+0x286>
 800917a:	1b87      	subs	r7, r0, r6
 800917c:	4639      	mov	r1, r7
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fee2 	bl	8009f48 <__any_on>
 8009184:	4682      	mov	sl, r0
 8009186:	b1a8      	cbz	r0, 80091b4 <__gethex+0x1f8>
 8009188:	1e7b      	subs	r3, r7, #1
 800918a:	1159      	asrs	r1, r3, #5
 800918c:	f003 021f 	and.w	r2, r3, #31
 8009190:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009194:	f04f 0a01 	mov.w	sl, #1
 8009198:	fa0a f202 	lsl.w	r2, sl, r2
 800919c:	420a      	tst	r2, r1
 800919e:	d009      	beq.n	80091b4 <__gethex+0x1f8>
 80091a0:	4553      	cmp	r3, sl
 80091a2:	dd05      	ble.n	80091b0 <__gethex+0x1f4>
 80091a4:	1eb9      	subs	r1, r7, #2
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fece 	bl	8009f48 <__any_on>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d145      	bne.n	800923c <__gethex+0x280>
 80091b0:	f04f 0a02 	mov.w	sl, #2
 80091b4:	4639      	mov	r1, r7
 80091b6:	4620      	mov	r0, r4
 80091b8:	f7ff fe98 	bl	8008eec <rshift>
 80091bc:	443d      	add	r5, r7
 80091be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091c2:	42ab      	cmp	r3, r5
 80091c4:	da4c      	bge.n	8009260 <__gethex+0x2a4>
 80091c6:	ee18 0a10 	vmov	r0, s16
 80091ca:	4621      	mov	r1, r4
 80091cc:	f000 fa5c 	bl	8009688 <_Bfree>
 80091d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091d2:	2300      	movs	r3, #0
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	27a3      	movs	r7, #163	; 0xa3
 80091d8:	e785      	b.n	80090e6 <__gethex+0x12a>
 80091da:	1e73      	subs	r3, r6, #1
 80091dc:	9a05      	ldr	r2, [sp, #20]
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d019      	beq.n	800921c <__gethex+0x260>
 80091e8:	f1bb 0f20 	cmp.w	fp, #32
 80091ec:	d107      	bne.n	80091fe <__gethex+0x242>
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	9a00      	ldr	r2, [sp, #0]
 80091f2:	f843 2b04 	str.w	r2, [r3], #4
 80091f6:	9302      	str	r3, [sp, #8]
 80091f8:	2300      	movs	r3, #0
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	469b      	mov	fp, r3
 80091fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009202:	f7ff fec5 	bl	8008f90 <__hexdig_fun>
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	f000 000f 	and.w	r0, r0, #15
 800920c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009210:	4303      	orrs	r3, r0
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	f10b 0b04 	add.w	fp, fp, #4
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	e00d      	b.n	8009238 <__gethex+0x27c>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	9a06      	ldr	r2, [sp, #24]
 8009220:	4413      	add	r3, r2
 8009222:	42bb      	cmp	r3, r7
 8009224:	d3e0      	bcc.n	80091e8 <__gethex+0x22c>
 8009226:	4618      	mov	r0, r3
 8009228:	9901      	ldr	r1, [sp, #4]
 800922a:	9307      	str	r3, [sp, #28]
 800922c:	4652      	mov	r2, sl
 800922e:	f001 f917 	bl	800a460 <strncmp>
 8009232:	9b07      	ldr	r3, [sp, #28]
 8009234:	2800      	cmp	r0, #0
 8009236:	d1d7      	bne.n	80091e8 <__gethex+0x22c>
 8009238:	461e      	mov	r6, r3
 800923a:	e78b      	b.n	8009154 <__gethex+0x198>
 800923c:	f04f 0a03 	mov.w	sl, #3
 8009240:	e7b8      	b.n	80091b4 <__gethex+0x1f8>
 8009242:	da0a      	bge.n	800925a <__gethex+0x29e>
 8009244:	1a37      	subs	r7, r6, r0
 8009246:	4621      	mov	r1, r4
 8009248:	ee18 0a10 	vmov	r0, s16
 800924c:	463a      	mov	r2, r7
 800924e:	f000 fc37 	bl	8009ac0 <__lshift>
 8009252:	1bed      	subs	r5, r5, r7
 8009254:	4604      	mov	r4, r0
 8009256:	f100 0914 	add.w	r9, r0, #20
 800925a:	f04f 0a00 	mov.w	sl, #0
 800925e:	e7ae      	b.n	80091be <__gethex+0x202>
 8009260:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009264:	42a8      	cmp	r0, r5
 8009266:	dd72      	ble.n	800934e <__gethex+0x392>
 8009268:	1b45      	subs	r5, r0, r5
 800926a:	42ae      	cmp	r6, r5
 800926c:	dc36      	bgt.n	80092dc <__gethex+0x320>
 800926e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d02a      	beq.n	80092cc <__gethex+0x310>
 8009276:	2b03      	cmp	r3, #3
 8009278:	d02c      	beq.n	80092d4 <__gethex+0x318>
 800927a:	2b01      	cmp	r3, #1
 800927c:	d11c      	bne.n	80092b8 <__gethex+0x2fc>
 800927e:	42ae      	cmp	r6, r5
 8009280:	d11a      	bne.n	80092b8 <__gethex+0x2fc>
 8009282:	2e01      	cmp	r6, #1
 8009284:	d112      	bne.n	80092ac <__gethex+0x2f0>
 8009286:	9a04      	ldr	r2, [sp, #16]
 8009288:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	2301      	movs	r3, #1
 8009290:	6123      	str	r3, [r4, #16]
 8009292:	f8c9 3000 	str.w	r3, [r9]
 8009296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009298:	2762      	movs	r7, #98	; 0x62
 800929a:	601c      	str	r4, [r3, #0]
 800929c:	e723      	b.n	80090e6 <__gethex+0x12a>
 800929e:	bf00      	nop
 80092a0:	0800b5d0 	.word	0x0800b5d0
 80092a4:	0800b558 	.word	0x0800b558
 80092a8:	0800b569 	.word	0x0800b569
 80092ac:	1e71      	subs	r1, r6, #1
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 fe4a 	bl	8009f48 <__any_on>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d1e6      	bne.n	8009286 <__gethex+0x2ca>
 80092b8:	ee18 0a10 	vmov	r0, s16
 80092bc:	4621      	mov	r1, r4
 80092be:	f000 f9e3 	bl	8009688 <_Bfree>
 80092c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092c4:	2300      	movs	r3, #0
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	2750      	movs	r7, #80	; 0x50
 80092ca:	e70c      	b.n	80090e6 <__gethex+0x12a>
 80092cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1f2      	bne.n	80092b8 <__gethex+0x2fc>
 80092d2:	e7d8      	b.n	8009286 <__gethex+0x2ca>
 80092d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1d5      	bne.n	8009286 <__gethex+0x2ca>
 80092da:	e7ed      	b.n	80092b8 <__gethex+0x2fc>
 80092dc:	1e6f      	subs	r7, r5, #1
 80092de:	f1ba 0f00 	cmp.w	sl, #0
 80092e2:	d131      	bne.n	8009348 <__gethex+0x38c>
 80092e4:	b127      	cbz	r7, 80092f0 <__gethex+0x334>
 80092e6:	4639      	mov	r1, r7
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 fe2d 	bl	8009f48 <__any_on>
 80092ee:	4682      	mov	sl, r0
 80092f0:	117b      	asrs	r3, r7, #5
 80092f2:	2101      	movs	r1, #1
 80092f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80092f8:	f007 071f 	and.w	r7, r7, #31
 80092fc:	fa01 f707 	lsl.w	r7, r1, r7
 8009300:	421f      	tst	r7, r3
 8009302:	4629      	mov	r1, r5
 8009304:	4620      	mov	r0, r4
 8009306:	bf18      	it	ne
 8009308:	f04a 0a02 	orrne.w	sl, sl, #2
 800930c:	1b76      	subs	r6, r6, r5
 800930e:	f7ff fded 	bl	8008eec <rshift>
 8009312:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009316:	2702      	movs	r7, #2
 8009318:	f1ba 0f00 	cmp.w	sl, #0
 800931c:	d048      	beq.n	80093b0 <__gethex+0x3f4>
 800931e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d015      	beq.n	8009352 <__gethex+0x396>
 8009326:	2b03      	cmp	r3, #3
 8009328:	d017      	beq.n	800935a <__gethex+0x39e>
 800932a:	2b01      	cmp	r3, #1
 800932c:	d109      	bne.n	8009342 <__gethex+0x386>
 800932e:	f01a 0f02 	tst.w	sl, #2
 8009332:	d006      	beq.n	8009342 <__gethex+0x386>
 8009334:	f8d9 0000 	ldr.w	r0, [r9]
 8009338:	ea4a 0a00 	orr.w	sl, sl, r0
 800933c:	f01a 0f01 	tst.w	sl, #1
 8009340:	d10e      	bne.n	8009360 <__gethex+0x3a4>
 8009342:	f047 0710 	orr.w	r7, r7, #16
 8009346:	e033      	b.n	80093b0 <__gethex+0x3f4>
 8009348:	f04f 0a01 	mov.w	sl, #1
 800934c:	e7d0      	b.n	80092f0 <__gethex+0x334>
 800934e:	2701      	movs	r7, #1
 8009350:	e7e2      	b.n	8009318 <__gethex+0x35c>
 8009352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009354:	f1c3 0301 	rsb	r3, r3, #1
 8009358:	9315      	str	r3, [sp, #84]	; 0x54
 800935a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0f0      	beq.n	8009342 <__gethex+0x386>
 8009360:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009364:	f104 0314 	add.w	r3, r4, #20
 8009368:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800936c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009370:	f04f 0c00 	mov.w	ip, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f853 2b04 	ldr.w	r2, [r3], #4
 800937a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800937e:	d01c      	beq.n	80093ba <__gethex+0x3fe>
 8009380:	3201      	adds	r2, #1
 8009382:	6002      	str	r2, [r0, #0]
 8009384:	2f02      	cmp	r7, #2
 8009386:	f104 0314 	add.w	r3, r4, #20
 800938a:	d13f      	bne.n	800940c <__gethex+0x450>
 800938c:	f8d8 2000 	ldr.w	r2, [r8]
 8009390:	3a01      	subs	r2, #1
 8009392:	42b2      	cmp	r2, r6
 8009394:	d10a      	bne.n	80093ac <__gethex+0x3f0>
 8009396:	1171      	asrs	r1, r6, #5
 8009398:	2201      	movs	r2, #1
 800939a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800939e:	f006 061f 	and.w	r6, r6, #31
 80093a2:	fa02 f606 	lsl.w	r6, r2, r6
 80093a6:	421e      	tst	r6, r3
 80093a8:	bf18      	it	ne
 80093aa:	4617      	movne	r7, r2
 80093ac:	f047 0720 	orr.w	r7, r7, #32
 80093b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093b2:	601c      	str	r4, [r3, #0]
 80093b4:	9b04      	ldr	r3, [sp, #16]
 80093b6:	601d      	str	r5, [r3, #0]
 80093b8:	e695      	b.n	80090e6 <__gethex+0x12a>
 80093ba:	4299      	cmp	r1, r3
 80093bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80093c0:	d8d8      	bhi.n	8009374 <__gethex+0x3b8>
 80093c2:	68a3      	ldr	r3, [r4, #8]
 80093c4:	459b      	cmp	fp, r3
 80093c6:	db19      	blt.n	80093fc <__gethex+0x440>
 80093c8:	6861      	ldr	r1, [r4, #4]
 80093ca:	ee18 0a10 	vmov	r0, s16
 80093ce:	3101      	adds	r1, #1
 80093d0:	f000 f91a 	bl	8009608 <_Balloc>
 80093d4:	4681      	mov	r9, r0
 80093d6:	b918      	cbnz	r0, 80093e0 <__gethex+0x424>
 80093d8:	4b1a      	ldr	r3, [pc, #104]	; (8009444 <__gethex+0x488>)
 80093da:	4602      	mov	r2, r0
 80093dc:	2184      	movs	r1, #132	; 0x84
 80093de:	e6a8      	b.n	8009132 <__gethex+0x176>
 80093e0:	6922      	ldr	r2, [r4, #16]
 80093e2:	3202      	adds	r2, #2
 80093e4:	f104 010c 	add.w	r1, r4, #12
 80093e8:	0092      	lsls	r2, r2, #2
 80093ea:	300c      	adds	r0, #12
 80093ec:	f7fd f9a0 	bl	8006730 <memcpy>
 80093f0:	4621      	mov	r1, r4
 80093f2:	ee18 0a10 	vmov	r0, s16
 80093f6:	f000 f947 	bl	8009688 <_Bfree>
 80093fa:	464c      	mov	r4, r9
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009404:	6122      	str	r2, [r4, #16]
 8009406:	2201      	movs	r2, #1
 8009408:	615a      	str	r2, [r3, #20]
 800940a:	e7bb      	b.n	8009384 <__gethex+0x3c8>
 800940c:	6922      	ldr	r2, [r4, #16]
 800940e:	455a      	cmp	r2, fp
 8009410:	dd0b      	ble.n	800942a <__gethex+0x46e>
 8009412:	2101      	movs	r1, #1
 8009414:	4620      	mov	r0, r4
 8009416:	f7ff fd69 	bl	8008eec <rshift>
 800941a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800941e:	3501      	adds	r5, #1
 8009420:	42ab      	cmp	r3, r5
 8009422:	f6ff aed0 	blt.w	80091c6 <__gethex+0x20a>
 8009426:	2701      	movs	r7, #1
 8009428:	e7c0      	b.n	80093ac <__gethex+0x3f0>
 800942a:	f016 061f 	ands.w	r6, r6, #31
 800942e:	d0fa      	beq.n	8009426 <__gethex+0x46a>
 8009430:	4453      	add	r3, sl
 8009432:	f1c6 0620 	rsb	r6, r6, #32
 8009436:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800943a:	f000 f9d7 	bl	80097ec <__hi0bits>
 800943e:	42b0      	cmp	r0, r6
 8009440:	dbe7      	blt.n	8009412 <__gethex+0x456>
 8009442:	e7f0      	b.n	8009426 <__gethex+0x46a>
 8009444:	0800b558 	.word	0x0800b558

08009448 <L_shift>:
 8009448:	f1c2 0208 	rsb	r2, r2, #8
 800944c:	0092      	lsls	r2, r2, #2
 800944e:	b570      	push	{r4, r5, r6, lr}
 8009450:	f1c2 0620 	rsb	r6, r2, #32
 8009454:	6843      	ldr	r3, [r0, #4]
 8009456:	6804      	ldr	r4, [r0, #0]
 8009458:	fa03 f506 	lsl.w	r5, r3, r6
 800945c:	432c      	orrs	r4, r5
 800945e:	40d3      	lsrs	r3, r2
 8009460:	6004      	str	r4, [r0, #0]
 8009462:	f840 3f04 	str.w	r3, [r0, #4]!
 8009466:	4288      	cmp	r0, r1
 8009468:	d3f4      	bcc.n	8009454 <L_shift+0xc>
 800946a:	bd70      	pop	{r4, r5, r6, pc}

0800946c <__match>:
 800946c:	b530      	push	{r4, r5, lr}
 800946e:	6803      	ldr	r3, [r0, #0]
 8009470:	3301      	adds	r3, #1
 8009472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009476:	b914      	cbnz	r4, 800947e <__match+0x12>
 8009478:	6003      	str	r3, [r0, #0]
 800947a:	2001      	movs	r0, #1
 800947c:	bd30      	pop	{r4, r5, pc}
 800947e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009482:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009486:	2d19      	cmp	r5, #25
 8009488:	bf98      	it	ls
 800948a:	3220      	addls	r2, #32
 800948c:	42a2      	cmp	r2, r4
 800948e:	d0f0      	beq.n	8009472 <__match+0x6>
 8009490:	2000      	movs	r0, #0
 8009492:	e7f3      	b.n	800947c <__match+0x10>

08009494 <__hexnan>:
 8009494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	680b      	ldr	r3, [r1, #0]
 800949a:	115e      	asrs	r6, r3, #5
 800949c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094a0:	f013 031f 	ands.w	r3, r3, #31
 80094a4:	b087      	sub	sp, #28
 80094a6:	bf18      	it	ne
 80094a8:	3604      	addne	r6, #4
 80094aa:	2500      	movs	r5, #0
 80094ac:	1f37      	subs	r7, r6, #4
 80094ae:	4690      	mov	r8, r2
 80094b0:	6802      	ldr	r2, [r0, #0]
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	4682      	mov	sl, r0
 80094b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80094ba:	46b9      	mov	r9, r7
 80094bc:	463c      	mov	r4, r7
 80094be:	9502      	str	r5, [sp, #8]
 80094c0:	46ab      	mov	fp, r5
 80094c2:	7851      	ldrb	r1, [r2, #1]
 80094c4:	1c53      	adds	r3, r2, #1
 80094c6:	9303      	str	r3, [sp, #12]
 80094c8:	b341      	cbz	r1, 800951c <__hexnan+0x88>
 80094ca:	4608      	mov	r0, r1
 80094cc:	9205      	str	r2, [sp, #20]
 80094ce:	9104      	str	r1, [sp, #16]
 80094d0:	f7ff fd5e 	bl	8008f90 <__hexdig_fun>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d14f      	bne.n	8009578 <__hexnan+0xe4>
 80094d8:	9904      	ldr	r1, [sp, #16]
 80094da:	9a05      	ldr	r2, [sp, #20]
 80094dc:	2920      	cmp	r1, #32
 80094de:	d818      	bhi.n	8009512 <__hexnan+0x7e>
 80094e0:	9b02      	ldr	r3, [sp, #8]
 80094e2:	459b      	cmp	fp, r3
 80094e4:	dd13      	ble.n	800950e <__hexnan+0x7a>
 80094e6:	454c      	cmp	r4, r9
 80094e8:	d206      	bcs.n	80094f8 <__hexnan+0x64>
 80094ea:	2d07      	cmp	r5, #7
 80094ec:	dc04      	bgt.n	80094f8 <__hexnan+0x64>
 80094ee:	462a      	mov	r2, r5
 80094f0:	4649      	mov	r1, r9
 80094f2:	4620      	mov	r0, r4
 80094f4:	f7ff ffa8 	bl	8009448 <L_shift>
 80094f8:	4544      	cmp	r4, r8
 80094fa:	d950      	bls.n	800959e <__hexnan+0x10a>
 80094fc:	2300      	movs	r3, #0
 80094fe:	f1a4 0904 	sub.w	r9, r4, #4
 8009502:	f844 3c04 	str.w	r3, [r4, #-4]
 8009506:	f8cd b008 	str.w	fp, [sp, #8]
 800950a:	464c      	mov	r4, r9
 800950c:	461d      	mov	r5, r3
 800950e:	9a03      	ldr	r2, [sp, #12]
 8009510:	e7d7      	b.n	80094c2 <__hexnan+0x2e>
 8009512:	2929      	cmp	r1, #41	; 0x29
 8009514:	d156      	bne.n	80095c4 <__hexnan+0x130>
 8009516:	3202      	adds	r2, #2
 8009518:	f8ca 2000 	str.w	r2, [sl]
 800951c:	f1bb 0f00 	cmp.w	fp, #0
 8009520:	d050      	beq.n	80095c4 <__hexnan+0x130>
 8009522:	454c      	cmp	r4, r9
 8009524:	d206      	bcs.n	8009534 <__hexnan+0xa0>
 8009526:	2d07      	cmp	r5, #7
 8009528:	dc04      	bgt.n	8009534 <__hexnan+0xa0>
 800952a:	462a      	mov	r2, r5
 800952c:	4649      	mov	r1, r9
 800952e:	4620      	mov	r0, r4
 8009530:	f7ff ff8a 	bl	8009448 <L_shift>
 8009534:	4544      	cmp	r4, r8
 8009536:	d934      	bls.n	80095a2 <__hexnan+0x10e>
 8009538:	f1a8 0204 	sub.w	r2, r8, #4
 800953c:	4623      	mov	r3, r4
 800953e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009542:	f842 1f04 	str.w	r1, [r2, #4]!
 8009546:	429f      	cmp	r7, r3
 8009548:	d2f9      	bcs.n	800953e <__hexnan+0xaa>
 800954a:	1b3b      	subs	r3, r7, r4
 800954c:	f023 0303 	bic.w	r3, r3, #3
 8009550:	3304      	adds	r3, #4
 8009552:	3401      	adds	r4, #1
 8009554:	3e03      	subs	r6, #3
 8009556:	42b4      	cmp	r4, r6
 8009558:	bf88      	it	hi
 800955a:	2304      	movhi	r3, #4
 800955c:	4443      	add	r3, r8
 800955e:	2200      	movs	r2, #0
 8009560:	f843 2b04 	str.w	r2, [r3], #4
 8009564:	429f      	cmp	r7, r3
 8009566:	d2fb      	bcs.n	8009560 <__hexnan+0xcc>
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	b91b      	cbnz	r3, 8009574 <__hexnan+0xe0>
 800956c:	4547      	cmp	r7, r8
 800956e:	d127      	bne.n	80095c0 <__hexnan+0x12c>
 8009570:	2301      	movs	r3, #1
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	2005      	movs	r0, #5
 8009576:	e026      	b.n	80095c6 <__hexnan+0x132>
 8009578:	3501      	adds	r5, #1
 800957a:	2d08      	cmp	r5, #8
 800957c:	f10b 0b01 	add.w	fp, fp, #1
 8009580:	dd06      	ble.n	8009590 <__hexnan+0xfc>
 8009582:	4544      	cmp	r4, r8
 8009584:	d9c3      	bls.n	800950e <__hexnan+0x7a>
 8009586:	2300      	movs	r3, #0
 8009588:	f844 3c04 	str.w	r3, [r4, #-4]
 800958c:	2501      	movs	r5, #1
 800958e:	3c04      	subs	r4, #4
 8009590:	6822      	ldr	r2, [r4, #0]
 8009592:	f000 000f 	and.w	r0, r0, #15
 8009596:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800959a:	6022      	str	r2, [r4, #0]
 800959c:	e7b7      	b.n	800950e <__hexnan+0x7a>
 800959e:	2508      	movs	r5, #8
 80095a0:	e7b5      	b.n	800950e <__hexnan+0x7a>
 80095a2:	9b01      	ldr	r3, [sp, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d0df      	beq.n	8009568 <__hexnan+0xd4>
 80095a8:	f04f 32ff 	mov.w	r2, #4294967295
 80095ac:	f1c3 0320 	rsb	r3, r3, #32
 80095b0:	fa22 f303 	lsr.w	r3, r2, r3
 80095b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095b8:	401a      	ands	r2, r3
 80095ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80095be:	e7d3      	b.n	8009568 <__hexnan+0xd4>
 80095c0:	3f04      	subs	r7, #4
 80095c2:	e7d1      	b.n	8009568 <__hexnan+0xd4>
 80095c4:	2004      	movs	r0, #4
 80095c6:	b007      	add	sp, #28
 80095c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095cc <_localeconv_r>:
 80095cc:	4800      	ldr	r0, [pc, #0]	; (80095d0 <_localeconv_r+0x4>)
 80095ce:	4770      	bx	lr
 80095d0:	20000164 	.word	0x20000164

080095d4 <malloc>:
 80095d4:	4b02      	ldr	r3, [pc, #8]	; (80095e0 <malloc+0xc>)
 80095d6:	4601      	mov	r1, r0
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	f000 bd59 	b.w	800a090 <_malloc_r>
 80095de:	bf00      	nop
 80095e0:	2000000c 	.word	0x2000000c

080095e4 <__ascii_mbtowc>:
 80095e4:	b082      	sub	sp, #8
 80095e6:	b901      	cbnz	r1, 80095ea <__ascii_mbtowc+0x6>
 80095e8:	a901      	add	r1, sp, #4
 80095ea:	b142      	cbz	r2, 80095fe <__ascii_mbtowc+0x1a>
 80095ec:	b14b      	cbz	r3, 8009602 <__ascii_mbtowc+0x1e>
 80095ee:	7813      	ldrb	r3, [r2, #0]
 80095f0:	600b      	str	r3, [r1, #0]
 80095f2:	7812      	ldrb	r2, [r2, #0]
 80095f4:	1e10      	subs	r0, r2, #0
 80095f6:	bf18      	it	ne
 80095f8:	2001      	movne	r0, #1
 80095fa:	b002      	add	sp, #8
 80095fc:	4770      	bx	lr
 80095fe:	4610      	mov	r0, r2
 8009600:	e7fb      	b.n	80095fa <__ascii_mbtowc+0x16>
 8009602:	f06f 0001 	mvn.w	r0, #1
 8009606:	e7f8      	b.n	80095fa <__ascii_mbtowc+0x16>

08009608 <_Balloc>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800960c:	4604      	mov	r4, r0
 800960e:	460d      	mov	r5, r1
 8009610:	b976      	cbnz	r6, 8009630 <_Balloc+0x28>
 8009612:	2010      	movs	r0, #16
 8009614:	f7ff ffde 	bl	80095d4 <malloc>
 8009618:	4602      	mov	r2, r0
 800961a:	6260      	str	r0, [r4, #36]	; 0x24
 800961c:	b920      	cbnz	r0, 8009628 <_Balloc+0x20>
 800961e:	4b18      	ldr	r3, [pc, #96]	; (8009680 <_Balloc+0x78>)
 8009620:	4818      	ldr	r0, [pc, #96]	; (8009684 <_Balloc+0x7c>)
 8009622:	2166      	movs	r1, #102	; 0x66
 8009624:	f000 ff3e 	bl	800a4a4 <__assert_func>
 8009628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800962c:	6006      	str	r6, [r0, #0]
 800962e:	60c6      	str	r6, [r0, #12]
 8009630:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009632:	68f3      	ldr	r3, [r6, #12]
 8009634:	b183      	cbz	r3, 8009658 <_Balloc+0x50>
 8009636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800963e:	b9b8      	cbnz	r0, 8009670 <_Balloc+0x68>
 8009640:	2101      	movs	r1, #1
 8009642:	fa01 f605 	lsl.w	r6, r1, r5
 8009646:	1d72      	adds	r2, r6, #5
 8009648:	0092      	lsls	r2, r2, #2
 800964a:	4620      	mov	r0, r4
 800964c:	f000 fc9d 	bl	8009f8a <_calloc_r>
 8009650:	b160      	cbz	r0, 800966c <_Balloc+0x64>
 8009652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009656:	e00e      	b.n	8009676 <_Balloc+0x6e>
 8009658:	2221      	movs	r2, #33	; 0x21
 800965a:	2104      	movs	r1, #4
 800965c:	4620      	mov	r0, r4
 800965e:	f000 fc94 	bl	8009f8a <_calloc_r>
 8009662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009664:	60f0      	str	r0, [r6, #12]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e4      	bne.n	8009636 <_Balloc+0x2e>
 800966c:	2000      	movs	r0, #0
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	6802      	ldr	r2, [r0, #0]
 8009672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009676:	2300      	movs	r3, #0
 8009678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800967c:	e7f7      	b.n	800966e <_Balloc+0x66>
 800967e:	bf00      	nop
 8009680:	0800b4e6 	.word	0x0800b4e6
 8009684:	0800b5e4 	.word	0x0800b5e4

08009688 <_Bfree>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800968c:	4605      	mov	r5, r0
 800968e:	460c      	mov	r4, r1
 8009690:	b976      	cbnz	r6, 80096b0 <_Bfree+0x28>
 8009692:	2010      	movs	r0, #16
 8009694:	f7ff ff9e 	bl	80095d4 <malloc>
 8009698:	4602      	mov	r2, r0
 800969a:	6268      	str	r0, [r5, #36]	; 0x24
 800969c:	b920      	cbnz	r0, 80096a8 <_Bfree+0x20>
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <_Bfree+0x3c>)
 80096a0:	4809      	ldr	r0, [pc, #36]	; (80096c8 <_Bfree+0x40>)
 80096a2:	218a      	movs	r1, #138	; 0x8a
 80096a4:	f000 fefe 	bl	800a4a4 <__assert_func>
 80096a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096ac:	6006      	str	r6, [r0, #0]
 80096ae:	60c6      	str	r6, [r0, #12]
 80096b0:	b13c      	cbz	r4, 80096c2 <_Bfree+0x3a>
 80096b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096b4:	6862      	ldr	r2, [r4, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096bc:	6021      	str	r1, [r4, #0]
 80096be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096c2:	bd70      	pop	{r4, r5, r6, pc}
 80096c4:	0800b4e6 	.word	0x0800b4e6
 80096c8:	0800b5e4 	.word	0x0800b5e4

080096cc <__multadd>:
 80096cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d0:	690d      	ldr	r5, [r1, #16]
 80096d2:	4607      	mov	r7, r0
 80096d4:	460c      	mov	r4, r1
 80096d6:	461e      	mov	r6, r3
 80096d8:	f101 0c14 	add.w	ip, r1, #20
 80096dc:	2000      	movs	r0, #0
 80096de:	f8dc 3000 	ldr.w	r3, [ip]
 80096e2:	b299      	uxth	r1, r3
 80096e4:	fb02 6101 	mla	r1, r2, r1, r6
 80096e8:	0c1e      	lsrs	r6, r3, #16
 80096ea:	0c0b      	lsrs	r3, r1, #16
 80096ec:	fb02 3306 	mla	r3, r2, r6, r3
 80096f0:	b289      	uxth	r1, r1
 80096f2:	3001      	adds	r0, #1
 80096f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096f8:	4285      	cmp	r5, r0
 80096fa:	f84c 1b04 	str.w	r1, [ip], #4
 80096fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009702:	dcec      	bgt.n	80096de <__multadd+0x12>
 8009704:	b30e      	cbz	r6, 800974a <__multadd+0x7e>
 8009706:	68a3      	ldr	r3, [r4, #8]
 8009708:	42ab      	cmp	r3, r5
 800970a:	dc19      	bgt.n	8009740 <__multadd+0x74>
 800970c:	6861      	ldr	r1, [r4, #4]
 800970e:	4638      	mov	r0, r7
 8009710:	3101      	adds	r1, #1
 8009712:	f7ff ff79 	bl	8009608 <_Balloc>
 8009716:	4680      	mov	r8, r0
 8009718:	b928      	cbnz	r0, 8009726 <__multadd+0x5a>
 800971a:	4602      	mov	r2, r0
 800971c:	4b0c      	ldr	r3, [pc, #48]	; (8009750 <__multadd+0x84>)
 800971e:	480d      	ldr	r0, [pc, #52]	; (8009754 <__multadd+0x88>)
 8009720:	21b5      	movs	r1, #181	; 0xb5
 8009722:	f000 febf 	bl	800a4a4 <__assert_func>
 8009726:	6922      	ldr	r2, [r4, #16]
 8009728:	3202      	adds	r2, #2
 800972a:	f104 010c 	add.w	r1, r4, #12
 800972e:	0092      	lsls	r2, r2, #2
 8009730:	300c      	adds	r0, #12
 8009732:	f7fc fffd 	bl	8006730 <memcpy>
 8009736:	4621      	mov	r1, r4
 8009738:	4638      	mov	r0, r7
 800973a:	f7ff ffa5 	bl	8009688 <_Bfree>
 800973e:	4644      	mov	r4, r8
 8009740:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009744:	3501      	adds	r5, #1
 8009746:	615e      	str	r6, [r3, #20]
 8009748:	6125      	str	r5, [r4, #16]
 800974a:	4620      	mov	r0, r4
 800974c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009750:	0800b558 	.word	0x0800b558
 8009754:	0800b5e4 	.word	0x0800b5e4

08009758 <__s2b>:
 8009758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800975c:	460c      	mov	r4, r1
 800975e:	4615      	mov	r5, r2
 8009760:	461f      	mov	r7, r3
 8009762:	2209      	movs	r2, #9
 8009764:	3308      	adds	r3, #8
 8009766:	4606      	mov	r6, r0
 8009768:	fb93 f3f2 	sdiv	r3, r3, r2
 800976c:	2100      	movs	r1, #0
 800976e:	2201      	movs	r2, #1
 8009770:	429a      	cmp	r2, r3
 8009772:	db09      	blt.n	8009788 <__s2b+0x30>
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ff47 	bl	8009608 <_Balloc>
 800977a:	b940      	cbnz	r0, 800978e <__s2b+0x36>
 800977c:	4602      	mov	r2, r0
 800977e:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <__s2b+0x8c>)
 8009780:	4819      	ldr	r0, [pc, #100]	; (80097e8 <__s2b+0x90>)
 8009782:	21ce      	movs	r1, #206	; 0xce
 8009784:	f000 fe8e 	bl	800a4a4 <__assert_func>
 8009788:	0052      	lsls	r2, r2, #1
 800978a:	3101      	adds	r1, #1
 800978c:	e7f0      	b.n	8009770 <__s2b+0x18>
 800978e:	9b08      	ldr	r3, [sp, #32]
 8009790:	6143      	str	r3, [r0, #20]
 8009792:	2d09      	cmp	r5, #9
 8009794:	f04f 0301 	mov.w	r3, #1
 8009798:	6103      	str	r3, [r0, #16]
 800979a:	dd16      	ble.n	80097ca <__s2b+0x72>
 800979c:	f104 0909 	add.w	r9, r4, #9
 80097a0:	46c8      	mov	r8, r9
 80097a2:	442c      	add	r4, r5
 80097a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80097a8:	4601      	mov	r1, r0
 80097aa:	3b30      	subs	r3, #48	; 0x30
 80097ac:	220a      	movs	r2, #10
 80097ae:	4630      	mov	r0, r6
 80097b0:	f7ff ff8c 	bl	80096cc <__multadd>
 80097b4:	45a0      	cmp	r8, r4
 80097b6:	d1f5      	bne.n	80097a4 <__s2b+0x4c>
 80097b8:	f1a5 0408 	sub.w	r4, r5, #8
 80097bc:	444c      	add	r4, r9
 80097be:	1b2d      	subs	r5, r5, r4
 80097c0:	1963      	adds	r3, r4, r5
 80097c2:	42bb      	cmp	r3, r7
 80097c4:	db04      	blt.n	80097d0 <__s2b+0x78>
 80097c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ca:	340a      	adds	r4, #10
 80097cc:	2509      	movs	r5, #9
 80097ce:	e7f6      	b.n	80097be <__s2b+0x66>
 80097d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097d4:	4601      	mov	r1, r0
 80097d6:	3b30      	subs	r3, #48	; 0x30
 80097d8:	220a      	movs	r2, #10
 80097da:	4630      	mov	r0, r6
 80097dc:	f7ff ff76 	bl	80096cc <__multadd>
 80097e0:	e7ee      	b.n	80097c0 <__s2b+0x68>
 80097e2:	bf00      	nop
 80097e4:	0800b558 	.word	0x0800b558
 80097e8:	0800b5e4 	.word	0x0800b5e4

080097ec <__hi0bits>:
 80097ec:	0c03      	lsrs	r3, r0, #16
 80097ee:	041b      	lsls	r3, r3, #16
 80097f0:	b9d3      	cbnz	r3, 8009828 <__hi0bits+0x3c>
 80097f2:	0400      	lsls	r0, r0, #16
 80097f4:	2310      	movs	r3, #16
 80097f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097fa:	bf04      	itt	eq
 80097fc:	0200      	lsleq	r0, r0, #8
 80097fe:	3308      	addeq	r3, #8
 8009800:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009804:	bf04      	itt	eq
 8009806:	0100      	lsleq	r0, r0, #4
 8009808:	3304      	addeq	r3, #4
 800980a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800980e:	bf04      	itt	eq
 8009810:	0080      	lsleq	r0, r0, #2
 8009812:	3302      	addeq	r3, #2
 8009814:	2800      	cmp	r0, #0
 8009816:	db05      	blt.n	8009824 <__hi0bits+0x38>
 8009818:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800981c:	f103 0301 	add.w	r3, r3, #1
 8009820:	bf08      	it	eq
 8009822:	2320      	moveq	r3, #32
 8009824:	4618      	mov	r0, r3
 8009826:	4770      	bx	lr
 8009828:	2300      	movs	r3, #0
 800982a:	e7e4      	b.n	80097f6 <__hi0bits+0xa>

0800982c <__lo0bits>:
 800982c:	6803      	ldr	r3, [r0, #0]
 800982e:	f013 0207 	ands.w	r2, r3, #7
 8009832:	4601      	mov	r1, r0
 8009834:	d00b      	beq.n	800984e <__lo0bits+0x22>
 8009836:	07da      	lsls	r2, r3, #31
 8009838:	d423      	bmi.n	8009882 <__lo0bits+0x56>
 800983a:	0798      	lsls	r0, r3, #30
 800983c:	bf49      	itett	mi
 800983e:	085b      	lsrmi	r3, r3, #1
 8009840:	089b      	lsrpl	r3, r3, #2
 8009842:	2001      	movmi	r0, #1
 8009844:	600b      	strmi	r3, [r1, #0]
 8009846:	bf5c      	itt	pl
 8009848:	600b      	strpl	r3, [r1, #0]
 800984a:	2002      	movpl	r0, #2
 800984c:	4770      	bx	lr
 800984e:	b298      	uxth	r0, r3
 8009850:	b9a8      	cbnz	r0, 800987e <__lo0bits+0x52>
 8009852:	0c1b      	lsrs	r3, r3, #16
 8009854:	2010      	movs	r0, #16
 8009856:	b2da      	uxtb	r2, r3
 8009858:	b90a      	cbnz	r2, 800985e <__lo0bits+0x32>
 800985a:	3008      	adds	r0, #8
 800985c:	0a1b      	lsrs	r3, r3, #8
 800985e:	071a      	lsls	r2, r3, #28
 8009860:	bf04      	itt	eq
 8009862:	091b      	lsreq	r3, r3, #4
 8009864:	3004      	addeq	r0, #4
 8009866:	079a      	lsls	r2, r3, #30
 8009868:	bf04      	itt	eq
 800986a:	089b      	lsreq	r3, r3, #2
 800986c:	3002      	addeq	r0, #2
 800986e:	07da      	lsls	r2, r3, #31
 8009870:	d403      	bmi.n	800987a <__lo0bits+0x4e>
 8009872:	085b      	lsrs	r3, r3, #1
 8009874:	f100 0001 	add.w	r0, r0, #1
 8009878:	d005      	beq.n	8009886 <__lo0bits+0x5a>
 800987a:	600b      	str	r3, [r1, #0]
 800987c:	4770      	bx	lr
 800987e:	4610      	mov	r0, r2
 8009880:	e7e9      	b.n	8009856 <__lo0bits+0x2a>
 8009882:	2000      	movs	r0, #0
 8009884:	4770      	bx	lr
 8009886:	2020      	movs	r0, #32
 8009888:	4770      	bx	lr
	...

0800988c <__i2b>:
 800988c:	b510      	push	{r4, lr}
 800988e:	460c      	mov	r4, r1
 8009890:	2101      	movs	r1, #1
 8009892:	f7ff feb9 	bl	8009608 <_Balloc>
 8009896:	4602      	mov	r2, r0
 8009898:	b928      	cbnz	r0, 80098a6 <__i2b+0x1a>
 800989a:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <__i2b+0x24>)
 800989c:	4805      	ldr	r0, [pc, #20]	; (80098b4 <__i2b+0x28>)
 800989e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098a2:	f000 fdff 	bl	800a4a4 <__assert_func>
 80098a6:	2301      	movs	r3, #1
 80098a8:	6144      	str	r4, [r0, #20]
 80098aa:	6103      	str	r3, [r0, #16]
 80098ac:	bd10      	pop	{r4, pc}
 80098ae:	bf00      	nop
 80098b0:	0800b558 	.word	0x0800b558
 80098b4:	0800b5e4 	.word	0x0800b5e4

080098b8 <__multiply>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	4691      	mov	r9, r2
 80098be:	690a      	ldr	r2, [r1, #16]
 80098c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	bfb8      	it	lt
 80098c8:	460b      	movlt	r3, r1
 80098ca:	460c      	mov	r4, r1
 80098cc:	bfbc      	itt	lt
 80098ce:	464c      	movlt	r4, r9
 80098d0:	4699      	movlt	r9, r3
 80098d2:	6927      	ldr	r7, [r4, #16]
 80098d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098d8:	68a3      	ldr	r3, [r4, #8]
 80098da:	6861      	ldr	r1, [r4, #4]
 80098dc:	eb07 060a 	add.w	r6, r7, sl
 80098e0:	42b3      	cmp	r3, r6
 80098e2:	b085      	sub	sp, #20
 80098e4:	bfb8      	it	lt
 80098e6:	3101      	addlt	r1, #1
 80098e8:	f7ff fe8e 	bl	8009608 <_Balloc>
 80098ec:	b930      	cbnz	r0, 80098fc <__multiply+0x44>
 80098ee:	4602      	mov	r2, r0
 80098f0:	4b44      	ldr	r3, [pc, #272]	; (8009a04 <__multiply+0x14c>)
 80098f2:	4845      	ldr	r0, [pc, #276]	; (8009a08 <__multiply+0x150>)
 80098f4:	f240 115d 	movw	r1, #349	; 0x15d
 80098f8:	f000 fdd4 	bl	800a4a4 <__assert_func>
 80098fc:	f100 0514 	add.w	r5, r0, #20
 8009900:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009904:	462b      	mov	r3, r5
 8009906:	2200      	movs	r2, #0
 8009908:	4543      	cmp	r3, r8
 800990a:	d321      	bcc.n	8009950 <__multiply+0x98>
 800990c:	f104 0314 	add.w	r3, r4, #20
 8009910:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009914:	f109 0314 	add.w	r3, r9, #20
 8009918:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800991c:	9202      	str	r2, [sp, #8]
 800991e:	1b3a      	subs	r2, r7, r4
 8009920:	3a15      	subs	r2, #21
 8009922:	f022 0203 	bic.w	r2, r2, #3
 8009926:	3204      	adds	r2, #4
 8009928:	f104 0115 	add.w	r1, r4, #21
 800992c:	428f      	cmp	r7, r1
 800992e:	bf38      	it	cc
 8009930:	2204      	movcc	r2, #4
 8009932:	9201      	str	r2, [sp, #4]
 8009934:	9a02      	ldr	r2, [sp, #8]
 8009936:	9303      	str	r3, [sp, #12]
 8009938:	429a      	cmp	r2, r3
 800993a:	d80c      	bhi.n	8009956 <__multiply+0x9e>
 800993c:	2e00      	cmp	r6, #0
 800993e:	dd03      	ble.n	8009948 <__multiply+0x90>
 8009940:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009944:	2b00      	cmp	r3, #0
 8009946:	d05a      	beq.n	80099fe <__multiply+0x146>
 8009948:	6106      	str	r6, [r0, #16]
 800994a:	b005      	add	sp, #20
 800994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009950:	f843 2b04 	str.w	r2, [r3], #4
 8009954:	e7d8      	b.n	8009908 <__multiply+0x50>
 8009956:	f8b3 a000 	ldrh.w	sl, [r3]
 800995a:	f1ba 0f00 	cmp.w	sl, #0
 800995e:	d024      	beq.n	80099aa <__multiply+0xf2>
 8009960:	f104 0e14 	add.w	lr, r4, #20
 8009964:	46a9      	mov	r9, r5
 8009966:	f04f 0c00 	mov.w	ip, #0
 800996a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800996e:	f8d9 1000 	ldr.w	r1, [r9]
 8009972:	fa1f fb82 	uxth.w	fp, r2
 8009976:	b289      	uxth	r1, r1
 8009978:	fb0a 110b 	mla	r1, sl, fp, r1
 800997c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009980:	f8d9 2000 	ldr.w	r2, [r9]
 8009984:	4461      	add	r1, ip
 8009986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800998a:	fb0a c20b 	mla	r2, sl, fp, ip
 800998e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009992:	b289      	uxth	r1, r1
 8009994:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009998:	4577      	cmp	r7, lr
 800999a:	f849 1b04 	str.w	r1, [r9], #4
 800999e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099a2:	d8e2      	bhi.n	800996a <__multiply+0xb2>
 80099a4:	9a01      	ldr	r2, [sp, #4]
 80099a6:	f845 c002 	str.w	ip, [r5, r2]
 80099aa:	9a03      	ldr	r2, [sp, #12]
 80099ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099b0:	3304      	adds	r3, #4
 80099b2:	f1b9 0f00 	cmp.w	r9, #0
 80099b6:	d020      	beq.n	80099fa <__multiply+0x142>
 80099b8:	6829      	ldr	r1, [r5, #0]
 80099ba:	f104 0c14 	add.w	ip, r4, #20
 80099be:	46ae      	mov	lr, r5
 80099c0:	f04f 0a00 	mov.w	sl, #0
 80099c4:	f8bc b000 	ldrh.w	fp, [ip]
 80099c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099cc:	fb09 220b 	mla	r2, r9, fp, r2
 80099d0:	4492      	add	sl, r2
 80099d2:	b289      	uxth	r1, r1
 80099d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80099d8:	f84e 1b04 	str.w	r1, [lr], #4
 80099dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099e0:	f8be 1000 	ldrh.w	r1, [lr]
 80099e4:	0c12      	lsrs	r2, r2, #16
 80099e6:	fb09 1102 	mla	r1, r9, r2, r1
 80099ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099ee:	4567      	cmp	r7, ip
 80099f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099f4:	d8e6      	bhi.n	80099c4 <__multiply+0x10c>
 80099f6:	9a01      	ldr	r2, [sp, #4]
 80099f8:	50a9      	str	r1, [r5, r2]
 80099fa:	3504      	adds	r5, #4
 80099fc:	e79a      	b.n	8009934 <__multiply+0x7c>
 80099fe:	3e01      	subs	r6, #1
 8009a00:	e79c      	b.n	800993c <__multiply+0x84>
 8009a02:	bf00      	nop
 8009a04:	0800b558 	.word	0x0800b558
 8009a08:	0800b5e4 	.word	0x0800b5e4

08009a0c <__pow5mult>:
 8009a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a10:	4615      	mov	r5, r2
 8009a12:	f012 0203 	ands.w	r2, r2, #3
 8009a16:	4606      	mov	r6, r0
 8009a18:	460f      	mov	r7, r1
 8009a1a:	d007      	beq.n	8009a2c <__pow5mult+0x20>
 8009a1c:	4c25      	ldr	r4, [pc, #148]	; (8009ab4 <__pow5mult+0xa8>)
 8009a1e:	3a01      	subs	r2, #1
 8009a20:	2300      	movs	r3, #0
 8009a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a26:	f7ff fe51 	bl	80096cc <__multadd>
 8009a2a:	4607      	mov	r7, r0
 8009a2c:	10ad      	asrs	r5, r5, #2
 8009a2e:	d03d      	beq.n	8009aac <__pow5mult+0xa0>
 8009a30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a32:	b97c      	cbnz	r4, 8009a54 <__pow5mult+0x48>
 8009a34:	2010      	movs	r0, #16
 8009a36:	f7ff fdcd 	bl	80095d4 <malloc>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a3e:	b928      	cbnz	r0, 8009a4c <__pow5mult+0x40>
 8009a40:	4b1d      	ldr	r3, [pc, #116]	; (8009ab8 <__pow5mult+0xac>)
 8009a42:	481e      	ldr	r0, [pc, #120]	; (8009abc <__pow5mult+0xb0>)
 8009a44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a48:	f000 fd2c 	bl	800a4a4 <__assert_func>
 8009a4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a50:	6004      	str	r4, [r0, #0]
 8009a52:	60c4      	str	r4, [r0, #12]
 8009a54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a5c:	b94c      	cbnz	r4, 8009a72 <__pow5mult+0x66>
 8009a5e:	f240 2171 	movw	r1, #625	; 0x271
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7ff ff12 	bl	800988c <__i2b>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a6e:	4604      	mov	r4, r0
 8009a70:	6003      	str	r3, [r0, #0]
 8009a72:	f04f 0900 	mov.w	r9, #0
 8009a76:	07eb      	lsls	r3, r5, #31
 8009a78:	d50a      	bpl.n	8009a90 <__pow5mult+0x84>
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f7ff ff1a 	bl	80098b8 <__multiply>
 8009a84:	4639      	mov	r1, r7
 8009a86:	4680      	mov	r8, r0
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7ff fdfd 	bl	8009688 <_Bfree>
 8009a8e:	4647      	mov	r7, r8
 8009a90:	106d      	asrs	r5, r5, #1
 8009a92:	d00b      	beq.n	8009aac <__pow5mult+0xa0>
 8009a94:	6820      	ldr	r0, [r4, #0]
 8009a96:	b938      	cbnz	r0, 8009aa8 <__pow5mult+0x9c>
 8009a98:	4622      	mov	r2, r4
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f7ff ff0b 	bl	80098b8 <__multiply>
 8009aa2:	6020      	str	r0, [r4, #0]
 8009aa4:	f8c0 9000 	str.w	r9, [r0]
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	e7e4      	b.n	8009a76 <__pow5mult+0x6a>
 8009aac:	4638      	mov	r0, r7
 8009aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab2:	bf00      	nop
 8009ab4:	0800b730 	.word	0x0800b730
 8009ab8:	0800b4e6 	.word	0x0800b4e6
 8009abc:	0800b5e4 	.word	0x0800b5e4

08009ac0 <__lshift>:
 8009ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	6849      	ldr	r1, [r1, #4]
 8009ac8:	6923      	ldr	r3, [r4, #16]
 8009aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ace:	68a3      	ldr	r3, [r4, #8]
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	4691      	mov	r9, r2
 8009ad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ad8:	f108 0601 	add.w	r6, r8, #1
 8009adc:	42b3      	cmp	r3, r6
 8009ade:	db0b      	blt.n	8009af8 <__lshift+0x38>
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	f7ff fd91 	bl	8009608 <_Balloc>
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	b948      	cbnz	r0, 8009afe <__lshift+0x3e>
 8009aea:	4602      	mov	r2, r0
 8009aec:	4b2a      	ldr	r3, [pc, #168]	; (8009b98 <__lshift+0xd8>)
 8009aee:	482b      	ldr	r0, [pc, #172]	; (8009b9c <__lshift+0xdc>)
 8009af0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009af4:	f000 fcd6 	bl	800a4a4 <__assert_func>
 8009af8:	3101      	adds	r1, #1
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	e7ee      	b.n	8009adc <__lshift+0x1c>
 8009afe:	2300      	movs	r3, #0
 8009b00:	f100 0114 	add.w	r1, r0, #20
 8009b04:	f100 0210 	add.w	r2, r0, #16
 8009b08:	4618      	mov	r0, r3
 8009b0a:	4553      	cmp	r3, sl
 8009b0c:	db37      	blt.n	8009b7e <__lshift+0xbe>
 8009b0e:	6920      	ldr	r0, [r4, #16]
 8009b10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b14:	f104 0314 	add.w	r3, r4, #20
 8009b18:	f019 091f 	ands.w	r9, r9, #31
 8009b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b24:	d02f      	beq.n	8009b86 <__lshift+0xc6>
 8009b26:	f1c9 0e20 	rsb	lr, r9, #32
 8009b2a:	468a      	mov	sl, r1
 8009b2c:	f04f 0c00 	mov.w	ip, #0
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	fa02 f209 	lsl.w	r2, r2, r9
 8009b36:	ea42 020c 	orr.w	r2, r2, ip
 8009b3a:	f84a 2b04 	str.w	r2, [sl], #4
 8009b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b42:	4298      	cmp	r0, r3
 8009b44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b48:	d8f2      	bhi.n	8009b30 <__lshift+0x70>
 8009b4a:	1b03      	subs	r3, r0, r4
 8009b4c:	3b15      	subs	r3, #21
 8009b4e:	f023 0303 	bic.w	r3, r3, #3
 8009b52:	3304      	adds	r3, #4
 8009b54:	f104 0215 	add.w	r2, r4, #21
 8009b58:	4290      	cmp	r0, r2
 8009b5a:	bf38      	it	cc
 8009b5c:	2304      	movcc	r3, #4
 8009b5e:	f841 c003 	str.w	ip, [r1, r3]
 8009b62:	f1bc 0f00 	cmp.w	ip, #0
 8009b66:	d001      	beq.n	8009b6c <__lshift+0xac>
 8009b68:	f108 0602 	add.w	r6, r8, #2
 8009b6c:	3e01      	subs	r6, #1
 8009b6e:	4638      	mov	r0, r7
 8009b70:	612e      	str	r6, [r5, #16]
 8009b72:	4621      	mov	r1, r4
 8009b74:	f7ff fd88 	bl	8009688 <_Bfree>
 8009b78:	4628      	mov	r0, r5
 8009b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b82:	3301      	adds	r3, #1
 8009b84:	e7c1      	b.n	8009b0a <__lshift+0x4a>
 8009b86:	3904      	subs	r1, #4
 8009b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b90:	4298      	cmp	r0, r3
 8009b92:	d8f9      	bhi.n	8009b88 <__lshift+0xc8>
 8009b94:	e7ea      	b.n	8009b6c <__lshift+0xac>
 8009b96:	bf00      	nop
 8009b98:	0800b558 	.word	0x0800b558
 8009b9c:	0800b5e4 	.word	0x0800b5e4

08009ba0 <__mcmp>:
 8009ba0:	b530      	push	{r4, r5, lr}
 8009ba2:	6902      	ldr	r2, [r0, #16]
 8009ba4:	690c      	ldr	r4, [r1, #16]
 8009ba6:	1b12      	subs	r2, r2, r4
 8009ba8:	d10e      	bne.n	8009bc8 <__mcmp+0x28>
 8009baa:	f100 0314 	add.w	r3, r0, #20
 8009bae:	3114      	adds	r1, #20
 8009bb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009bbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bc0:	42a5      	cmp	r5, r4
 8009bc2:	d003      	beq.n	8009bcc <__mcmp+0x2c>
 8009bc4:	d305      	bcc.n	8009bd2 <__mcmp+0x32>
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4610      	mov	r0, r2
 8009bca:	bd30      	pop	{r4, r5, pc}
 8009bcc:	4283      	cmp	r3, r0
 8009bce:	d3f3      	bcc.n	8009bb8 <__mcmp+0x18>
 8009bd0:	e7fa      	b.n	8009bc8 <__mcmp+0x28>
 8009bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd6:	e7f7      	b.n	8009bc8 <__mcmp+0x28>

08009bd8 <__mdiff>:
 8009bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	460c      	mov	r4, r1
 8009bde:	4606      	mov	r6, r0
 8009be0:	4611      	mov	r1, r2
 8009be2:	4620      	mov	r0, r4
 8009be4:	4690      	mov	r8, r2
 8009be6:	f7ff ffdb 	bl	8009ba0 <__mcmp>
 8009bea:	1e05      	subs	r5, r0, #0
 8009bec:	d110      	bne.n	8009c10 <__mdiff+0x38>
 8009bee:	4629      	mov	r1, r5
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	f7ff fd09 	bl	8009608 <_Balloc>
 8009bf6:	b930      	cbnz	r0, 8009c06 <__mdiff+0x2e>
 8009bf8:	4b3a      	ldr	r3, [pc, #232]	; (8009ce4 <__mdiff+0x10c>)
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	f240 2132 	movw	r1, #562	; 0x232
 8009c00:	4839      	ldr	r0, [pc, #228]	; (8009ce8 <__mdiff+0x110>)
 8009c02:	f000 fc4f 	bl	800a4a4 <__assert_func>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c10:	bfa4      	itt	ge
 8009c12:	4643      	movge	r3, r8
 8009c14:	46a0      	movge	r8, r4
 8009c16:	4630      	mov	r0, r6
 8009c18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c1c:	bfa6      	itte	ge
 8009c1e:	461c      	movge	r4, r3
 8009c20:	2500      	movge	r5, #0
 8009c22:	2501      	movlt	r5, #1
 8009c24:	f7ff fcf0 	bl	8009608 <_Balloc>
 8009c28:	b920      	cbnz	r0, 8009c34 <__mdiff+0x5c>
 8009c2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ce4 <__mdiff+0x10c>)
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c32:	e7e5      	b.n	8009c00 <__mdiff+0x28>
 8009c34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c38:	6926      	ldr	r6, [r4, #16]
 8009c3a:	60c5      	str	r5, [r0, #12]
 8009c3c:	f104 0914 	add.w	r9, r4, #20
 8009c40:	f108 0514 	add.w	r5, r8, #20
 8009c44:	f100 0e14 	add.w	lr, r0, #20
 8009c48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c50:	f108 0210 	add.w	r2, r8, #16
 8009c54:	46f2      	mov	sl, lr
 8009c56:	2100      	movs	r1, #0
 8009c58:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c60:	fa1f f883 	uxth.w	r8, r3
 8009c64:	fa11 f18b 	uxtah	r1, r1, fp
 8009c68:	0c1b      	lsrs	r3, r3, #16
 8009c6a:	eba1 0808 	sub.w	r8, r1, r8
 8009c6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c76:	fa1f f888 	uxth.w	r8, r8
 8009c7a:	1419      	asrs	r1, r3, #16
 8009c7c:	454e      	cmp	r6, r9
 8009c7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c82:	f84a 3b04 	str.w	r3, [sl], #4
 8009c86:	d8e7      	bhi.n	8009c58 <__mdiff+0x80>
 8009c88:	1b33      	subs	r3, r6, r4
 8009c8a:	3b15      	subs	r3, #21
 8009c8c:	f023 0303 	bic.w	r3, r3, #3
 8009c90:	3304      	adds	r3, #4
 8009c92:	3415      	adds	r4, #21
 8009c94:	42a6      	cmp	r6, r4
 8009c96:	bf38      	it	cc
 8009c98:	2304      	movcc	r3, #4
 8009c9a:	441d      	add	r5, r3
 8009c9c:	4473      	add	r3, lr
 8009c9e:	469e      	mov	lr, r3
 8009ca0:	462e      	mov	r6, r5
 8009ca2:	4566      	cmp	r6, ip
 8009ca4:	d30e      	bcc.n	8009cc4 <__mdiff+0xec>
 8009ca6:	f10c 0203 	add.w	r2, ip, #3
 8009caa:	1b52      	subs	r2, r2, r5
 8009cac:	f022 0203 	bic.w	r2, r2, #3
 8009cb0:	3d03      	subs	r5, #3
 8009cb2:	45ac      	cmp	ip, r5
 8009cb4:	bf38      	it	cc
 8009cb6:	2200      	movcc	r2, #0
 8009cb8:	441a      	add	r2, r3
 8009cba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009cbe:	b17b      	cbz	r3, 8009ce0 <__mdiff+0x108>
 8009cc0:	6107      	str	r7, [r0, #16]
 8009cc2:	e7a3      	b.n	8009c0c <__mdiff+0x34>
 8009cc4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cc8:	fa11 f288 	uxtah	r2, r1, r8
 8009ccc:	1414      	asrs	r4, r2, #16
 8009cce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cd8:	f84e 2b04 	str.w	r2, [lr], #4
 8009cdc:	1421      	asrs	r1, r4, #16
 8009cde:	e7e0      	b.n	8009ca2 <__mdiff+0xca>
 8009ce0:	3f01      	subs	r7, #1
 8009ce2:	e7ea      	b.n	8009cba <__mdiff+0xe2>
 8009ce4:	0800b558 	.word	0x0800b558
 8009ce8:	0800b5e4 	.word	0x0800b5e4

08009cec <__ulp>:
 8009cec:	b082      	sub	sp, #8
 8009cee:	ed8d 0b00 	vstr	d0, [sp]
 8009cf2:	9b01      	ldr	r3, [sp, #4]
 8009cf4:	4912      	ldr	r1, [pc, #72]	; (8009d40 <__ulp+0x54>)
 8009cf6:	4019      	ands	r1, r3
 8009cf8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	dd05      	ble.n	8009d0c <__ulp+0x20>
 8009d00:	2200      	movs	r2, #0
 8009d02:	460b      	mov	r3, r1
 8009d04:	ec43 2b10 	vmov	d0, r2, r3
 8009d08:	b002      	add	sp, #8
 8009d0a:	4770      	bx	lr
 8009d0c:	4249      	negs	r1, r1
 8009d0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009d12:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009d16:	f04f 0200 	mov.w	r2, #0
 8009d1a:	f04f 0300 	mov.w	r3, #0
 8009d1e:	da04      	bge.n	8009d2a <__ulp+0x3e>
 8009d20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009d24:	fa41 f300 	asr.w	r3, r1, r0
 8009d28:	e7ec      	b.n	8009d04 <__ulp+0x18>
 8009d2a:	f1a0 0114 	sub.w	r1, r0, #20
 8009d2e:	291e      	cmp	r1, #30
 8009d30:	bfda      	itte	le
 8009d32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009d36:	fa20 f101 	lsrle.w	r1, r0, r1
 8009d3a:	2101      	movgt	r1, #1
 8009d3c:	460a      	mov	r2, r1
 8009d3e:	e7e1      	b.n	8009d04 <__ulp+0x18>
 8009d40:	7ff00000 	.word	0x7ff00000

08009d44 <__b2d>:
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d46:	6905      	ldr	r5, [r0, #16]
 8009d48:	f100 0714 	add.w	r7, r0, #20
 8009d4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d50:	1f2e      	subs	r6, r5, #4
 8009d52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7ff fd48 	bl	80097ec <__hi0bits>
 8009d5c:	f1c0 0320 	rsb	r3, r0, #32
 8009d60:	280a      	cmp	r0, #10
 8009d62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009de0 <__b2d+0x9c>
 8009d66:	600b      	str	r3, [r1, #0]
 8009d68:	dc14      	bgt.n	8009d94 <__b2d+0x50>
 8009d6a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d6e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d72:	42b7      	cmp	r7, r6
 8009d74:	ea41 030c 	orr.w	r3, r1, ip
 8009d78:	bf34      	ite	cc
 8009d7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d7e:	2100      	movcs	r1, #0
 8009d80:	3015      	adds	r0, #21
 8009d82:	fa04 f000 	lsl.w	r0, r4, r0
 8009d86:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d8a:	ea40 0201 	orr.w	r2, r0, r1
 8009d8e:	ec43 2b10 	vmov	d0, r2, r3
 8009d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d94:	42b7      	cmp	r7, r6
 8009d96:	bf3a      	itte	cc
 8009d98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d9c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009da0:	2100      	movcs	r1, #0
 8009da2:	380b      	subs	r0, #11
 8009da4:	d017      	beq.n	8009dd6 <__b2d+0x92>
 8009da6:	f1c0 0c20 	rsb	ip, r0, #32
 8009daa:	fa04 f500 	lsl.w	r5, r4, r0
 8009dae:	42be      	cmp	r6, r7
 8009db0:	fa21 f40c 	lsr.w	r4, r1, ip
 8009db4:	ea45 0504 	orr.w	r5, r5, r4
 8009db8:	bf8c      	ite	hi
 8009dba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009dbe:	2400      	movls	r4, #0
 8009dc0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009dc4:	fa01 f000 	lsl.w	r0, r1, r0
 8009dc8:	fa24 f40c 	lsr.w	r4, r4, ip
 8009dcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009dd0:	ea40 0204 	orr.w	r2, r0, r4
 8009dd4:	e7db      	b.n	8009d8e <__b2d+0x4a>
 8009dd6:	ea44 030c 	orr.w	r3, r4, ip
 8009dda:	460a      	mov	r2, r1
 8009ddc:	e7d7      	b.n	8009d8e <__b2d+0x4a>
 8009dde:	bf00      	nop
 8009de0:	3ff00000 	.word	0x3ff00000

08009de4 <__d2b>:
 8009de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009de8:	4689      	mov	r9, r1
 8009dea:	2101      	movs	r1, #1
 8009dec:	ec57 6b10 	vmov	r6, r7, d0
 8009df0:	4690      	mov	r8, r2
 8009df2:	f7ff fc09 	bl	8009608 <_Balloc>
 8009df6:	4604      	mov	r4, r0
 8009df8:	b930      	cbnz	r0, 8009e08 <__d2b+0x24>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	4b25      	ldr	r3, [pc, #148]	; (8009e94 <__d2b+0xb0>)
 8009dfe:	4826      	ldr	r0, [pc, #152]	; (8009e98 <__d2b+0xb4>)
 8009e00:	f240 310a 	movw	r1, #778	; 0x30a
 8009e04:	f000 fb4e 	bl	800a4a4 <__assert_func>
 8009e08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e10:	bb35      	cbnz	r5, 8009e60 <__d2b+0x7c>
 8009e12:	2e00      	cmp	r6, #0
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	d028      	beq.n	8009e6a <__d2b+0x86>
 8009e18:	4668      	mov	r0, sp
 8009e1a:	9600      	str	r6, [sp, #0]
 8009e1c:	f7ff fd06 	bl	800982c <__lo0bits>
 8009e20:	9900      	ldr	r1, [sp, #0]
 8009e22:	b300      	cbz	r0, 8009e66 <__d2b+0x82>
 8009e24:	9a01      	ldr	r2, [sp, #4]
 8009e26:	f1c0 0320 	rsb	r3, r0, #32
 8009e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2e:	430b      	orrs	r3, r1
 8009e30:	40c2      	lsrs	r2, r0
 8009e32:	6163      	str	r3, [r4, #20]
 8009e34:	9201      	str	r2, [sp, #4]
 8009e36:	9b01      	ldr	r3, [sp, #4]
 8009e38:	61a3      	str	r3, [r4, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bf14      	ite	ne
 8009e3e:	2202      	movne	r2, #2
 8009e40:	2201      	moveq	r2, #1
 8009e42:	6122      	str	r2, [r4, #16]
 8009e44:	b1d5      	cbz	r5, 8009e7c <__d2b+0x98>
 8009e46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e4a:	4405      	add	r5, r0
 8009e4c:	f8c9 5000 	str.w	r5, [r9]
 8009e50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e54:	f8c8 0000 	str.w	r0, [r8]
 8009e58:	4620      	mov	r0, r4
 8009e5a:	b003      	add	sp, #12
 8009e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e64:	e7d5      	b.n	8009e12 <__d2b+0x2e>
 8009e66:	6161      	str	r1, [r4, #20]
 8009e68:	e7e5      	b.n	8009e36 <__d2b+0x52>
 8009e6a:	a801      	add	r0, sp, #4
 8009e6c:	f7ff fcde 	bl	800982c <__lo0bits>
 8009e70:	9b01      	ldr	r3, [sp, #4]
 8009e72:	6163      	str	r3, [r4, #20]
 8009e74:	2201      	movs	r2, #1
 8009e76:	6122      	str	r2, [r4, #16]
 8009e78:	3020      	adds	r0, #32
 8009e7a:	e7e3      	b.n	8009e44 <__d2b+0x60>
 8009e7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e84:	f8c9 0000 	str.w	r0, [r9]
 8009e88:	6918      	ldr	r0, [r3, #16]
 8009e8a:	f7ff fcaf 	bl	80097ec <__hi0bits>
 8009e8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e92:	e7df      	b.n	8009e54 <__d2b+0x70>
 8009e94:	0800b558 	.word	0x0800b558
 8009e98:	0800b5e4 	.word	0x0800b5e4

08009e9c <__ratio>:
 8009e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	4688      	mov	r8, r1
 8009ea2:	4669      	mov	r1, sp
 8009ea4:	4681      	mov	r9, r0
 8009ea6:	f7ff ff4d 	bl	8009d44 <__b2d>
 8009eaa:	a901      	add	r1, sp, #4
 8009eac:	4640      	mov	r0, r8
 8009eae:	ec55 4b10 	vmov	r4, r5, d0
 8009eb2:	f7ff ff47 	bl	8009d44 <__b2d>
 8009eb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009eba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ebe:	eba3 0c02 	sub.w	ip, r3, r2
 8009ec2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ecc:	ec51 0b10 	vmov	r0, r1, d0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	bfd6      	itet	le
 8009ed4:	460a      	movle	r2, r1
 8009ed6:	462a      	movgt	r2, r5
 8009ed8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009edc:	468b      	mov	fp, r1
 8009ede:	462f      	mov	r7, r5
 8009ee0:	bfd4      	ite	le
 8009ee2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ee6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009eea:	4620      	mov	r0, r4
 8009eec:	ee10 2a10 	vmov	r2, s0
 8009ef0:	465b      	mov	r3, fp
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f7f6 fcb2 	bl	800085c <__aeabi_ddiv>
 8009ef8:	ec41 0b10 	vmov	d0, r0, r1
 8009efc:	b003      	add	sp, #12
 8009efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f02 <__copybits>:
 8009f02:	3901      	subs	r1, #1
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	1149      	asrs	r1, r1, #5
 8009f08:	6914      	ldr	r4, [r2, #16]
 8009f0a:	3101      	adds	r1, #1
 8009f0c:	f102 0314 	add.w	r3, r2, #20
 8009f10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f18:	1f05      	subs	r5, r0, #4
 8009f1a:	42a3      	cmp	r3, r4
 8009f1c:	d30c      	bcc.n	8009f38 <__copybits+0x36>
 8009f1e:	1aa3      	subs	r3, r4, r2
 8009f20:	3b11      	subs	r3, #17
 8009f22:	f023 0303 	bic.w	r3, r3, #3
 8009f26:	3211      	adds	r2, #17
 8009f28:	42a2      	cmp	r2, r4
 8009f2a:	bf88      	it	hi
 8009f2c:	2300      	movhi	r3, #0
 8009f2e:	4418      	add	r0, r3
 8009f30:	2300      	movs	r3, #0
 8009f32:	4288      	cmp	r0, r1
 8009f34:	d305      	bcc.n	8009f42 <__copybits+0x40>
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f3c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f40:	e7eb      	b.n	8009f1a <__copybits+0x18>
 8009f42:	f840 3b04 	str.w	r3, [r0], #4
 8009f46:	e7f4      	b.n	8009f32 <__copybits+0x30>

08009f48 <__any_on>:
 8009f48:	f100 0214 	add.w	r2, r0, #20
 8009f4c:	6900      	ldr	r0, [r0, #16]
 8009f4e:	114b      	asrs	r3, r1, #5
 8009f50:	4298      	cmp	r0, r3
 8009f52:	b510      	push	{r4, lr}
 8009f54:	db11      	blt.n	8009f7a <__any_on+0x32>
 8009f56:	dd0a      	ble.n	8009f6e <__any_on+0x26>
 8009f58:	f011 011f 	ands.w	r1, r1, #31
 8009f5c:	d007      	beq.n	8009f6e <__any_on+0x26>
 8009f5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f62:	fa24 f001 	lsr.w	r0, r4, r1
 8009f66:	fa00 f101 	lsl.w	r1, r0, r1
 8009f6a:	428c      	cmp	r4, r1
 8009f6c:	d10b      	bne.n	8009f86 <__any_on+0x3e>
 8009f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d803      	bhi.n	8009f7e <__any_on+0x36>
 8009f76:	2000      	movs	r0, #0
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	e7f7      	b.n	8009f6e <__any_on+0x26>
 8009f7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f82:	2900      	cmp	r1, #0
 8009f84:	d0f5      	beq.n	8009f72 <__any_on+0x2a>
 8009f86:	2001      	movs	r0, #1
 8009f88:	e7f6      	b.n	8009f78 <__any_on+0x30>

08009f8a <_calloc_r>:
 8009f8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f8c:	fba1 2402 	umull	r2, r4, r1, r2
 8009f90:	b94c      	cbnz	r4, 8009fa6 <_calloc_r+0x1c>
 8009f92:	4611      	mov	r1, r2
 8009f94:	9201      	str	r2, [sp, #4]
 8009f96:	f000 f87b 	bl	800a090 <_malloc_r>
 8009f9a:	9a01      	ldr	r2, [sp, #4]
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	b930      	cbnz	r0, 8009fae <_calloc_r+0x24>
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	b003      	add	sp, #12
 8009fa4:	bd30      	pop	{r4, r5, pc}
 8009fa6:	220c      	movs	r2, #12
 8009fa8:	6002      	str	r2, [r0, #0]
 8009faa:	2500      	movs	r5, #0
 8009fac:	e7f8      	b.n	8009fa0 <_calloc_r+0x16>
 8009fae:	4621      	mov	r1, r4
 8009fb0:	f7fc fbcc 	bl	800674c <memset>
 8009fb4:	e7f4      	b.n	8009fa0 <_calloc_r+0x16>
	...

08009fb8 <_free_r>:
 8009fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fba:	2900      	cmp	r1, #0
 8009fbc:	d044      	beq.n	800a048 <_free_r+0x90>
 8009fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fc2:	9001      	str	r0, [sp, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8009fca:	bfb8      	it	lt
 8009fcc:	18e4      	addlt	r4, r4, r3
 8009fce:	f000 fab3 	bl	800a538 <__malloc_lock>
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	; (800a04c <_free_r+0x94>)
 8009fd4:	9801      	ldr	r0, [sp, #4]
 8009fd6:	6813      	ldr	r3, [r2, #0]
 8009fd8:	b933      	cbnz	r3, 8009fe8 <_free_r+0x30>
 8009fda:	6063      	str	r3, [r4, #4]
 8009fdc:	6014      	str	r4, [r2, #0]
 8009fde:	b003      	add	sp, #12
 8009fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fe4:	f000 baae 	b.w	800a544 <__malloc_unlock>
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	d908      	bls.n	8009ffe <_free_r+0x46>
 8009fec:	6825      	ldr	r5, [r4, #0]
 8009fee:	1961      	adds	r1, r4, r5
 8009ff0:	428b      	cmp	r3, r1
 8009ff2:	bf01      	itttt	eq
 8009ff4:	6819      	ldreq	r1, [r3, #0]
 8009ff6:	685b      	ldreq	r3, [r3, #4]
 8009ff8:	1949      	addeq	r1, r1, r5
 8009ffa:	6021      	streq	r1, [r4, #0]
 8009ffc:	e7ed      	b.n	8009fda <_free_r+0x22>
 8009ffe:	461a      	mov	r2, r3
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	b10b      	cbz	r3, 800a008 <_free_r+0x50>
 800a004:	42a3      	cmp	r3, r4
 800a006:	d9fa      	bls.n	8009ffe <_free_r+0x46>
 800a008:	6811      	ldr	r1, [r2, #0]
 800a00a:	1855      	adds	r5, r2, r1
 800a00c:	42a5      	cmp	r5, r4
 800a00e:	d10b      	bne.n	800a028 <_free_r+0x70>
 800a010:	6824      	ldr	r4, [r4, #0]
 800a012:	4421      	add	r1, r4
 800a014:	1854      	adds	r4, r2, r1
 800a016:	42a3      	cmp	r3, r4
 800a018:	6011      	str	r1, [r2, #0]
 800a01a:	d1e0      	bne.n	8009fde <_free_r+0x26>
 800a01c:	681c      	ldr	r4, [r3, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	6053      	str	r3, [r2, #4]
 800a022:	4421      	add	r1, r4
 800a024:	6011      	str	r1, [r2, #0]
 800a026:	e7da      	b.n	8009fde <_free_r+0x26>
 800a028:	d902      	bls.n	800a030 <_free_r+0x78>
 800a02a:	230c      	movs	r3, #12
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	e7d6      	b.n	8009fde <_free_r+0x26>
 800a030:	6825      	ldr	r5, [r4, #0]
 800a032:	1961      	adds	r1, r4, r5
 800a034:	428b      	cmp	r3, r1
 800a036:	bf04      	itt	eq
 800a038:	6819      	ldreq	r1, [r3, #0]
 800a03a:	685b      	ldreq	r3, [r3, #4]
 800a03c:	6063      	str	r3, [r4, #4]
 800a03e:	bf04      	itt	eq
 800a040:	1949      	addeq	r1, r1, r5
 800a042:	6021      	streq	r1, [r4, #0]
 800a044:	6054      	str	r4, [r2, #4]
 800a046:	e7ca      	b.n	8009fde <_free_r+0x26>
 800a048:	b003      	add	sp, #12
 800a04a:	bd30      	pop	{r4, r5, pc}
 800a04c:	200004d8 	.word	0x200004d8

0800a050 <sbrk_aligned>:
 800a050:	b570      	push	{r4, r5, r6, lr}
 800a052:	4e0e      	ldr	r6, [pc, #56]	; (800a08c <sbrk_aligned+0x3c>)
 800a054:	460c      	mov	r4, r1
 800a056:	6831      	ldr	r1, [r6, #0]
 800a058:	4605      	mov	r5, r0
 800a05a:	b911      	cbnz	r1, 800a062 <sbrk_aligned+0x12>
 800a05c:	f000 f9f0 	bl	800a440 <_sbrk_r>
 800a060:	6030      	str	r0, [r6, #0]
 800a062:	4621      	mov	r1, r4
 800a064:	4628      	mov	r0, r5
 800a066:	f000 f9eb 	bl	800a440 <_sbrk_r>
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	d00a      	beq.n	800a084 <sbrk_aligned+0x34>
 800a06e:	1cc4      	adds	r4, r0, #3
 800a070:	f024 0403 	bic.w	r4, r4, #3
 800a074:	42a0      	cmp	r0, r4
 800a076:	d007      	beq.n	800a088 <sbrk_aligned+0x38>
 800a078:	1a21      	subs	r1, r4, r0
 800a07a:	4628      	mov	r0, r5
 800a07c:	f000 f9e0 	bl	800a440 <_sbrk_r>
 800a080:	3001      	adds	r0, #1
 800a082:	d101      	bne.n	800a088 <sbrk_aligned+0x38>
 800a084:	f04f 34ff 	mov.w	r4, #4294967295
 800a088:	4620      	mov	r0, r4
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
 800a08c:	200004dc 	.word	0x200004dc

0800a090 <_malloc_r>:
 800a090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a094:	1ccd      	adds	r5, r1, #3
 800a096:	f025 0503 	bic.w	r5, r5, #3
 800a09a:	3508      	adds	r5, #8
 800a09c:	2d0c      	cmp	r5, #12
 800a09e:	bf38      	it	cc
 800a0a0:	250c      	movcc	r5, #12
 800a0a2:	2d00      	cmp	r5, #0
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	db01      	blt.n	800a0ac <_malloc_r+0x1c>
 800a0a8:	42a9      	cmp	r1, r5
 800a0aa:	d905      	bls.n	800a0b8 <_malloc_r+0x28>
 800a0ac:	230c      	movs	r3, #12
 800a0ae:	603b      	str	r3, [r7, #0]
 800a0b0:	2600      	movs	r6, #0
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b8:	4e2e      	ldr	r6, [pc, #184]	; (800a174 <_malloc_r+0xe4>)
 800a0ba:	f000 fa3d 	bl	800a538 <__malloc_lock>
 800a0be:	6833      	ldr	r3, [r6, #0]
 800a0c0:	461c      	mov	r4, r3
 800a0c2:	bb34      	cbnz	r4, 800a112 <_malloc_r+0x82>
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f7ff ffc2 	bl	800a050 <sbrk_aligned>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	d14d      	bne.n	800a16e <_malloc_r+0xde>
 800a0d2:	6834      	ldr	r4, [r6, #0]
 800a0d4:	4626      	mov	r6, r4
 800a0d6:	2e00      	cmp	r6, #0
 800a0d8:	d140      	bne.n	800a15c <_malloc_r+0xcc>
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4638      	mov	r0, r7
 800a0e0:	eb04 0803 	add.w	r8, r4, r3
 800a0e4:	f000 f9ac 	bl	800a440 <_sbrk_r>
 800a0e8:	4580      	cmp	r8, r0
 800a0ea:	d13a      	bne.n	800a162 <_malloc_r+0xd2>
 800a0ec:	6821      	ldr	r1, [r4, #0]
 800a0ee:	3503      	adds	r5, #3
 800a0f0:	1a6d      	subs	r5, r5, r1
 800a0f2:	f025 0503 	bic.w	r5, r5, #3
 800a0f6:	3508      	adds	r5, #8
 800a0f8:	2d0c      	cmp	r5, #12
 800a0fa:	bf38      	it	cc
 800a0fc:	250c      	movcc	r5, #12
 800a0fe:	4629      	mov	r1, r5
 800a100:	4638      	mov	r0, r7
 800a102:	f7ff ffa5 	bl	800a050 <sbrk_aligned>
 800a106:	3001      	adds	r0, #1
 800a108:	d02b      	beq.n	800a162 <_malloc_r+0xd2>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	442b      	add	r3, r5
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	e00e      	b.n	800a130 <_malloc_r+0xa0>
 800a112:	6822      	ldr	r2, [r4, #0]
 800a114:	1b52      	subs	r2, r2, r5
 800a116:	d41e      	bmi.n	800a156 <_malloc_r+0xc6>
 800a118:	2a0b      	cmp	r2, #11
 800a11a:	d916      	bls.n	800a14a <_malloc_r+0xba>
 800a11c:	1961      	adds	r1, r4, r5
 800a11e:	42a3      	cmp	r3, r4
 800a120:	6025      	str	r5, [r4, #0]
 800a122:	bf18      	it	ne
 800a124:	6059      	strne	r1, [r3, #4]
 800a126:	6863      	ldr	r3, [r4, #4]
 800a128:	bf08      	it	eq
 800a12a:	6031      	streq	r1, [r6, #0]
 800a12c:	5162      	str	r2, [r4, r5]
 800a12e:	604b      	str	r3, [r1, #4]
 800a130:	4638      	mov	r0, r7
 800a132:	f104 060b 	add.w	r6, r4, #11
 800a136:	f000 fa05 	bl	800a544 <__malloc_unlock>
 800a13a:	f026 0607 	bic.w	r6, r6, #7
 800a13e:	1d23      	adds	r3, r4, #4
 800a140:	1af2      	subs	r2, r6, r3
 800a142:	d0b6      	beq.n	800a0b2 <_malloc_r+0x22>
 800a144:	1b9b      	subs	r3, r3, r6
 800a146:	50a3      	str	r3, [r4, r2]
 800a148:	e7b3      	b.n	800a0b2 <_malloc_r+0x22>
 800a14a:	6862      	ldr	r2, [r4, #4]
 800a14c:	42a3      	cmp	r3, r4
 800a14e:	bf0c      	ite	eq
 800a150:	6032      	streq	r2, [r6, #0]
 800a152:	605a      	strne	r2, [r3, #4]
 800a154:	e7ec      	b.n	800a130 <_malloc_r+0xa0>
 800a156:	4623      	mov	r3, r4
 800a158:	6864      	ldr	r4, [r4, #4]
 800a15a:	e7b2      	b.n	800a0c2 <_malloc_r+0x32>
 800a15c:	4634      	mov	r4, r6
 800a15e:	6876      	ldr	r6, [r6, #4]
 800a160:	e7b9      	b.n	800a0d6 <_malloc_r+0x46>
 800a162:	230c      	movs	r3, #12
 800a164:	603b      	str	r3, [r7, #0]
 800a166:	4638      	mov	r0, r7
 800a168:	f000 f9ec 	bl	800a544 <__malloc_unlock>
 800a16c:	e7a1      	b.n	800a0b2 <_malloc_r+0x22>
 800a16e:	6025      	str	r5, [r4, #0]
 800a170:	e7de      	b.n	800a130 <_malloc_r+0xa0>
 800a172:	bf00      	nop
 800a174:	200004d8 	.word	0x200004d8

0800a178 <__ssputs_r>:
 800a178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a17c:	688e      	ldr	r6, [r1, #8]
 800a17e:	429e      	cmp	r6, r3
 800a180:	4682      	mov	sl, r0
 800a182:	460c      	mov	r4, r1
 800a184:	4690      	mov	r8, r2
 800a186:	461f      	mov	r7, r3
 800a188:	d838      	bhi.n	800a1fc <__ssputs_r+0x84>
 800a18a:	898a      	ldrh	r2, [r1, #12]
 800a18c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a190:	d032      	beq.n	800a1f8 <__ssputs_r+0x80>
 800a192:	6825      	ldr	r5, [r4, #0]
 800a194:	6909      	ldr	r1, [r1, #16]
 800a196:	eba5 0901 	sub.w	r9, r5, r1
 800a19a:	6965      	ldr	r5, [r4, #20]
 800a19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	444b      	add	r3, r9
 800a1a8:	106d      	asrs	r5, r5, #1
 800a1aa:	429d      	cmp	r5, r3
 800a1ac:	bf38      	it	cc
 800a1ae:	461d      	movcc	r5, r3
 800a1b0:	0553      	lsls	r3, r2, #21
 800a1b2:	d531      	bpl.n	800a218 <__ssputs_r+0xa0>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	f7ff ff6b 	bl	800a090 <_malloc_r>
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	b950      	cbnz	r0, 800a1d4 <__ssputs_r+0x5c>
 800a1be:	230c      	movs	r3, #12
 800a1c0:	f8ca 3000 	str.w	r3, [sl]
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ca:	81a3      	strh	r3, [r4, #12]
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d4:	6921      	ldr	r1, [r4, #16]
 800a1d6:	464a      	mov	r2, r9
 800a1d8:	f7fc faaa 	bl	8006730 <memcpy>
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e6:	81a3      	strh	r3, [r4, #12]
 800a1e8:	6126      	str	r6, [r4, #16]
 800a1ea:	6165      	str	r5, [r4, #20]
 800a1ec:	444e      	add	r6, r9
 800a1ee:	eba5 0509 	sub.w	r5, r5, r9
 800a1f2:	6026      	str	r6, [r4, #0]
 800a1f4:	60a5      	str	r5, [r4, #8]
 800a1f6:	463e      	mov	r6, r7
 800a1f8:	42be      	cmp	r6, r7
 800a1fa:	d900      	bls.n	800a1fe <__ssputs_r+0x86>
 800a1fc:	463e      	mov	r6, r7
 800a1fe:	6820      	ldr	r0, [r4, #0]
 800a200:	4632      	mov	r2, r6
 800a202:	4641      	mov	r1, r8
 800a204:	f000 f97e 	bl	800a504 <memmove>
 800a208:	68a3      	ldr	r3, [r4, #8]
 800a20a:	1b9b      	subs	r3, r3, r6
 800a20c:	60a3      	str	r3, [r4, #8]
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	4433      	add	r3, r6
 800a212:	6023      	str	r3, [r4, #0]
 800a214:	2000      	movs	r0, #0
 800a216:	e7db      	b.n	800a1d0 <__ssputs_r+0x58>
 800a218:	462a      	mov	r2, r5
 800a21a:	f000 f999 	bl	800a550 <_realloc_r>
 800a21e:	4606      	mov	r6, r0
 800a220:	2800      	cmp	r0, #0
 800a222:	d1e1      	bne.n	800a1e8 <__ssputs_r+0x70>
 800a224:	6921      	ldr	r1, [r4, #16]
 800a226:	4650      	mov	r0, sl
 800a228:	f7ff fec6 	bl	8009fb8 <_free_r>
 800a22c:	e7c7      	b.n	800a1be <__ssputs_r+0x46>
	...

0800a230 <_svfiprintf_r>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	4698      	mov	r8, r3
 800a236:	898b      	ldrh	r3, [r1, #12]
 800a238:	061b      	lsls	r3, r3, #24
 800a23a:	b09d      	sub	sp, #116	; 0x74
 800a23c:	4607      	mov	r7, r0
 800a23e:	460d      	mov	r5, r1
 800a240:	4614      	mov	r4, r2
 800a242:	d50e      	bpl.n	800a262 <_svfiprintf_r+0x32>
 800a244:	690b      	ldr	r3, [r1, #16]
 800a246:	b963      	cbnz	r3, 800a262 <_svfiprintf_r+0x32>
 800a248:	2140      	movs	r1, #64	; 0x40
 800a24a:	f7ff ff21 	bl	800a090 <_malloc_r>
 800a24e:	6028      	str	r0, [r5, #0]
 800a250:	6128      	str	r0, [r5, #16]
 800a252:	b920      	cbnz	r0, 800a25e <_svfiprintf_r+0x2e>
 800a254:	230c      	movs	r3, #12
 800a256:	603b      	str	r3, [r7, #0]
 800a258:	f04f 30ff 	mov.w	r0, #4294967295
 800a25c:	e0d1      	b.n	800a402 <_svfiprintf_r+0x1d2>
 800a25e:	2340      	movs	r3, #64	; 0x40
 800a260:	616b      	str	r3, [r5, #20]
 800a262:	2300      	movs	r3, #0
 800a264:	9309      	str	r3, [sp, #36]	; 0x24
 800a266:	2320      	movs	r3, #32
 800a268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a270:	2330      	movs	r3, #48	; 0x30
 800a272:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a41c <_svfiprintf_r+0x1ec>
 800a276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a27a:	f04f 0901 	mov.w	r9, #1
 800a27e:	4623      	mov	r3, r4
 800a280:	469a      	mov	sl, r3
 800a282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a286:	b10a      	cbz	r2, 800a28c <_svfiprintf_r+0x5c>
 800a288:	2a25      	cmp	r2, #37	; 0x25
 800a28a:	d1f9      	bne.n	800a280 <_svfiprintf_r+0x50>
 800a28c:	ebba 0b04 	subs.w	fp, sl, r4
 800a290:	d00b      	beq.n	800a2aa <_svfiprintf_r+0x7a>
 800a292:	465b      	mov	r3, fp
 800a294:	4622      	mov	r2, r4
 800a296:	4629      	mov	r1, r5
 800a298:	4638      	mov	r0, r7
 800a29a:	f7ff ff6d 	bl	800a178 <__ssputs_r>
 800a29e:	3001      	adds	r0, #1
 800a2a0:	f000 80aa 	beq.w	800a3f8 <_svfiprintf_r+0x1c8>
 800a2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2a6:	445a      	add	r2, fp
 800a2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800a2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f000 80a2 	beq.w	800a3f8 <_svfiprintf_r+0x1c8>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2be:	f10a 0a01 	add.w	sl, sl, #1
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	9307      	str	r3, [sp, #28]
 800a2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ca:	931a      	str	r3, [sp, #104]	; 0x68
 800a2cc:	4654      	mov	r4, sl
 800a2ce:	2205      	movs	r2, #5
 800a2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d4:	4851      	ldr	r0, [pc, #324]	; (800a41c <_svfiprintf_r+0x1ec>)
 800a2d6:	f7f5 ff8b 	bl	80001f0 <memchr>
 800a2da:	9a04      	ldr	r2, [sp, #16]
 800a2dc:	b9d8      	cbnz	r0, 800a316 <_svfiprintf_r+0xe6>
 800a2de:	06d0      	lsls	r0, r2, #27
 800a2e0:	bf44      	itt	mi
 800a2e2:	2320      	movmi	r3, #32
 800a2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2e8:	0711      	lsls	r1, r2, #28
 800a2ea:	bf44      	itt	mi
 800a2ec:	232b      	movmi	r3, #43	; 0x2b
 800a2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2f8:	d015      	beq.n	800a326 <_svfiprintf_r+0xf6>
 800a2fa:	9a07      	ldr	r2, [sp, #28]
 800a2fc:	4654      	mov	r4, sl
 800a2fe:	2000      	movs	r0, #0
 800a300:	f04f 0c0a 	mov.w	ip, #10
 800a304:	4621      	mov	r1, r4
 800a306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a30a:	3b30      	subs	r3, #48	; 0x30
 800a30c:	2b09      	cmp	r3, #9
 800a30e:	d94e      	bls.n	800a3ae <_svfiprintf_r+0x17e>
 800a310:	b1b0      	cbz	r0, 800a340 <_svfiprintf_r+0x110>
 800a312:	9207      	str	r2, [sp, #28]
 800a314:	e014      	b.n	800a340 <_svfiprintf_r+0x110>
 800a316:	eba0 0308 	sub.w	r3, r0, r8
 800a31a:	fa09 f303 	lsl.w	r3, r9, r3
 800a31e:	4313      	orrs	r3, r2
 800a320:	9304      	str	r3, [sp, #16]
 800a322:	46a2      	mov	sl, r4
 800a324:	e7d2      	b.n	800a2cc <_svfiprintf_r+0x9c>
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	1d19      	adds	r1, r3, #4
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	9103      	str	r1, [sp, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bfbb      	ittet	lt
 800a332:	425b      	neglt	r3, r3
 800a334:	f042 0202 	orrlt.w	r2, r2, #2
 800a338:	9307      	strge	r3, [sp, #28]
 800a33a:	9307      	strlt	r3, [sp, #28]
 800a33c:	bfb8      	it	lt
 800a33e:	9204      	strlt	r2, [sp, #16]
 800a340:	7823      	ldrb	r3, [r4, #0]
 800a342:	2b2e      	cmp	r3, #46	; 0x2e
 800a344:	d10c      	bne.n	800a360 <_svfiprintf_r+0x130>
 800a346:	7863      	ldrb	r3, [r4, #1]
 800a348:	2b2a      	cmp	r3, #42	; 0x2a
 800a34a:	d135      	bne.n	800a3b8 <_svfiprintf_r+0x188>
 800a34c:	9b03      	ldr	r3, [sp, #12]
 800a34e:	1d1a      	adds	r2, r3, #4
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	9203      	str	r2, [sp, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	bfb8      	it	lt
 800a358:	f04f 33ff 	movlt.w	r3, #4294967295
 800a35c:	3402      	adds	r4, #2
 800a35e:	9305      	str	r3, [sp, #20]
 800a360:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a42c <_svfiprintf_r+0x1fc>
 800a364:	7821      	ldrb	r1, [r4, #0]
 800a366:	2203      	movs	r2, #3
 800a368:	4650      	mov	r0, sl
 800a36a:	f7f5 ff41 	bl	80001f0 <memchr>
 800a36e:	b140      	cbz	r0, 800a382 <_svfiprintf_r+0x152>
 800a370:	2340      	movs	r3, #64	; 0x40
 800a372:	eba0 000a 	sub.w	r0, r0, sl
 800a376:	fa03 f000 	lsl.w	r0, r3, r0
 800a37a:	9b04      	ldr	r3, [sp, #16]
 800a37c:	4303      	orrs	r3, r0
 800a37e:	3401      	adds	r4, #1
 800a380:	9304      	str	r3, [sp, #16]
 800a382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a386:	4826      	ldr	r0, [pc, #152]	; (800a420 <_svfiprintf_r+0x1f0>)
 800a388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a38c:	2206      	movs	r2, #6
 800a38e:	f7f5 ff2f 	bl	80001f0 <memchr>
 800a392:	2800      	cmp	r0, #0
 800a394:	d038      	beq.n	800a408 <_svfiprintf_r+0x1d8>
 800a396:	4b23      	ldr	r3, [pc, #140]	; (800a424 <_svfiprintf_r+0x1f4>)
 800a398:	bb1b      	cbnz	r3, 800a3e2 <_svfiprintf_r+0x1b2>
 800a39a:	9b03      	ldr	r3, [sp, #12]
 800a39c:	3307      	adds	r3, #7
 800a39e:	f023 0307 	bic.w	r3, r3, #7
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a8:	4433      	add	r3, r6
 800a3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ac:	e767      	b.n	800a27e <_svfiprintf_r+0x4e>
 800a3ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	2001      	movs	r0, #1
 800a3b6:	e7a5      	b.n	800a304 <_svfiprintf_r+0xd4>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	3401      	adds	r4, #1
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	f04f 0c0a 	mov.w	ip, #10
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ca:	3a30      	subs	r2, #48	; 0x30
 800a3cc:	2a09      	cmp	r2, #9
 800a3ce:	d903      	bls.n	800a3d8 <_svfiprintf_r+0x1a8>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d0c5      	beq.n	800a360 <_svfiprintf_r+0x130>
 800a3d4:	9105      	str	r1, [sp, #20]
 800a3d6:	e7c3      	b.n	800a360 <_svfiprintf_r+0x130>
 800a3d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3dc:	4604      	mov	r4, r0
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e7f0      	b.n	800a3c4 <_svfiprintf_r+0x194>
 800a3e2:	ab03      	add	r3, sp, #12
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	462a      	mov	r2, r5
 800a3e8:	4b0f      	ldr	r3, [pc, #60]	; (800a428 <_svfiprintf_r+0x1f8>)
 800a3ea:	a904      	add	r1, sp, #16
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f7fc fa55 	bl	800689c <_printf_float>
 800a3f2:	1c42      	adds	r2, r0, #1
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	d1d6      	bne.n	800a3a6 <_svfiprintf_r+0x176>
 800a3f8:	89ab      	ldrh	r3, [r5, #12]
 800a3fa:	065b      	lsls	r3, r3, #25
 800a3fc:	f53f af2c 	bmi.w	800a258 <_svfiprintf_r+0x28>
 800a400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a402:	b01d      	add	sp, #116	; 0x74
 800a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a408:	ab03      	add	r3, sp, #12
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	462a      	mov	r2, r5
 800a40e:	4b06      	ldr	r3, [pc, #24]	; (800a428 <_svfiprintf_r+0x1f8>)
 800a410:	a904      	add	r1, sp, #16
 800a412:	4638      	mov	r0, r7
 800a414:	f7fc fce6 	bl	8006de4 <_printf_i>
 800a418:	e7eb      	b.n	800a3f2 <_svfiprintf_r+0x1c2>
 800a41a:	bf00      	nop
 800a41c:	0800b73c 	.word	0x0800b73c
 800a420:	0800b746 	.word	0x0800b746
 800a424:	0800689d 	.word	0x0800689d
 800a428:	0800a179 	.word	0x0800a179
 800a42c:	0800b742 	.word	0x0800b742

0800a430 <nan>:
 800a430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a438 <nan+0x8>
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	00000000 	.word	0x00000000
 800a43c:	7ff80000 	.word	0x7ff80000

0800a440 <_sbrk_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d06      	ldr	r5, [pc, #24]	; (800a45c <_sbrk_r+0x1c>)
 800a444:	2300      	movs	r3, #0
 800a446:	4604      	mov	r4, r0
 800a448:	4608      	mov	r0, r1
 800a44a:	602b      	str	r3, [r5, #0]
 800a44c:	f7f9 faf6 	bl	8003a3c <_sbrk>
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	d102      	bne.n	800a45a <_sbrk_r+0x1a>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	b103      	cbz	r3, 800a45a <_sbrk_r+0x1a>
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	200004e0 	.word	0x200004e0

0800a460 <strncmp>:
 800a460:	b510      	push	{r4, lr}
 800a462:	b17a      	cbz	r2, 800a484 <strncmp+0x24>
 800a464:	4603      	mov	r3, r0
 800a466:	3901      	subs	r1, #1
 800a468:	1884      	adds	r4, r0, r2
 800a46a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a46e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a472:	4290      	cmp	r0, r2
 800a474:	d101      	bne.n	800a47a <strncmp+0x1a>
 800a476:	42a3      	cmp	r3, r4
 800a478:	d101      	bne.n	800a47e <strncmp+0x1e>
 800a47a:	1a80      	subs	r0, r0, r2
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	2800      	cmp	r0, #0
 800a480:	d1f3      	bne.n	800a46a <strncmp+0xa>
 800a482:	e7fa      	b.n	800a47a <strncmp+0x1a>
 800a484:	4610      	mov	r0, r2
 800a486:	e7f9      	b.n	800a47c <strncmp+0x1c>

0800a488 <__ascii_wctomb>:
 800a488:	b149      	cbz	r1, 800a49e <__ascii_wctomb+0x16>
 800a48a:	2aff      	cmp	r2, #255	; 0xff
 800a48c:	bf85      	ittet	hi
 800a48e:	238a      	movhi	r3, #138	; 0x8a
 800a490:	6003      	strhi	r3, [r0, #0]
 800a492:	700a      	strbls	r2, [r1, #0]
 800a494:	f04f 30ff 	movhi.w	r0, #4294967295
 800a498:	bf98      	it	ls
 800a49a:	2001      	movls	r0, #1
 800a49c:	4770      	bx	lr
 800a49e:	4608      	mov	r0, r1
 800a4a0:	4770      	bx	lr
	...

0800a4a4 <__assert_func>:
 800a4a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4a6:	4614      	mov	r4, r2
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <__assert_func+0x2c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	68d8      	ldr	r0, [r3, #12]
 800a4b2:	b14c      	cbz	r4, 800a4c8 <__assert_func+0x24>
 800a4b4:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <__assert_func+0x30>)
 800a4b6:	9100      	str	r1, [sp, #0]
 800a4b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4bc:	4906      	ldr	r1, [pc, #24]	; (800a4d8 <__assert_func+0x34>)
 800a4be:	462b      	mov	r3, r5
 800a4c0:	f000 f80e 	bl	800a4e0 <fiprintf>
 800a4c4:	f000 fa8c 	bl	800a9e0 <abort>
 800a4c8:	4b04      	ldr	r3, [pc, #16]	; (800a4dc <__assert_func+0x38>)
 800a4ca:	461c      	mov	r4, r3
 800a4cc:	e7f3      	b.n	800a4b6 <__assert_func+0x12>
 800a4ce:	bf00      	nop
 800a4d0:	2000000c 	.word	0x2000000c
 800a4d4:	0800b74d 	.word	0x0800b74d
 800a4d8:	0800b75a 	.word	0x0800b75a
 800a4dc:	0800b788 	.word	0x0800b788

0800a4e0 <fiprintf>:
 800a4e0:	b40e      	push	{r1, r2, r3}
 800a4e2:	b503      	push	{r0, r1, lr}
 800a4e4:	4601      	mov	r1, r0
 800a4e6:	ab03      	add	r3, sp, #12
 800a4e8:	4805      	ldr	r0, [pc, #20]	; (800a500 <fiprintf+0x20>)
 800a4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ee:	6800      	ldr	r0, [r0, #0]
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	f000 f885 	bl	800a600 <_vfiprintf_r>
 800a4f6:	b002      	add	sp, #8
 800a4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4fc:	b003      	add	sp, #12
 800a4fe:	4770      	bx	lr
 800a500:	2000000c 	.word	0x2000000c

0800a504 <memmove>:
 800a504:	4288      	cmp	r0, r1
 800a506:	b510      	push	{r4, lr}
 800a508:	eb01 0402 	add.w	r4, r1, r2
 800a50c:	d902      	bls.n	800a514 <memmove+0x10>
 800a50e:	4284      	cmp	r4, r0
 800a510:	4623      	mov	r3, r4
 800a512:	d807      	bhi.n	800a524 <memmove+0x20>
 800a514:	1e43      	subs	r3, r0, #1
 800a516:	42a1      	cmp	r1, r4
 800a518:	d008      	beq.n	800a52c <memmove+0x28>
 800a51a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a51e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a522:	e7f8      	b.n	800a516 <memmove+0x12>
 800a524:	4402      	add	r2, r0
 800a526:	4601      	mov	r1, r0
 800a528:	428a      	cmp	r2, r1
 800a52a:	d100      	bne.n	800a52e <memmove+0x2a>
 800a52c:	bd10      	pop	{r4, pc}
 800a52e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a536:	e7f7      	b.n	800a528 <memmove+0x24>

0800a538 <__malloc_lock>:
 800a538:	4801      	ldr	r0, [pc, #4]	; (800a540 <__malloc_lock+0x8>)
 800a53a:	f000 bc11 	b.w	800ad60 <__retarget_lock_acquire_recursive>
 800a53e:	bf00      	nop
 800a540:	200004e4 	.word	0x200004e4

0800a544 <__malloc_unlock>:
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <__malloc_unlock+0x8>)
 800a546:	f000 bc0c 	b.w	800ad62 <__retarget_lock_release_recursive>
 800a54a:	bf00      	nop
 800a54c:	200004e4 	.word	0x200004e4

0800a550 <_realloc_r>:
 800a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a554:	4680      	mov	r8, r0
 800a556:	4614      	mov	r4, r2
 800a558:	460e      	mov	r6, r1
 800a55a:	b921      	cbnz	r1, 800a566 <_realloc_r+0x16>
 800a55c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	4611      	mov	r1, r2
 800a562:	f7ff bd95 	b.w	800a090 <_malloc_r>
 800a566:	b92a      	cbnz	r2, 800a574 <_realloc_r+0x24>
 800a568:	f7ff fd26 	bl	8009fb8 <_free_r>
 800a56c:	4625      	mov	r5, r4
 800a56e:	4628      	mov	r0, r5
 800a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a574:	f000 fc5c 	bl	800ae30 <_malloc_usable_size_r>
 800a578:	4284      	cmp	r4, r0
 800a57a:	4607      	mov	r7, r0
 800a57c:	d802      	bhi.n	800a584 <_realloc_r+0x34>
 800a57e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a582:	d812      	bhi.n	800a5aa <_realloc_r+0x5a>
 800a584:	4621      	mov	r1, r4
 800a586:	4640      	mov	r0, r8
 800a588:	f7ff fd82 	bl	800a090 <_malloc_r>
 800a58c:	4605      	mov	r5, r0
 800a58e:	2800      	cmp	r0, #0
 800a590:	d0ed      	beq.n	800a56e <_realloc_r+0x1e>
 800a592:	42bc      	cmp	r4, r7
 800a594:	4622      	mov	r2, r4
 800a596:	4631      	mov	r1, r6
 800a598:	bf28      	it	cs
 800a59a:	463a      	movcs	r2, r7
 800a59c:	f7fc f8c8 	bl	8006730 <memcpy>
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f7ff fd08 	bl	8009fb8 <_free_r>
 800a5a8:	e7e1      	b.n	800a56e <_realloc_r+0x1e>
 800a5aa:	4635      	mov	r5, r6
 800a5ac:	e7df      	b.n	800a56e <_realloc_r+0x1e>

0800a5ae <__sfputc_r>:
 800a5ae:	6893      	ldr	r3, [r2, #8]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	b410      	push	{r4}
 800a5b6:	6093      	str	r3, [r2, #8]
 800a5b8:	da08      	bge.n	800a5cc <__sfputc_r+0x1e>
 800a5ba:	6994      	ldr	r4, [r2, #24]
 800a5bc:	42a3      	cmp	r3, r4
 800a5be:	db01      	blt.n	800a5c4 <__sfputc_r+0x16>
 800a5c0:	290a      	cmp	r1, #10
 800a5c2:	d103      	bne.n	800a5cc <__sfputc_r+0x1e>
 800a5c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5c8:	f000 b94a 	b.w	800a860 <__swbuf_r>
 800a5cc:	6813      	ldr	r3, [r2, #0]
 800a5ce:	1c58      	adds	r0, r3, #1
 800a5d0:	6010      	str	r0, [r2, #0]
 800a5d2:	7019      	strb	r1, [r3, #0]
 800a5d4:	4608      	mov	r0, r1
 800a5d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <__sfputs_r>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	4606      	mov	r6, r0
 800a5e0:	460f      	mov	r7, r1
 800a5e2:	4614      	mov	r4, r2
 800a5e4:	18d5      	adds	r5, r2, r3
 800a5e6:	42ac      	cmp	r4, r5
 800a5e8:	d101      	bne.n	800a5ee <__sfputs_r+0x12>
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	e007      	b.n	800a5fe <__sfputs_r+0x22>
 800a5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f2:	463a      	mov	r2, r7
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff ffda 	bl	800a5ae <__sfputc_r>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	d1f3      	bne.n	800a5e6 <__sfputs_r+0xa>
 800a5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a600 <_vfiprintf_r>:
 800a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	460d      	mov	r5, r1
 800a606:	b09d      	sub	sp, #116	; 0x74
 800a608:	4614      	mov	r4, r2
 800a60a:	4698      	mov	r8, r3
 800a60c:	4606      	mov	r6, r0
 800a60e:	b118      	cbz	r0, 800a618 <_vfiprintf_r+0x18>
 800a610:	6983      	ldr	r3, [r0, #24]
 800a612:	b90b      	cbnz	r3, 800a618 <_vfiprintf_r+0x18>
 800a614:	f000 fb06 	bl	800ac24 <__sinit>
 800a618:	4b89      	ldr	r3, [pc, #548]	; (800a840 <_vfiprintf_r+0x240>)
 800a61a:	429d      	cmp	r5, r3
 800a61c:	d11b      	bne.n	800a656 <_vfiprintf_r+0x56>
 800a61e:	6875      	ldr	r5, [r6, #4]
 800a620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a622:	07d9      	lsls	r1, r3, #31
 800a624:	d405      	bmi.n	800a632 <_vfiprintf_r+0x32>
 800a626:	89ab      	ldrh	r3, [r5, #12]
 800a628:	059a      	lsls	r2, r3, #22
 800a62a:	d402      	bmi.n	800a632 <_vfiprintf_r+0x32>
 800a62c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a62e:	f000 fb97 	bl	800ad60 <__retarget_lock_acquire_recursive>
 800a632:	89ab      	ldrh	r3, [r5, #12]
 800a634:	071b      	lsls	r3, r3, #28
 800a636:	d501      	bpl.n	800a63c <_vfiprintf_r+0x3c>
 800a638:	692b      	ldr	r3, [r5, #16]
 800a63a:	b9eb      	cbnz	r3, 800a678 <_vfiprintf_r+0x78>
 800a63c:	4629      	mov	r1, r5
 800a63e:	4630      	mov	r0, r6
 800a640:	f000 f960 	bl	800a904 <__swsetup_r>
 800a644:	b1c0      	cbz	r0, 800a678 <_vfiprintf_r+0x78>
 800a646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a648:	07dc      	lsls	r4, r3, #31
 800a64a:	d50e      	bpl.n	800a66a <_vfiprintf_r+0x6a>
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	b01d      	add	sp, #116	; 0x74
 800a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a656:	4b7b      	ldr	r3, [pc, #492]	; (800a844 <_vfiprintf_r+0x244>)
 800a658:	429d      	cmp	r5, r3
 800a65a:	d101      	bne.n	800a660 <_vfiprintf_r+0x60>
 800a65c:	68b5      	ldr	r5, [r6, #8]
 800a65e:	e7df      	b.n	800a620 <_vfiprintf_r+0x20>
 800a660:	4b79      	ldr	r3, [pc, #484]	; (800a848 <_vfiprintf_r+0x248>)
 800a662:	429d      	cmp	r5, r3
 800a664:	bf08      	it	eq
 800a666:	68f5      	ldreq	r5, [r6, #12]
 800a668:	e7da      	b.n	800a620 <_vfiprintf_r+0x20>
 800a66a:	89ab      	ldrh	r3, [r5, #12]
 800a66c:	0598      	lsls	r0, r3, #22
 800a66e:	d4ed      	bmi.n	800a64c <_vfiprintf_r+0x4c>
 800a670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a672:	f000 fb76 	bl	800ad62 <__retarget_lock_release_recursive>
 800a676:	e7e9      	b.n	800a64c <_vfiprintf_r+0x4c>
 800a678:	2300      	movs	r3, #0
 800a67a:	9309      	str	r3, [sp, #36]	; 0x24
 800a67c:	2320      	movs	r3, #32
 800a67e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a682:	f8cd 800c 	str.w	r8, [sp, #12]
 800a686:	2330      	movs	r3, #48	; 0x30
 800a688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a84c <_vfiprintf_r+0x24c>
 800a68c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a690:	f04f 0901 	mov.w	r9, #1
 800a694:	4623      	mov	r3, r4
 800a696:	469a      	mov	sl, r3
 800a698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a69c:	b10a      	cbz	r2, 800a6a2 <_vfiprintf_r+0xa2>
 800a69e:	2a25      	cmp	r2, #37	; 0x25
 800a6a0:	d1f9      	bne.n	800a696 <_vfiprintf_r+0x96>
 800a6a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a6a6:	d00b      	beq.n	800a6c0 <_vfiprintf_r+0xc0>
 800a6a8:	465b      	mov	r3, fp
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f7ff ff94 	bl	800a5dc <__sfputs_r>
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	f000 80aa 	beq.w	800a80e <_vfiprintf_r+0x20e>
 800a6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6bc:	445a      	add	r2, fp
 800a6be:	9209      	str	r2, [sp, #36]	; 0x24
 800a6c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 80a2 	beq.w	800a80e <_vfiprintf_r+0x20e>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6d4:	f10a 0a01 	add.w	sl, sl, #1
 800a6d8:	9304      	str	r3, [sp, #16]
 800a6da:	9307      	str	r3, [sp, #28]
 800a6dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a6e2:	4654      	mov	r4, sl
 800a6e4:	2205      	movs	r2, #5
 800a6e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ea:	4858      	ldr	r0, [pc, #352]	; (800a84c <_vfiprintf_r+0x24c>)
 800a6ec:	f7f5 fd80 	bl	80001f0 <memchr>
 800a6f0:	9a04      	ldr	r2, [sp, #16]
 800a6f2:	b9d8      	cbnz	r0, 800a72c <_vfiprintf_r+0x12c>
 800a6f4:	06d1      	lsls	r1, r2, #27
 800a6f6:	bf44      	itt	mi
 800a6f8:	2320      	movmi	r3, #32
 800a6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6fe:	0713      	lsls	r3, r2, #28
 800a700:	bf44      	itt	mi
 800a702:	232b      	movmi	r3, #43	; 0x2b
 800a704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a708:	f89a 3000 	ldrb.w	r3, [sl]
 800a70c:	2b2a      	cmp	r3, #42	; 0x2a
 800a70e:	d015      	beq.n	800a73c <_vfiprintf_r+0x13c>
 800a710:	9a07      	ldr	r2, [sp, #28]
 800a712:	4654      	mov	r4, sl
 800a714:	2000      	movs	r0, #0
 800a716:	f04f 0c0a 	mov.w	ip, #10
 800a71a:	4621      	mov	r1, r4
 800a71c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a720:	3b30      	subs	r3, #48	; 0x30
 800a722:	2b09      	cmp	r3, #9
 800a724:	d94e      	bls.n	800a7c4 <_vfiprintf_r+0x1c4>
 800a726:	b1b0      	cbz	r0, 800a756 <_vfiprintf_r+0x156>
 800a728:	9207      	str	r2, [sp, #28]
 800a72a:	e014      	b.n	800a756 <_vfiprintf_r+0x156>
 800a72c:	eba0 0308 	sub.w	r3, r0, r8
 800a730:	fa09 f303 	lsl.w	r3, r9, r3
 800a734:	4313      	orrs	r3, r2
 800a736:	9304      	str	r3, [sp, #16]
 800a738:	46a2      	mov	sl, r4
 800a73a:	e7d2      	b.n	800a6e2 <_vfiprintf_r+0xe2>
 800a73c:	9b03      	ldr	r3, [sp, #12]
 800a73e:	1d19      	adds	r1, r3, #4
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	9103      	str	r1, [sp, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	bfbb      	ittet	lt
 800a748:	425b      	neglt	r3, r3
 800a74a:	f042 0202 	orrlt.w	r2, r2, #2
 800a74e:	9307      	strge	r3, [sp, #28]
 800a750:	9307      	strlt	r3, [sp, #28]
 800a752:	bfb8      	it	lt
 800a754:	9204      	strlt	r2, [sp, #16]
 800a756:	7823      	ldrb	r3, [r4, #0]
 800a758:	2b2e      	cmp	r3, #46	; 0x2e
 800a75a:	d10c      	bne.n	800a776 <_vfiprintf_r+0x176>
 800a75c:	7863      	ldrb	r3, [r4, #1]
 800a75e:	2b2a      	cmp	r3, #42	; 0x2a
 800a760:	d135      	bne.n	800a7ce <_vfiprintf_r+0x1ce>
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	1d1a      	adds	r2, r3, #4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	9203      	str	r2, [sp, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	bfb8      	it	lt
 800a76e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a772:	3402      	adds	r4, #2
 800a774:	9305      	str	r3, [sp, #20]
 800a776:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a85c <_vfiprintf_r+0x25c>
 800a77a:	7821      	ldrb	r1, [r4, #0]
 800a77c:	2203      	movs	r2, #3
 800a77e:	4650      	mov	r0, sl
 800a780:	f7f5 fd36 	bl	80001f0 <memchr>
 800a784:	b140      	cbz	r0, 800a798 <_vfiprintf_r+0x198>
 800a786:	2340      	movs	r3, #64	; 0x40
 800a788:	eba0 000a 	sub.w	r0, r0, sl
 800a78c:	fa03 f000 	lsl.w	r0, r3, r0
 800a790:	9b04      	ldr	r3, [sp, #16]
 800a792:	4303      	orrs	r3, r0
 800a794:	3401      	adds	r4, #1
 800a796:	9304      	str	r3, [sp, #16]
 800a798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a79c:	482c      	ldr	r0, [pc, #176]	; (800a850 <_vfiprintf_r+0x250>)
 800a79e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7a2:	2206      	movs	r2, #6
 800a7a4:	f7f5 fd24 	bl	80001f0 <memchr>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d03f      	beq.n	800a82c <_vfiprintf_r+0x22c>
 800a7ac:	4b29      	ldr	r3, [pc, #164]	; (800a854 <_vfiprintf_r+0x254>)
 800a7ae:	bb1b      	cbnz	r3, 800a7f8 <_vfiprintf_r+0x1f8>
 800a7b0:	9b03      	ldr	r3, [sp, #12]
 800a7b2:	3307      	adds	r3, #7
 800a7b4:	f023 0307 	bic.w	r3, r3, #7
 800a7b8:	3308      	adds	r3, #8
 800a7ba:	9303      	str	r3, [sp, #12]
 800a7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7be:	443b      	add	r3, r7
 800a7c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c2:	e767      	b.n	800a694 <_vfiprintf_r+0x94>
 800a7c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	2001      	movs	r0, #1
 800a7cc:	e7a5      	b.n	800a71a <_vfiprintf_r+0x11a>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	3401      	adds	r4, #1
 800a7d2:	9305      	str	r3, [sp, #20]
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	f04f 0c0a 	mov.w	ip, #10
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7e0:	3a30      	subs	r2, #48	; 0x30
 800a7e2:	2a09      	cmp	r2, #9
 800a7e4:	d903      	bls.n	800a7ee <_vfiprintf_r+0x1ee>
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0c5      	beq.n	800a776 <_vfiprintf_r+0x176>
 800a7ea:	9105      	str	r1, [sp, #20]
 800a7ec:	e7c3      	b.n	800a776 <_vfiprintf_r+0x176>
 800a7ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e7f0      	b.n	800a7da <_vfiprintf_r+0x1da>
 800a7f8:	ab03      	add	r3, sp, #12
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	462a      	mov	r2, r5
 800a7fe:	4b16      	ldr	r3, [pc, #88]	; (800a858 <_vfiprintf_r+0x258>)
 800a800:	a904      	add	r1, sp, #16
 800a802:	4630      	mov	r0, r6
 800a804:	f7fc f84a 	bl	800689c <_printf_float>
 800a808:	4607      	mov	r7, r0
 800a80a:	1c78      	adds	r0, r7, #1
 800a80c:	d1d6      	bne.n	800a7bc <_vfiprintf_r+0x1bc>
 800a80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a810:	07d9      	lsls	r1, r3, #31
 800a812:	d405      	bmi.n	800a820 <_vfiprintf_r+0x220>
 800a814:	89ab      	ldrh	r3, [r5, #12]
 800a816:	059a      	lsls	r2, r3, #22
 800a818:	d402      	bmi.n	800a820 <_vfiprintf_r+0x220>
 800a81a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a81c:	f000 faa1 	bl	800ad62 <__retarget_lock_release_recursive>
 800a820:	89ab      	ldrh	r3, [r5, #12]
 800a822:	065b      	lsls	r3, r3, #25
 800a824:	f53f af12 	bmi.w	800a64c <_vfiprintf_r+0x4c>
 800a828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a82a:	e711      	b.n	800a650 <_vfiprintf_r+0x50>
 800a82c:	ab03      	add	r3, sp, #12
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	462a      	mov	r2, r5
 800a832:	4b09      	ldr	r3, [pc, #36]	; (800a858 <_vfiprintf_r+0x258>)
 800a834:	a904      	add	r1, sp, #16
 800a836:	4630      	mov	r0, r6
 800a838:	f7fc fad4 	bl	8006de4 <_printf_i>
 800a83c:	e7e4      	b.n	800a808 <_vfiprintf_r+0x208>
 800a83e:	bf00      	nop
 800a840:	0800b7ac 	.word	0x0800b7ac
 800a844:	0800b7cc 	.word	0x0800b7cc
 800a848:	0800b78c 	.word	0x0800b78c
 800a84c:	0800b73c 	.word	0x0800b73c
 800a850:	0800b746 	.word	0x0800b746
 800a854:	0800689d 	.word	0x0800689d
 800a858:	0800a5dd 	.word	0x0800a5dd
 800a85c:	0800b742 	.word	0x0800b742

0800a860 <__swbuf_r>:
 800a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a862:	460e      	mov	r6, r1
 800a864:	4614      	mov	r4, r2
 800a866:	4605      	mov	r5, r0
 800a868:	b118      	cbz	r0, 800a872 <__swbuf_r+0x12>
 800a86a:	6983      	ldr	r3, [r0, #24]
 800a86c:	b90b      	cbnz	r3, 800a872 <__swbuf_r+0x12>
 800a86e:	f000 f9d9 	bl	800ac24 <__sinit>
 800a872:	4b21      	ldr	r3, [pc, #132]	; (800a8f8 <__swbuf_r+0x98>)
 800a874:	429c      	cmp	r4, r3
 800a876:	d12b      	bne.n	800a8d0 <__swbuf_r+0x70>
 800a878:	686c      	ldr	r4, [r5, #4]
 800a87a:	69a3      	ldr	r3, [r4, #24]
 800a87c:	60a3      	str	r3, [r4, #8]
 800a87e:	89a3      	ldrh	r3, [r4, #12]
 800a880:	071a      	lsls	r2, r3, #28
 800a882:	d52f      	bpl.n	800a8e4 <__swbuf_r+0x84>
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	b36b      	cbz	r3, 800a8e4 <__swbuf_r+0x84>
 800a888:	6923      	ldr	r3, [r4, #16]
 800a88a:	6820      	ldr	r0, [r4, #0]
 800a88c:	1ac0      	subs	r0, r0, r3
 800a88e:	6963      	ldr	r3, [r4, #20]
 800a890:	b2f6      	uxtb	r6, r6
 800a892:	4283      	cmp	r3, r0
 800a894:	4637      	mov	r7, r6
 800a896:	dc04      	bgt.n	800a8a2 <__swbuf_r+0x42>
 800a898:	4621      	mov	r1, r4
 800a89a:	4628      	mov	r0, r5
 800a89c:	f000 f92e 	bl	800aafc <_fflush_r>
 800a8a0:	bb30      	cbnz	r0, 800a8f0 <__swbuf_r+0x90>
 800a8a2:	68a3      	ldr	r3, [r4, #8]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	60a3      	str	r3, [r4, #8]
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	6022      	str	r2, [r4, #0]
 800a8ae:	701e      	strb	r6, [r3, #0]
 800a8b0:	6963      	ldr	r3, [r4, #20]
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	4283      	cmp	r3, r0
 800a8b6:	d004      	beq.n	800a8c2 <__swbuf_r+0x62>
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	07db      	lsls	r3, r3, #31
 800a8bc:	d506      	bpl.n	800a8cc <__swbuf_r+0x6c>
 800a8be:	2e0a      	cmp	r6, #10
 800a8c0:	d104      	bne.n	800a8cc <__swbuf_r+0x6c>
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	f000 f919 	bl	800aafc <_fflush_r>
 800a8ca:	b988      	cbnz	r0, 800a8f0 <__swbuf_r+0x90>
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d0:	4b0a      	ldr	r3, [pc, #40]	; (800a8fc <__swbuf_r+0x9c>)
 800a8d2:	429c      	cmp	r4, r3
 800a8d4:	d101      	bne.n	800a8da <__swbuf_r+0x7a>
 800a8d6:	68ac      	ldr	r4, [r5, #8]
 800a8d8:	e7cf      	b.n	800a87a <__swbuf_r+0x1a>
 800a8da:	4b09      	ldr	r3, [pc, #36]	; (800a900 <__swbuf_r+0xa0>)
 800a8dc:	429c      	cmp	r4, r3
 800a8de:	bf08      	it	eq
 800a8e0:	68ec      	ldreq	r4, [r5, #12]
 800a8e2:	e7ca      	b.n	800a87a <__swbuf_r+0x1a>
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f000 f80c 	bl	800a904 <__swsetup_r>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d0cb      	beq.n	800a888 <__swbuf_r+0x28>
 800a8f0:	f04f 37ff 	mov.w	r7, #4294967295
 800a8f4:	e7ea      	b.n	800a8cc <__swbuf_r+0x6c>
 800a8f6:	bf00      	nop
 800a8f8:	0800b7ac 	.word	0x0800b7ac
 800a8fc:	0800b7cc 	.word	0x0800b7cc
 800a900:	0800b78c 	.word	0x0800b78c

0800a904 <__swsetup_r>:
 800a904:	4b32      	ldr	r3, [pc, #200]	; (800a9d0 <__swsetup_r+0xcc>)
 800a906:	b570      	push	{r4, r5, r6, lr}
 800a908:	681d      	ldr	r5, [r3, #0]
 800a90a:	4606      	mov	r6, r0
 800a90c:	460c      	mov	r4, r1
 800a90e:	b125      	cbz	r5, 800a91a <__swsetup_r+0x16>
 800a910:	69ab      	ldr	r3, [r5, #24]
 800a912:	b913      	cbnz	r3, 800a91a <__swsetup_r+0x16>
 800a914:	4628      	mov	r0, r5
 800a916:	f000 f985 	bl	800ac24 <__sinit>
 800a91a:	4b2e      	ldr	r3, [pc, #184]	; (800a9d4 <__swsetup_r+0xd0>)
 800a91c:	429c      	cmp	r4, r3
 800a91e:	d10f      	bne.n	800a940 <__swsetup_r+0x3c>
 800a920:	686c      	ldr	r4, [r5, #4]
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a928:	0719      	lsls	r1, r3, #28
 800a92a:	d42c      	bmi.n	800a986 <__swsetup_r+0x82>
 800a92c:	06dd      	lsls	r5, r3, #27
 800a92e:	d411      	bmi.n	800a954 <__swsetup_r+0x50>
 800a930:	2309      	movs	r3, #9
 800a932:	6033      	str	r3, [r6, #0]
 800a934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a938:	81a3      	strh	r3, [r4, #12]
 800a93a:	f04f 30ff 	mov.w	r0, #4294967295
 800a93e:	e03e      	b.n	800a9be <__swsetup_r+0xba>
 800a940:	4b25      	ldr	r3, [pc, #148]	; (800a9d8 <__swsetup_r+0xd4>)
 800a942:	429c      	cmp	r4, r3
 800a944:	d101      	bne.n	800a94a <__swsetup_r+0x46>
 800a946:	68ac      	ldr	r4, [r5, #8]
 800a948:	e7eb      	b.n	800a922 <__swsetup_r+0x1e>
 800a94a:	4b24      	ldr	r3, [pc, #144]	; (800a9dc <__swsetup_r+0xd8>)
 800a94c:	429c      	cmp	r4, r3
 800a94e:	bf08      	it	eq
 800a950:	68ec      	ldreq	r4, [r5, #12]
 800a952:	e7e6      	b.n	800a922 <__swsetup_r+0x1e>
 800a954:	0758      	lsls	r0, r3, #29
 800a956:	d512      	bpl.n	800a97e <__swsetup_r+0x7a>
 800a958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a95a:	b141      	cbz	r1, 800a96e <__swsetup_r+0x6a>
 800a95c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a960:	4299      	cmp	r1, r3
 800a962:	d002      	beq.n	800a96a <__swsetup_r+0x66>
 800a964:	4630      	mov	r0, r6
 800a966:	f7ff fb27 	bl	8009fb8 <_free_r>
 800a96a:	2300      	movs	r3, #0
 800a96c:	6363      	str	r3, [r4, #52]	; 0x34
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	2300      	movs	r3, #0
 800a978:	6063      	str	r3, [r4, #4]
 800a97a:	6923      	ldr	r3, [r4, #16]
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	f043 0308 	orr.w	r3, r3, #8
 800a984:	81a3      	strh	r3, [r4, #12]
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	b94b      	cbnz	r3, 800a99e <__swsetup_r+0x9a>
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a994:	d003      	beq.n	800a99e <__swsetup_r+0x9a>
 800a996:	4621      	mov	r1, r4
 800a998:	4630      	mov	r0, r6
 800a99a:	f000 fa09 	bl	800adb0 <__smakebuf_r>
 800a99e:	89a0      	ldrh	r0, [r4, #12]
 800a9a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9a4:	f010 0301 	ands.w	r3, r0, #1
 800a9a8:	d00a      	beq.n	800a9c0 <__swsetup_r+0xbc>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60a3      	str	r3, [r4, #8]
 800a9ae:	6963      	ldr	r3, [r4, #20]
 800a9b0:	425b      	negs	r3, r3
 800a9b2:	61a3      	str	r3, [r4, #24]
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	b943      	cbnz	r3, 800a9ca <__swsetup_r+0xc6>
 800a9b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9bc:	d1ba      	bne.n	800a934 <__swsetup_r+0x30>
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
 800a9c0:	0781      	lsls	r1, r0, #30
 800a9c2:	bf58      	it	pl
 800a9c4:	6963      	ldrpl	r3, [r4, #20]
 800a9c6:	60a3      	str	r3, [r4, #8]
 800a9c8:	e7f4      	b.n	800a9b4 <__swsetup_r+0xb0>
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e7f7      	b.n	800a9be <__swsetup_r+0xba>
 800a9ce:	bf00      	nop
 800a9d0:	2000000c 	.word	0x2000000c
 800a9d4:	0800b7ac 	.word	0x0800b7ac
 800a9d8:	0800b7cc 	.word	0x0800b7cc
 800a9dc:	0800b78c 	.word	0x0800b78c

0800a9e0 <abort>:
 800a9e0:	b508      	push	{r3, lr}
 800a9e2:	2006      	movs	r0, #6
 800a9e4:	f000 fa54 	bl	800ae90 <raise>
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	f7f8 ffaf 	bl	800394c <_exit>
	...

0800a9f0 <__sflush_r>:
 800a9f0:	898a      	ldrh	r2, [r1, #12]
 800a9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	0710      	lsls	r0, r2, #28
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	d458      	bmi.n	800aab0 <__sflush_r+0xc0>
 800a9fe:	684b      	ldr	r3, [r1, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	dc05      	bgt.n	800aa10 <__sflush_r+0x20>
 800aa04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dc02      	bgt.n	800aa10 <__sflush_r+0x20>
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa12:	2e00      	cmp	r6, #0
 800aa14:	d0f9      	beq.n	800aa0a <__sflush_r+0x1a>
 800aa16:	2300      	movs	r3, #0
 800aa18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa1c:	682f      	ldr	r7, [r5, #0]
 800aa1e:	602b      	str	r3, [r5, #0]
 800aa20:	d032      	beq.n	800aa88 <__sflush_r+0x98>
 800aa22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa24:	89a3      	ldrh	r3, [r4, #12]
 800aa26:	075a      	lsls	r2, r3, #29
 800aa28:	d505      	bpl.n	800aa36 <__sflush_r+0x46>
 800aa2a:	6863      	ldr	r3, [r4, #4]
 800aa2c:	1ac0      	subs	r0, r0, r3
 800aa2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa30:	b10b      	cbz	r3, 800aa36 <__sflush_r+0x46>
 800aa32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa34:	1ac0      	subs	r0, r0, r3
 800aa36:	2300      	movs	r3, #0
 800aa38:	4602      	mov	r2, r0
 800aa3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa3c:	6a21      	ldr	r1, [r4, #32]
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b0      	blx	r6
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	d106      	bne.n	800aa56 <__sflush_r+0x66>
 800aa48:	6829      	ldr	r1, [r5, #0]
 800aa4a:	291d      	cmp	r1, #29
 800aa4c:	d82c      	bhi.n	800aaa8 <__sflush_r+0xb8>
 800aa4e:	4a2a      	ldr	r2, [pc, #168]	; (800aaf8 <__sflush_r+0x108>)
 800aa50:	40ca      	lsrs	r2, r1
 800aa52:	07d6      	lsls	r6, r2, #31
 800aa54:	d528      	bpl.n	800aaa8 <__sflush_r+0xb8>
 800aa56:	2200      	movs	r2, #0
 800aa58:	6062      	str	r2, [r4, #4]
 800aa5a:	04d9      	lsls	r1, r3, #19
 800aa5c:	6922      	ldr	r2, [r4, #16]
 800aa5e:	6022      	str	r2, [r4, #0]
 800aa60:	d504      	bpl.n	800aa6c <__sflush_r+0x7c>
 800aa62:	1c42      	adds	r2, r0, #1
 800aa64:	d101      	bne.n	800aa6a <__sflush_r+0x7a>
 800aa66:	682b      	ldr	r3, [r5, #0]
 800aa68:	b903      	cbnz	r3, 800aa6c <__sflush_r+0x7c>
 800aa6a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa6e:	602f      	str	r7, [r5, #0]
 800aa70:	2900      	cmp	r1, #0
 800aa72:	d0ca      	beq.n	800aa0a <__sflush_r+0x1a>
 800aa74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa78:	4299      	cmp	r1, r3
 800aa7a:	d002      	beq.n	800aa82 <__sflush_r+0x92>
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	f7ff fa9b 	bl	8009fb8 <_free_r>
 800aa82:	2000      	movs	r0, #0
 800aa84:	6360      	str	r0, [r4, #52]	; 0x34
 800aa86:	e7c1      	b.n	800aa0c <__sflush_r+0x1c>
 800aa88:	6a21      	ldr	r1, [r4, #32]
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	47b0      	blx	r6
 800aa90:	1c41      	adds	r1, r0, #1
 800aa92:	d1c7      	bne.n	800aa24 <__sflush_r+0x34>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0c4      	beq.n	800aa24 <__sflush_r+0x34>
 800aa9a:	2b1d      	cmp	r3, #29
 800aa9c:	d001      	beq.n	800aaa2 <__sflush_r+0xb2>
 800aa9e:	2b16      	cmp	r3, #22
 800aaa0:	d101      	bne.n	800aaa6 <__sflush_r+0xb6>
 800aaa2:	602f      	str	r7, [r5, #0]
 800aaa4:	e7b1      	b.n	800aa0a <__sflush_r+0x1a>
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	e7ad      	b.n	800aa0c <__sflush_r+0x1c>
 800aab0:	690f      	ldr	r7, [r1, #16]
 800aab2:	2f00      	cmp	r7, #0
 800aab4:	d0a9      	beq.n	800aa0a <__sflush_r+0x1a>
 800aab6:	0793      	lsls	r3, r2, #30
 800aab8:	680e      	ldr	r6, [r1, #0]
 800aaba:	bf08      	it	eq
 800aabc:	694b      	ldreq	r3, [r1, #20]
 800aabe:	600f      	str	r7, [r1, #0]
 800aac0:	bf18      	it	ne
 800aac2:	2300      	movne	r3, #0
 800aac4:	eba6 0807 	sub.w	r8, r6, r7
 800aac8:	608b      	str	r3, [r1, #8]
 800aaca:	f1b8 0f00 	cmp.w	r8, #0
 800aace:	dd9c      	ble.n	800aa0a <__sflush_r+0x1a>
 800aad0:	6a21      	ldr	r1, [r4, #32]
 800aad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aad4:	4643      	mov	r3, r8
 800aad6:	463a      	mov	r2, r7
 800aad8:	4628      	mov	r0, r5
 800aada:	47b0      	blx	r6
 800aadc:	2800      	cmp	r0, #0
 800aade:	dc06      	bgt.n	800aaee <__sflush_r+0xfe>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae6:	81a3      	strh	r3, [r4, #12]
 800aae8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaec:	e78e      	b.n	800aa0c <__sflush_r+0x1c>
 800aaee:	4407      	add	r7, r0
 800aaf0:	eba8 0800 	sub.w	r8, r8, r0
 800aaf4:	e7e9      	b.n	800aaca <__sflush_r+0xda>
 800aaf6:	bf00      	nop
 800aaf8:	20400001 	.word	0x20400001

0800aafc <_fflush_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	690b      	ldr	r3, [r1, #16]
 800ab00:	4605      	mov	r5, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	b913      	cbnz	r3, 800ab0c <_fflush_r+0x10>
 800ab06:	2500      	movs	r5, #0
 800ab08:	4628      	mov	r0, r5
 800ab0a:	bd38      	pop	{r3, r4, r5, pc}
 800ab0c:	b118      	cbz	r0, 800ab16 <_fflush_r+0x1a>
 800ab0e:	6983      	ldr	r3, [r0, #24]
 800ab10:	b90b      	cbnz	r3, 800ab16 <_fflush_r+0x1a>
 800ab12:	f000 f887 	bl	800ac24 <__sinit>
 800ab16:	4b14      	ldr	r3, [pc, #80]	; (800ab68 <_fflush_r+0x6c>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	d11b      	bne.n	800ab54 <_fflush_r+0x58>
 800ab1c:	686c      	ldr	r4, [r5, #4]
 800ab1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0ef      	beq.n	800ab06 <_fflush_r+0xa>
 800ab26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab28:	07d0      	lsls	r0, r2, #31
 800ab2a:	d404      	bmi.n	800ab36 <_fflush_r+0x3a>
 800ab2c:	0599      	lsls	r1, r3, #22
 800ab2e:	d402      	bmi.n	800ab36 <_fflush_r+0x3a>
 800ab30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab32:	f000 f915 	bl	800ad60 <__retarget_lock_acquire_recursive>
 800ab36:	4628      	mov	r0, r5
 800ab38:	4621      	mov	r1, r4
 800ab3a:	f7ff ff59 	bl	800a9f0 <__sflush_r>
 800ab3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab40:	07da      	lsls	r2, r3, #31
 800ab42:	4605      	mov	r5, r0
 800ab44:	d4e0      	bmi.n	800ab08 <_fflush_r+0xc>
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	059b      	lsls	r3, r3, #22
 800ab4a:	d4dd      	bmi.n	800ab08 <_fflush_r+0xc>
 800ab4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab4e:	f000 f908 	bl	800ad62 <__retarget_lock_release_recursive>
 800ab52:	e7d9      	b.n	800ab08 <_fflush_r+0xc>
 800ab54:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <_fflush_r+0x70>)
 800ab56:	429c      	cmp	r4, r3
 800ab58:	d101      	bne.n	800ab5e <_fflush_r+0x62>
 800ab5a:	68ac      	ldr	r4, [r5, #8]
 800ab5c:	e7df      	b.n	800ab1e <_fflush_r+0x22>
 800ab5e:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <_fflush_r+0x74>)
 800ab60:	429c      	cmp	r4, r3
 800ab62:	bf08      	it	eq
 800ab64:	68ec      	ldreq	r4, [r5, #12]
 800ab66:	e7da      	b.n	800ab1e <_fflush_r+0x22>
 800ab68:	0800b7ac 	.word	0x0800b7ac
 800ab6c:	0800b7cc 	.word	0x0800b7cc
 800ab70:	0800b78c 	.word	0x0800b78c

0800ab74 <std>:
 800ab74:	2300      	movs	r3, #0
 800ab76:	b510      	push	{r4, lr}
 800ab78:	4604      	mov	r4, r0
 800ab7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab82:	6083      	str	r3, [r0, #8]
 800ab84:	8181      	strh	r1, [r0, #12]
 800ab86:	6643      	str	r3, [r0, #100]	; 0x64
 800ab88:	81c2      	strh	r2, [r0, #14]
 800ab8a:	6183      	str	r3, [r0, #24]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	2208      	movs	r2, #8
 800ab90:	305c      	adds	r0, #92	; 0x5c
 800ab92:	f7fb fddb 	bl	800674c <memset>
 800ab96:	4b05      	ldr	r3, [pc, #20]	; (800abac <std+0x38>)
 800ab98:	6263      	str	r3, [r4, #36]	; 0x24
 800ab9a:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <std+0x3c>)
 800ab9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab9e:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <std+0x40>)
 800aba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aba2:	4b05      	ldr	r3, [pc, #20]	; (800abb8 <std+0x44>)
 800aba4:	6224      	str	r4, [r4, #32]
 800aba6:	6323      	str	r3, [r4, #48]	; 0x30
 800aba8:	bd10      	pop	{r4, pc}
 800abaa:	bf00      	nop
 800abac:	0800aec9 	.word	0x0800aec9
 800abb0:	0800aeeb 	.word	0x0800aeeb
 800abb4:	0800af23 	.word	0x0800af23
 800abb8:	0800af47 	.word	0x0800af47

0800abbc <_cleanup_r>:
 800abbc:	4901      	ldr	r1, [pc, #4]	; (800abc4 <_cleanup_r+0x8>)
 800abbe:	f000 b8af 	b.w	800ad20 <_fwalk_reent>
 800abc2:	bf00      	nop
 800abc4:	0800aafd 	.word	0x0800aafd

0800abc8 <__sfmoreglue>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	2268      	movs	r2, #104	; 0x68
 800abcc:	1e4d      	subs	r5, r1, #1
 800abce:	4355      	muls	r5, r2
 800abd0:	460e      	mov	r6, r1
 800abd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abd6:	f7ff fa5b 	bl	800a090 <_malloc_r>
 800abda:	4604      	mov	r4, r0
 800abdc:	b140      	cbz	r0, 800abf0 <__sfmoreglue+0x28>
 800abde:	2100      	movs	r1, #0
 800abe0:	e9c0 1600 	strd	r1, r6, [r0]
 800abe4:	300c      	adds	r0, #12
 800abe6:	60a0      	str	r0, [r4, #8]
 800abe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abec:	f7fb fdae 	bl	800674c <memset>
 800abf0:	4620      	mov	r0, r4
 800abf2:	bd70      	pop	{r4, r5, r6, pc}

0800abf4 <__sfp_lock_acquire>:
 800abf4:	4801      	ldr	r0, [pc, #4]	; (800abfc <__sfp_lock_acquire+0x8>)
 800abf6:	f000 b8b3 	b.w	800ad60 <__retarget_lock_acquire_recursive>
 800abfa:	bf00      	nop
 800abfc:	200004e5 	.word	0x200004e5

0800ac00 <__sfp_lock_release>:
 800ac00:	4801      	ldr	r0, [pc, #4]	; (800ac08 <__sfp_lock_release+0x8>)
 800ac02:	f000 b8ae 	b.w	800ad62 <__retarget_lock_release_recursive>
 800ac06:	bf00      	nop
 800ac08:	200004e5 	.word	0x200004e5

0800ac0c <__sinit_lock_acquire>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	; (800ac14 <__sinit_lock_acquire+0x8>)
 800ac0e:	f000 b8a7 	b.w	800ad60 <__retarget_lock_acquire_recursive>
 800ac12:	bf00      	nop
 800ac14:	200004e6 	.word	0x200004e6

0800ac18 <__sinit_lock_release>:
 800ac18:	4801      	ldr	r0, [pc, #4]	; (800ac20 <__sinit_lock_release+0x8>)
 800ac1a:	f000 b8a2 	b.w	800ad62 <__retarget_lock_release_recursive>
 800ac1e:	bf00      	nop
 800ac20:	200004e6 	.word	0x200004e6

0800ac24 <__sinit>:
 800ac24:	b510      	push	{r4, lr}
 800ac26:	4604      	mov	r4, r0
 800ac28:	f7ff fff0 	bl	800ac0c <__sinit_lock_acquire>
 800ac2c:	69a3      	ldr	r3, [r4, #24]
 800ac2e:	b11b      	cbz	r3, 800ac38 <__sinit+0x14>
 800ac30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac34:	f7ff bff0 	b.w	800ac18 <__sinit_lock_release>
 800ac38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac3c:	6523      	str	r3, [r4, #80]	; 0x50
 800ac3e:	4b13      	ldr	r3, [pc, #76]	; (800ac8c <__sinit+0x68>)
 800ac40:	4a13      	ldr	r2, [pc, #76]	; (800ac90 <__sinit+0x6c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	bf04      	itt	eq
 800ac4a:	2301      	moveq	r3, #1
 800ac4c:	61a3      	streq	r3, [r4, #24]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 f820 	bl	800ac94 <__sfp>
 800ac54:	6060      	str	r0, [r4, #4]
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 f81c 	bl	800ac94 <__sfp>
 800ac5c:	60a0      	str	r0, [r4, #8]
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 f818 	bl	800ac94 <__sfp>
 800ac64:	2200      	movs	r2, #0
 800ac66:	60e0      	str	r0, [r4, #12]
 800ac68:	2104      	movs	r1, #4
 800ac6a:	6860      	ldr	r0, [r4, #4]
 800ac6c:	f7ff ff82 	bl	800ab74 <std>
 800ac70:	68a0      	ldr	r0, [r4, #8]
 800ac72:	2201      	movs	r2, #1
 800ac74:	2109      	movs	r1, #9
 800ac76:	f7ff ff7d 	bl	800ab74 <std>
 800ac7a:	68e0      	ldr	r0, [r4, #12]
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	2112      	movs	r1, #18
 800ac80:	f7ff ff78 	bl	800ab74 <std>
 800ac84:	2301      	movs	r3, #1
 800ac86:	61a3      	str	r3, [r4, #24]
 800ac88:	e7d2      	b.n	800ac30 <__sinit+0xc>
 800ac8a:	bf00      	nop
 800ac8c:	0800b344 	.word	0x0800b344
 800ac90:	0800abbd 	.word	0x0800abbd

0800ac94 <__sfp>:
 800ac94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac96:	4607      	mov	r7, r0
 800ac98:	f7ff ffac 	bl	800abf4 <__sfp_lock_acquire>
 800ac9c:	4b1e      	ldr	r3, [pc, #120]	; (800ad18 <__sfp+0x84>)
 800ac9e:	681e      	ldr	r6, [r3, #0]
 800aca0:	69b3      	ldr	r3, [r6, #24]
 800aca2:	b913      	cbnz	r3, 800acaa <__sfp+0x16>
 800aca4:	4630      	mov	r0, r6
 800aca6:	f7ff ffbd 	bl	800ac24 <__sinit>
 800acaa:	3648      	adds	r6, #72	; 0x48
 800acac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acb0:	3b01      	subs	r3, #1
 800acb2:	d503      	bpl.n	800acbc <__sfp+0x28>
 800acb4:	6833      	ldr	r3, [r6, #0]
 800acb6:	b30b      	cbz	r3, 800acfc <__sfp+0x68>
 800acb8:	6836      	ldr	r6, [r6, #0]
 800acba:	e7f7      	b.n	800acac <__sfp+0x18>
 800acbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acc0:	b9d5      	cbnz	r5, 800acf8 <__sfp+0x64>
 800acc2:	4b16      	ldr	r3, [pc, #88]	; (800ad1c <__sfp+0x88>)
 800acc4:	60e3      	str	r3, [r4, #12]
 800acc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acca:	6665      	str	r5, [r4, #100]	; 0x64
 800accc:	f000 f847 	bl	800ad5e <__retarget_lock_init_recursive>
 800acd0:	f7ff ff96 	bl	800ac00 <__sfp_lock_release>
 800acd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acdc:	6025      	str	r5, [r4, #0]
 800acde:	61a5      	str	r5, [r4, #24]
 800ace0:	2208      	movs	r2, #8
 800ace2:	4629      	mov	r1, r5
 800ace4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ace8:	f7fb fd30 	bl	800674c <memset>
 800acec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acf4:	4620      	mov	r0, r4
 800acf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf8:	3468      	adds	r4, #104	; 0x68
 800acfa:	e7d9      	b.n	800acb0 <__sfp+0x1c>
 800acfc:	2104      	movs	r1, #4
 800acfe:	4638      	mov	r0, r7
 800ad00:	f7ff ff62 	bl	800abc8 <__sfmoreglue>
 800ad04:	4604      	mov	r4, r0
 800ad06:	6030      	str	r0, [r6, #0]
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d1d5      	bne.n	800acb8 <__sfp+0x24>
 800ad0c:	f7ff ff78 	bl	800ac00 <__sfp_lock_release>
 800ad10:	230c      	movs	r3, #12
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	e7ee      	b.n	800acf4 <__sfp+0x60>
 800ad16:	bf00      	nop
 800ad18:	0800b344 	.word	0x0800b344
 800ad1c:	ffff0001 	.word	0xffff0001

0800ad20 <_fwalk_reent>:
 800ad20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad24:	4606      	mov	r6, r0
 800ad26:	4688      	mov	r8, r1
 800ad28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad2c:	2700      	movs	r7, #0
 800ad2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad32:	f1b9 0901 	subs.w	r9, r9, #1
 800ad36:	d505      	bpl.n	800ad44 <_fwalk_reent+0x24>
 800ad38:	6824      	ldr	r4, [r4, #0]
 800ad3a:	2c00      	cmp	r4, #0
 800ad3c:	d1f7      	bne.n	800ad2e <_fwalk_reent+0xe>
 800ad3e:	4638      	mov	r0, r7
 800ad40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad44:	89ab      	ldrh	r3, [r5, #12]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d907      	bls.n	800ad5a <_fwalk_reent+0x3a>
 800ad4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	d003      	beq.n	800ad5a <_fwalk_reent+0x3a>
 800ad52:	4629      	mov	r1, r5
 800ad54:	4630      	mov	r0, r6
 800ad56:	47c0      	blx	r8
 800ad58:	4307      	orrs	r7, r0
 800ad5a:	3568      	adds	r5, #104	; 0x68
 800ad5c:	e7e9      	b.n	800ad32 <_fwalk_reent+0x12>

0800ad5e <__retarget_lock_init_recursive>:
 800ad5e:	4770      	bx	lr

0800ad60 <__retarget_lock_acquire_recursive>:
 800ad60:	4770      	bx	lr

0800ad62 <__retarget_lock_release_recursive>:
 800ad62:	4770      	bx	lr

0800ad64 <__swhatbuf_r>:
 800ad64:	b570      	push	{r4, r5, r6, lr}
 800ad66:	460e      	mov	r6, r1
 800ad68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	b096      	sub	sp, #88	; 0x58
 800ad70:	4614      	mov	r4, r2
 800ad72:	461d      	mov	r5, r3
 800ad74:	da08      	bge.n	800ad88 <__swhatbuf_r+0x24>
 800ad76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	602a      	str	r2, [r5, #0]
 800ad7e:	061a      	lsls	r2, r3, #24
 800ad80:	d410      	bmi.n	800ada4 <__swhatbuf_r+0x40>
 800ad82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad86:	e00e      	b.n	800ada6 <__swhatbuf_r+0x42>
 800ad88:	466a      	mov	r2, sp
 800ad8a:	f000 f903 	bl	800af94 <_fstat_r>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	dbf1      	blt.n	800ad76 <__swhatbuf_r+0x12>
 800ad92:	9a01      	ldr	r2, [sp, #4]
 800ad94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad9c:	425a      	negs	r2, r3
 800ad9e:	415a      	adcs	r2, r3
 800ada0:	602a      	str	r2, [r5, #0]
 800ada2:	e7ee      	b.n	800ad82 <__swhatbuf_r+0x1e>
 800ada4:	2340      	movs	r3, #64	; 0x40
 800ada6:	2000      	movs	r0, #0
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	b016      	add	sp, #88	; 0x58
 800adac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800adb0 <__smakebuf_r>:
 800adb0:	898b      	ldrh	r3, [r1, #12]
 800adb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adb4:	079d      	lsls	r5, r3, #30
 800adb6:	4606      	mov	r6, r0
 800adb8:	460c      	mov	r4, r1
 800adba:	d507      	bpl.n	800adcc <__smakebuf_r+0x1c>
 800adbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	6123      	str	r3, [r4, #16]
 800adc4:	2301      	movs	r3, #1
 800adc6:	6163      	str	r3, [r4, #20]
 800adc8:	b002      	add	sp, #8
 800adca:	bd70      	pop	{r4, r5, r6, pc}
 800adcc:	ab01      	add	r3, sp, #4
 800adce:	466a      	mov	r2, sp
 800add0:	f7ff ffc8 	bl	800ad64 <__swhatbuf_r>
 800add4:	9900      	ldr	r1, [sp, #0]
 800add6:	4605      	mov	r5, r0
 800add8:	4630      	mov	r0, r6
 800adda:	f7ff f959 	bl	800a090 <_malloc_r>
 800adde:	b948      	cbnz	r0, 800adf4 <__smakebuf_r+0x44>
 800ade0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade4:	059a      	lsls	r2, r3, #22
 800ade6:	d4ef      	bmi.n	800adc8 <__smakebuf_r+0x18>
 800ade8:	f023 0303 	bic.w	r3, r3, #3
 800adec:	f043 0302 	orr.w	r3, r3, #2
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	e7e3      	b.n	800adbc <__smakebuf_r+0xc>
 800adf4:	4b0d      	ldr	r3, [pc, #52]	; (800ae2c <__smakebuf_r+0x7c>)
 800adf6:	62b3      	str	r3, [r6, #40]	; 0x28
 800adf8:	89a3      	ldrh	r3, [r4, #12]
 800adfa:	6020      	str	r0, [r4, #0]
 800adfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae00:	81a3      	strh	r3, [r4, #12]
 800ae02:	9b00      	ldr	r3, [sp, #0]
 800ae04:	6163      	str	r3, [r4, #20]
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	6120      	str	r0, [r4, #16]
 800ae0a:	b15b      	cbz	r3, 800ae24 <__smakebuf_r+0x74>
 800ae0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae10:	4630      	mov	r0, r6
 800ae12:	f000 f8d1 	bl	800afb8 <_isatty_r>
 800ae16:	b128      	cbz	r0, 800ae24 <__smakebuf_r+0x74>
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	f023 0303 	bic.w	r3, r3, #3
 800ae1e:	f043 0301 	orr.w	r3, r3, #1
 800ae22:	81a3      	strh	r3, [r4, #12]
 800ae24:	89a0      	ldrh	r0, [r4, #12]
 800ae26:	4305      	orrs	r5, r0
 800ae28:	81a5      	strh	r5, [r4, #12]
 800ae2a:	e7cd      	b.n	800adc8 <__smakebuf_r+0x18>
 800ae2c:	0800abbd 	.word	0x0800abbd

0800ae30 <_malloc_usable_size_r>:
 800ae30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae34:	1f18      	subs	r0, r3, #4
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	bfbc      	itt	lt
 800ae3a:	580b      	ldrlt	r3, [r1, r0]
 800ae3c:	18c0      	addlt	r0, r0, r3
 800ae3e:	4770      	bx	lr

0800ae40 <_raise_r>:
 800ae40:	291f      	cmp	r1, #31
 800ae42:	b538      	push	{r3, r4, r5, lr}
 800ae44:	4604      	mov	r4, r0
 800ae46:	460d      	mov	r5, r1
 800ae48:	d904      	bls.n	800ae54 <_raise_r+0x14>
 800ae4a:	2316      	movs	r3, #22
 800ae4c:	6003      	str	r3, [r0, #0]
 800ae4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae56:	b112      	cbz	r2, 800ae5e <_raise_r+0x1e>
 800ae58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae5c:	b94b      	cbnz	r3, 800ae72 <_raise_r+0x32>
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 f830 	bl	800aec4 <_getpid_r>
 800ae64:	462a      	mov	r2, r5
 800ae66:	4601      	mov	r1, r0
 800ae68:	4620      	mov	r0, r4
 800ae6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae6e:	f000 b817 	b.w	800aea0 <_kill_r>
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d00a      	beq.n	800ae8c <_raise_r+0x4c>
 800ae76:	1c59      	adds	r1, r3, #1
 800ae78:	d103      	bne.n	800ae82 <_raise_r+0x42>
 800ae7a:	2316      	movs	r3, #22
 800ae7c:	6003      	str	r3, [r0, #0]
 800ae7e:	2001      	movs	r0, #1
 800ae80:	e7e7      	b.n	800ae52 <_raise_r+0x12>
 800ae82:	2400      	movs	r4, #0
 800ae84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae88:	4628      	mov	r0, r5
 800ae8a:	4798      	blx	r3
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	e7e0      	b.n	800ae52 <_raise_r+0x12>

0800ae90 <raise>:
 800ae90:	4b02      	ldr	r3, [pc, #8]	; (800ae9c <raise+0xc>)
 800ae92:	4601      	mov	r1, r0
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	f7ff bfd3 	b.w	800ae40 <_raise_r>
 800ae9a:	bf00      	nop
 800ae9c:	2000000c 	.word	0x2000000c

0800aea0 <_kill_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d07      	ldr	r5, [pc, #28]	; (800aec0 <_kill_r+0x20>)
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	4608      	mov	r0, r1
 800aeaa:	4611      	mov	r1, r2
 800aeac:	602b      	str	r3, [r5, #0]
 800aeae:	f7f8 fd3d 	bl	800392c <_kill>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	d102      	bne.n	800aebc <_kill_r+0x1c>
 800aeb6:	682b      	ldr	r3, [r5, #0]
 800aeb8:	b103      	cbz	r3, 800aebc <_kill_r+0x1c>
 800aeba:	6023      	str	r3, [r4, #0]
 800aebc:	bd38      	pop	{r3, r4, r5, pc}
 800aebe:	bf00      	nop
 800aec0:	200004e0 	.word	0x200004e0

0800aec4 <_getpid_r>:
 800aec4:	f7f8 bd2a 	b.w	800391c <_getpid>

0800aec8 <__sread>:
 800aec8:	b510      	push	{r4, lr}
 800aeca:	460c      	mov	r4, r1
 800aecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed0:	f000 f894 	bl	800affc <_read_r>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	bfab      	itete	ge
 800aed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aeda:	89a3      	ldrhlt	r3, [r4, #12]
 800aedc:	181b      	addge	r3, r3, r0
 800aede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aee2:	bfac      	ite	ge
 800aee4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aee6:	81a3      	strhlt	r3, [r4, #12]
 800aee8:	bd10      	pop	{r4, pc}

0800aeea <__swrite>:
 800aeea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeee:	461f      	mov	r7, r3
 800aef0:	898b      	ldrh	r3, [r1, #12]
 800aef2:	05db      	lsls	r3, r3, #23
 800aef4:	4605      	mov	r5, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	4616      	mov	r6, r2
 800aefa:	d505      	bpl.n	800af08 <__swrite+0x1e>
 800aefc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af00:	2302      	movs	r3, #2
 800af02:	2200      	movs	r2, #0
 800af04:	f000 f868 	bl	800afd8 <_lseek_r>
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af12:	81a3      	strh	r3, [r4, #12]
 800af14:	4632      	mov	r2, r6
 800af16:	463b      	mov	r3, r7
 800af18:	4628      	mov	r0, r5
 800af1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af1e:	f000 b817 	b.w	800af50 <_write_r>

0800af22 <__sseek>:
 800af22:	b510      	push	{r4, lr}
 800af24:	460c      	mov	r4, r1
 800af26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2a:	f000 f855 	bl	800afd8 <_lseek_r>
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	bf15      	itete	ne
 800af34:	6560      	strne	r0, [r4, #84]	; 0x54
 800af36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af3e:	81a3      	strheq	r3, [r4, #12]
 800af40:	bf18      	it	ne
 800af42:	81a3      	strhne	r3, [r4, #12]
 800af44:	bd10      	pop	{r4, pc}

0800af46 <__sclose>:
 800af46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af4a:	f000 b813 	b.w	800af74 <_close_r>
	...

0800af50 <_write_r>:
 800af50:	b538      	push	{r3, r4, r5, lr}
 800af52:	4d07      	ldr	r5, [pc, #28]	; (800af70 <_write_r+0x20>)
 800af54:	4604      	mov	r4, r0
 800af56:	4608      	mov	r0, r1
 800af58:	4611      	mov	r1, r2
 800af5a:	2200      	movs	r2, #0
 800af5c:	602a      	str	r2, [r5, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	f7f8 fd1b 	bl	800399a <_write>
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	d102      	bne.n	800af6e <_write_r+0x1e>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	b103      	cbz	r3, 800af6e <_write_r+0x1e>
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	200004e0 	.word	0x200004e0

0800af74 <_close_r>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	4d06      	ldr	r5, [pc, #24]	; (800af90 <_close_r+0x1c>)
 800af78:	2300      	movs	r3, #0
 800af7a:	4604      	mov	r4, r0
 800af7c:	4608      	mov	r0, r1
 800af7e:	602b      	str	r3, [r5, #0]
 800af80:	f7f8 fd27 	bl	80039d2 <_close>
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	d102      	bne.n	800af8e <_close_r+0x1a>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	b103      	cbz	r3, 800af8e <_close_r+0x1a>
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	bd38      	pop	{r3, r4, r5, pc}
 800af90:	200004e0 	.word	0x200004e0

0800af94 <_fstat_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	4d07      	ldr	r5, [pc, #28]	; (800afb4 <_fstat_r+0x20>)
 800af98:	2300      	movs	r3, #0
 800af9a:	4604      	mov	r4, r0
 800af9c:	4608      	mov	r0, r1
 800af9e:	4611      	mov	r1, r2
 800afa0:	602b      	str	r3, [r5, #0]
 800afa2:	f7f8 fd22 	bl	80039ea <_fstat>
 800afa6:	1c43      	adds	r3, r0, #1
 800afa8:	d102      	bne.n	800afb0 <_fstat_r+0x1c>
 800afaa:	682b      	ldr	r3, [r5, #0]
 800afac:	b103      	cbz	r3, 800afb0 <_fstat_r+0x1c>
 800afae:	6023      	str	r3, [r4, #0]
 800afb0:	bd38      	pop	{r3, r4, r5, pc}
 800afb2:	bf00      	nop
 800afb4:	200004e0 	.word	0x200004e0

0800afb8 <_isatty_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d06      	ldr	r5, [pc, #24]	; (800afd4 <_isatty_r+0x1c>)
 800afbc:	2300      	movs	r3, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	602b      	str	r3, [r5, #0]
 800afc4:	f7f8 fd21 	bl	8003a0a <_isatty>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_isatty_r+0x1a>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_isatty_r+0x1a>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	200004e0 	.word	0x200004e0

0800afd8 <_lseek_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	; (800aff8 <_lseek_r+0x20>)
 800afdc:	4604      	mov	r4, r0
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	602a      	str	r2, [r5, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f7f8 fd1a 	bl	8003a20 <_lseek>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_lseek_r+0x1e>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_lseek_r+0x1e>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	200004e0 	.word	0x200004e0

0800affc <_read_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d07      	ldr	r5, [pc, #28]	; (800b01c <_read_r+0x20>)
 800b000:	4604      	mov	r4, r0
 800b002:	4608      	mov	r0, r1
 800b004:	4611      	mov	r1, r2
 800b006:	2200      	movs	r2, #0
 800b008:	602a      	str	r2, [r5, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f7f8 fca8 	bl	8003960 <_read>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_read_r+0x1e>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_read_r+0x1e>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	200004e0 	.word	0x200004e0

0800b020 <_init>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	bf00      	nop
 800b024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b026:	bc08      	pop	{r3}
 800b028:	469e      	mov	lr, r3
 800b02a:	4770      	bx	lr

0800b02c <_fini>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	bf00      	nop
 800b030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b032:	bc08      	pop	{r3}
 800b034:	469e      	mov	lr, r3
 800b036:	4770      	bx	lr
